rule win_himera_loader_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.himera_loader."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.himera_loader"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8945fc c745b000000000 c745b800000000 33c0 8845b7 }
            // n = 5, score = 200
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   c745b000000000       | mov                 dword ptr [ebp - 0x50], 0
            //   c745b800000000       | mov                 dword ptr [ebp - 0x48], 0
            //   33c0                 | xor                 eax, eax
            //   8845b7               | mov                 byte ptr [ebp - 0x49], al

        $sequence_1 = { c645e541 c645e641 c645e742 c645e85d c645e900 c645ea4b c645eb56 }
            // n = 7, score = 200
            //   c645e541             | mov                 byte ptr [ebp - 0x1b], 0x41
            //   c645e641             | mov                 byte ptr [ebp - 0x1a], 0x41
            //   c645e742             | mov                 byte ptr [ebp - 0x19], 0x42
            //   c645e85d             | mov                 byte ptr [ebp - 0x18], 0x5d
            //   c645e900             | mov                 byte ptr [ebp - 0x17], 0
            //   c645ea4b             | mov                 byte ptr [ebp - 0x16], 0x4b
            //   c645eb56             | mov                 byte ptr [ebp - 0x15], 0x56

        $sequence_2 = { 8b4d08 0fb71401 52 e8???????? 83c408 8b4dfc 66894126 }
            // n = 7, score = 200
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]
            //   0fb71401             | movzx               edx, word ptr [ecx + eax]
            //   52                   | push                edx
            //   e8????????           |                     
            //   83c408               | add                 esp, 8
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
            //   66894126             | mov                 word ptr [ecx + 0x26], ax

        $sequence_3 = { 7d11 81bdd882ffff60030000 7d05 e8???????? }
            // n = 4, score = 200
            //   7d11                 | jge                 0x13
            //   81bdd882ffff60030000     | cmp    dword ptr [ebp - 0x7d28], 0x360
            //   7d05                 | jge                 7
            //   e8????????           |                     

        $sequence_4 = { 83c404 8b10 52 8b4510 50 e8???????? 83c404 }
            // n = 7, score = 200
            //   83c404               | add                 esp, 4
            //   8b10                 | mov                 edx, dword ptr [eax]
            //   52                   | push                edx
            //   8b4510               | mov                 eax, dword ptr [ebp + 0x10]
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c404               | add                 esp, 4

        $sequence_5 = { 33c0 40 e9???????? 8365c800 c745cc499d4000 a1???????? 8d4dc8 }
            // n = 7, score = 200
            //   33c0                 | xor                 eax, eax
            //   40                   | inc                 eax
            //   e9????????           |                     
            //   8365c800             | and                 dword ptr [ebp - 0x38], 0
            //   c745cc499d4000       | mov                 dword ptr [ebp - 0x34], 0x409d49
            //   a1????????           |                     
            //   8d4dc8               | lea                 ecx, dword ptr [ebp - 0x38]

        $sequence_6 = { c645e645 c645e756 c645e800 c645e94a c645ea42 c645eb42 c645ec2e }
            // n = 7, score = 200
            //   c645e645             | mov                 byte ptr [ebp - 0x1a], 0x45
            //   c645e756             | mov                 byte ptr [ebp - 0x19], 0x56
            //   c645e800             | mov                 byte ptr [ebp - 0x18], 0
            //   c645e94a             | mov                 byte ptr [ebp - 0x17], 0x4a
            //   c645ea42             | mov                 byte ptr [ebp - 0x16], 0x42
            //   c645eb42             | mov                 byte ptr [ebp - 0x15], 0x42
            //   c645ec2e             | mov                 byte ptr [ebp - 0x14], 0x2e

        $sequence_7 = { 0f84d3000000 8b048d7c3c4200 89858cf8ffff 85c0 }
            // n = 4, score = 200
            //   0f84d3000000         | je                  0xd9
            //   8b048d7c3c4200       | mov                 eax, dword ptr [ecx*4 + 0x423c7c]
            //   89858cf8ffff         | mov                 dword ptr [ebp - 0x774], eax
            //   85c0                 | test                eax, eax

        $sequence_8 = { 8908 8b550c 8b45f8 8902 8b4dfc }
            // n = 5, score = 200
            //   8908                 | mov                 dword ptr [eax], ecx
            //   8b550c               | mov                 edx, dword ptr [ebp + 0xc]
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   8902                 | mov                 dword ptr [edx], eax
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]

        $sequence_9 = { c645c017 c645c14f c645c24d c645c301 c645c41a c645c540 c645c617 }
            // n = 7, score = 200
            //   c645c017             | mov                 byte ptr [ebp - 0x40], 0x17
            //   c645c14f             | mov                 byte ptr [ebp - 0x3f], 0x4f
            //   c645c24d             | mov                 byte ptr [ebp - 0x3e], 0x4d
            //   c645c301             | mov                 byte ptr [ebp - 0x3d], 1
            //   c645c41a             | mov                 byte ptr [ebp - 0x3c], 0x1a
            //   c645c540             | mov                 byte ptr [ebp - 0x3b], 0x40
            //   c645c617             | mov                 byte ptr [ebp - 0x3a], 0x17

    condition:
        7 of them and filesize < 385024
}