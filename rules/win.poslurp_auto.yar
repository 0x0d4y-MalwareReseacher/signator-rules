rule win_poslurp_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.poslurp."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.poslurp"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 498bce 488d6a02 482bca 8bd3 }
            // n = 4, score = 100
            //   498bce               | dec                 eax
            //   488d6a02             | mov                 dword ptr [esp + 0x38], edi
            //   482bca               | dec                 esp
            //   8bd3                 | mov                 dword ptr [esp + 0x20], edi

        $sequence_1 = { 8905???????? 3b05???????? 7312 33c9 ff15???????? cc 33c9 }
            // n = 7, score = 100
            //   8905????????         |                     
            //   3b05????????         |                     
            //   7312                 | mov                 ecx, esp
            //   33c9                 | dec                 ebp
            //   ff15????????         |                     
            //   cc                   | mov                 eax, esp
            //   33c9                 | test                eax, eax

        $sequence_2 = { 0fbe01 ffca 83e830 83f809 7709 ffc7 48ffc1 }
            // n = 7, score = 100
            //   0fbe01               | lea                 ecx, [esp + 0x50]
            //   ffca                 | mov                 dl, 1
            //   83e830               | inc                 ecx
            //   83f809               | lea                 ecx, [eax + 0x14]
            //   7709                 | dec                 eax
            //   ffc7                 | mov                 dword ptr [esp + 0x68], edi
            //   48ffc1               | inc                 ebp

        $sequence_3 = { 8b7c0850 4c8bf2 488be9 4d897ba0 }
            // n = 4, score = 100
            //   8b7c0850             | dec                 eax
            //   4c8bf2               | mov                 edi, esi
            //   488be9               | dec                 ecx
            //   4d897ba0             | mov                 eax, ecx

        $sequence_4 = { 4c8bf0 488bf8 33c0 f3aa 498bce 488bd5 }
            // n = 6, score = 100
            //   4c8bf0               | mov                 eax, 0x52
            //   488bf8               | inc                 ebp
            //   33c0                 | xor                 ecx, ecx
            //   f3aa                 | mov                 word ptr [esp + 0x3a], ax
            //   498bce               | mov                 eax, 0x4d
            //   488bd5               | inc                 ebp

        $sequence_5 = { 6689445420 41ffc0 48ffc2 4883c9ff }
            // n = 4, score = 100
            //   6689445420           | cmp                 eax, 0x30
            //   41ffc0               | dec                 eax
            //   48ffc2               | mov                 ebx, eax
            //   4883c9ff             | dec                 eax

        $sequence_6 = { ff15???????? 4883f830 0f85b3000000 817c245000100000 }
            // n = 4, score = 100
            //   ff15????????         |                     
            //   4883f830             | lea                 edx, [esp + 0x20]
            //   0f85b3000000         | dec                 ebp
            //   817c245000100000     | add                 eax, esp

        $sequence_7 = { 4885c0 7451 8b0e 85c9 }
            // n = 4, score = 100
            //   4885c0               | add                 eax, ebp
            //   7451                 | test                esi, esi
            //   8b0e                 | je                  0x5f
            //   85c9                 | inc                 esp

        $sequence_8 = { 488bd8 4883f8ff 7422 488d542420 488bc8 c744242038020000 }
            // n = 6, score = 100
            //   488bd8               | test                eax, eax
            //   4883f8ff             | jne                 0xcea
            //   7422                 | dec                 eax
            //   488d542420           | sub                 ebx, eax
            //   488bc8               | inc                 ecx
            //   c744242038020000     | mov                 al, 1

        $sequence_9 = { 66897c2460 6644894c2462 66895c2464 ff15???????? 488bf0 4885c0 0f84c0000000 }
            // n = 7, score = 100
            //   66897c2460           | inc                 sp
            //   6644894c2462         | mov                 dword ptr [esp + 0x5c], ecx
            //   66895c2464           | mov                 word ptr [esp + 0x70], ax
            //   ff15????????         |                     
            //   488bf0               | mov                 ecx, 0x65
            //   4885c0               | mov                 eax, 0x2e
            //   0f84c0000000         | mov                 word ptr [esp + 0x76], ax

    condition:
        7 of them and filesize < 50176
}