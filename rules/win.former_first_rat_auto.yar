rule win_former_first_rat_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.former_first_rat."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.former_first_rat"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 0fb6c2 f7d8 1bc0 83c002 }
            // n = 4, score = 200
            //   0fb6c2               | movzx               eax, dl
            //   f7d8                 | neg                 eax
            //   1bc0                 | sbb                 eax, eax
            //   83c002               | add                 eax, 2

        $sequence_1 = { 894608 6a04 89460c e8???????? }
            // n = 4, score = 200
            //   894608               | mov                 dword ptr [esi + 8], eax
            //   6a04                 | push                4
            //   89460c               | mov                 dword ptr [esi + 0xc], eax
            //   e8????????           |                     

        $sequence_2 = { 6a00 6a00 ff15???????? 803f32 0f8540020000 807f0232 }
            // n = 6, score = 200
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   ff15????????         |                     
            //   803f32               | cmp                 byte ptr [edi], 0x32
            //   0f8540020000         | jne                 0x246
            //   807f0232             | cmp                 byte ptr [edi + 2], 0x32

        $sequence_3 = { 75e8 8d85c8fbffff 8d5002 668b08 83c002 }
            // n = 5, score = 200
            //   75e8                 | jne                 0xffffffea
            //   8d85c8fbffff         | lea                 eax, dword ptr [ebp - 0x438]
            //   8d5002               | lea                 edx, dword ptr [eax + 2]
            //   668b08               | mov                 cx, word ptr [eax]
            //   83c002               | add                 eax, 2

        $sequence_4 = { 75f6 33c0 c3 50 e8???????? 83c404 69c0e8030000 }
            // n = 7, score = 200
            //   75f6                 | jne                 0xfffffff8
            //   33c0                 | xor                 eax, eax
            //   c3                   | ret                 
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   69c0e8030000         | imul                eax, eax, 0x3e8

        $sequence_5 = { 47 84c0 75f8 8d85b4feffff 68???????? }
            // n = 5, score = 200
            //   47                   | inc                 edi
            //   84c0                 | test                al, al
            //   75f8                 | jne                 0xfffffffa
            //   8d85b4feffff         | lea                 eax, dword ptr [ebp - 0x14c]
            //   68????????           |                     

        $sequence_6 = { 7e60 8bc1 99 81e2ffff0000 8d3c02 81e70000ffff }
            // n = 6, score = 200
            //   7e60                 | jle                 0x62
            //   8bc1                 | mov                 eax, ecx
            //   99                   | cdq                 
            //   81e2ffff0000         | and                 edx, 0xffff
            //   8d3c02               | lea                 edi, dword ptr [edx + eax]
            //   81e70000ffff         | and                 edi, 0xffff0000

        $sequence_7 = { 57 e8???????? 83c404 ebae 8b9508ffffff }
            // n = 5, score = 200
            //   57                   | push                edi
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   ebae                 | jmp                 0xffffffb0
            //   8b9508ffffff         | mov                 edx, dword ptr [ebp - 0xf8]

        $sequence_8 = { 03cf 8908 488b4340 48833800 }
            // n = 4, score = 100
            //   03cf                 | inc                 ecx
            //   8908                 | xor                 byte ptr [ebx + edi], dl
            //   488b4340             | add                 ecx, edx
            //   48833800             | movzx               ecx, cl

        $sequence_9 = { 03c2 83e003 3bc2 7516 418bc2 }
            // n = 5, score = 100
            //   03c2                 | mov                 byte ptr [ebx], dl
            //   83e003               | inc                 edx
            //   3bc2                 | xor                 byte ptr [ecx + eax], dl
            //   7516                 | inc                 edx
            //   418bc2               | mov                 cl, byte ptr [ecx + eax]

        $sequence_10 = { 02ca 4402d1 410fb6ca 42321401 }
            // n = 4, score = 100
            //   02ca                 | dec                 eax
            //   4402d1               | cmp                 edi, eax
            //   410fb6ca             | add                 cl, al
            //   42321401             | dec                 eax

        $sequence_11 = { 02c8 488d05f0f60100 02c9 4002ce }
            // n = 4, score = 100
            //   02c8                 | mov                 eax, dword ptr [ecx + 0x10]
            //   488d05f0f60100       | cmp                 dword ptr [eax + 0x94], 0
            //   02c9                 | add                 cl, al
            //   4002ce               | dec                 eax

        $sequence_12 = { 017130 83793005 7407 33c0 }
            // n = 4, score = 100
            //   017130               | add                 dword ptr [ecx + 0x30], esi
            //   83793005             | cmp                 dword ptr [ecx + 0x30], 5
            //   7407                 | je                  9
            //   33c0                 | xor                 eax, eax

        $sequence_13 = { 03cd 8908 f6437804 7417 }
            // n = 4, score = 100
            //   03cd                 | jne                 0x1d
            //   8908                 | inc                 ecx
            //   f6437804             | mov                 eax, edx
            //   7417                 | add                 eax, edx

        $sequence_14 = { 03ca 0fb6c9 428a1401 4130143b }
            // n = 4, score = 100
            //   03ca                 | mov                 dword ptr [esp + 0x68], eax
            //   0fb6c9               | inc                 ecx
            //   428a1401             | cmp                 eax, ebp
            //   4130143b             | jb                  0x55

        $sequence_15 = { 03c1 89442468 413bc5 7250 }
            // n = 4, score = 100
            //   03c1                 | inc                 ecx
            //   89442468             | movzx               ecx, dl
            //   413bc5               | inc                 edx
            //   7250                 | xor                 dl, byte ptr [ecx + eax]

    condition:
        7 of them and filesize < 626688
}