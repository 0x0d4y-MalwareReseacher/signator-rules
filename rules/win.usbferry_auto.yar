rule win_usbferry_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.usbferry."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.usbferry"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 03c2 0faf45d8 018640af0100 8b4de0 83c104 894de0 83ef01 }
            // n = 7, score = 200
            //   03c2                 | add                 eax, edx
            //   0faf45d8             | imul                eax, dword ptr [ebp - 0x28]
            //   018640af0100         | add                 dword ptr [esi + 0x1af40], eax
            //   8b4de0               | mov                 ecx, dword ptr [ebp - 0x20]
            //   83c104               | add                 ecx, 4
            //   894de0               | mov                 dword ptr [ebp - 0x20], ecx
            //   83ef01               | sub                 edi, 1

        $sequence_1 = { e8???????? 83c40c 8d45ec 50 8d8da8feffff }
            // n = 5, score = 200
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8d45ec               | lea                 eax, dword ptr [ebp - 0x14]
            //   50                   | push                eax
            //   8d8da8feffff         | lea                 ecx, dword ptr [ebp - 0x158]

        $sequence_2 = { 8d85e4f2ffff 50 53 8d85f8fbffff 68???????? }
            // n = 5, score = 200
            //   8d85e4f2ffff         | lea                 eax, dword ptr [ebp - 0xd1c]
            //   50                   | push                eax
            //   53                   | push                ebx
            //   8d85f8fbffff         | lea                 eax, dword ptr [ebp - 0x408]
            //   68????????           |                     

        $sequence_3 = { 83c40c 03f3 3bdf 7d10 2bfb 57 }
            // n = 6, score = 200
            //   83c40c               | add                 esp, 0xc
            //   03f3                 | add                 esi, ebx
            //   3bdf                 | cmp                 ebx, edi
            //   7d10                 | jge                 0x12
            //   2bfb                 | sub                 edi, ebx
            //   57                   | push                edi

        $sequence_4 = { c645c16e c645c264 c645c36f c645c477 c645c573 c645c620 c645c74e }
            // n = 7, score = 200
            //   c645c16e             | mov                 byte ptr [ebp - 0x3f], 0x6e
            //   c645c264             | mov                 byte ptr [ebp - 0x3e], 0x64
            //   c645c36f             | mov                 byte ptr [ebp - 0x3d], 0x6f
            //   c645c477             | mov                 byte ptr [ebp - 0x3c], 0x77
            //   c645c573             | mov                 byte ptr [ebp - 0x3b], 0x73
            //   c645c620             | mov                 byte ptr [ebp - 0x3a], 0x20
            //   c645c74e             | mov                 byte ptr [ebp - 0x39], 0x4e

        $sequence_5 = { 2401 0c02 c0e004 8845e8 }
            // n = 4, score = 200
            //   2401                 | and                 al, 1
            //   0c02                 | or                  al, 2
            //   c0e004               | shl                 al, 4
            //   8845e8               | mov                 byte ptr [ebp - 0x18], al

        $sequence_6 = { f3a5 8bca 83e103 f3a4 6a00 8d85a8feffff }
            // n = 6, score = 200
            //   f3a5                 | rep movsd           dword ptr es:[edi], dword ptr [esi]
            //   8bca                 | mov                 ecx, edx
            //   83e103               | and                 ecx, 3
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   6a00                 | push                0
            //   8d85a8feffff         | lea                 eax, dword ptr [ebp - 0x158]

        $sequence_7 = { 80bda1f5ffff00 75e2 8b9598f5ffff 2b9588f5ffff }
            // n = 4, score = 200
            //   80bda1f5ffff00       | cmp                 byte ptr [ebp - 0xa5f], 0
            //   75e2                 | jne                 0xffffffe4
            //   8b9598f5ffff         | mov                 edx, dword ptr [ebp - 0xa68]
            //   2b9588f5ffff         | sub                 edx, dword ptr [ebp - 0xa78]

        $sequence_8 = { b201 e8???????? 8b4dfc 5f 33cd 5e }
            // n = 6, score = 200
            //   b201                 | mov                 dl, 1
            //   e8????????           |                     
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
            //   5f                   | pop                 edi
            //   33cd                 | xor                 ecx, ebp
            //   5e                   | pop                 esi

        $sequence_9 = { 81fefd030000 7324 80bc35f7fbffff5c 740a }
            // n = 4, score = 200
            //   81fefd030000         | cmp                 esi, 0x3fd
            //   7324                 | jae                 0x26
            //   80bc35f7fbffff5c     | cmp                 byte ptr [ebp + esi - 0x409], 0x5c
            //   740a                 | je                  0xc

        $sequence_10 = { c645ed6c c645ee61 c645ef73 c645f068 c645f15f }
            // n = 5, score = 200
            //   c645ed6c             | mov                 byte ptr [ebp - 0x13], 0x6c
            //   c645ee61             | mov                 byte ptr [ebp - 0x12], 0x61
            //   c645ef73             | mov                 byte ptr [ebp - 0x11], 0x73
            //   c645f068             | mov                 byte ptr [ebp - 0x10], 0x68
            //   c645f15f             | mov                 byte ptr [ebp - 0xf], 0x5f

        $sequence_11 = { c645ae66 c645af74 c645b077 c645b161 c645b272 c645b365 c645b45c }
            // n = 7, score = 200
            //   c645ae66             | mov                 byte ptr [ebp - 0x52], 0x66
            //   c645af74             | mov                 byte ptr [ebp - 0x51], 0x74
            //   c645b077             | mov                 byte ptr [ebp - 0x50], 0x77
            //   c645b161             | mov                 byte ptr [ebp - 0x4f], 0x61
            //   c645b272             | mov                 byte ptr [ebp - 0x4e], 0x72
            //   c645b365             | mov                 byte ptr [ebp - 0x4d], 0x65
            //   c645b45c             | mov                 byte ptr [ebp - 0x4c], 0x5c

        $sequence_12 = { 8945fc 0f2805???????? 8d8537fbffff 56 0f1185fcfaffff 33f6 }
            // n = 6, score = 200
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   0f2805????????       |                     
            //   8d8537fbffff         | lea                 eax, dword ptr [ebp - 0x4c9]
            //   56                   | push                esi
            //   0f1185fcfaffff       | movups              xmmword ptr [ebp - 0x504], xmm0
            //   33f6                 | xor                 esi, esi

        $sequence_13 = { 8b45c0 e9???????? 8b45e0 50 ff15???????? 837d1404 }
            // n = 6, score = 200
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]
            //   e9????????           |                     
            //   8b45e0               | mov                 eax, dword ptr [ebp - 0x20]
            //   50                   | push                eax
            //   ff15????????         |                     
            //   837d1404             | cmp                 dword ptr [ebp + 0x14], 4

        $sequence_14 = { 53 56 33c0 8bf2 8985e8f7ffff }
            // n = 5, score = 200
            //   53                   | push                ebx
            //   56                   | push                esi
            //   33c0                 | xor                 eax, eax
            //   8bf2                 | mov                 esi, edx
            //   8985e8f7ffff         | mov                 dword ptr [ebp - 0x818], eax

        $sequence_15 = { c645da69 c645db6e c645dc6c c645dd6f c645de67 c645df6f c645e06e }
            // n = 7, score = 200
            //   c645da69             | mov                 byte ptr [ebp - 0x26], 0x69
            //   c645db6e             | mov                 byte ptr [ebp - 0x25], 0x6e
            //   c645dc6c             | mov                 byte ptr [ebp - 0x24], 0x6c
            //   c645dd6f             | mov                 byte ptr [ebp - 0x23], 0x6f
            //   c645de67             | mov                 byte ptr [ebp - 0x22], 0x67
            //   c645df6f             | mov                 byte ptr [ebp - 0x21], 0x6f
            //   c645e06e             | mov                 byte ptr [ebp - 0x20], 0x6e

    condition:
        7 of them and filesize < 638976
}