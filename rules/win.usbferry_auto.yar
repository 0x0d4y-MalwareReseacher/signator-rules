rule win_usbferry_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-08-05"
        version = "1"
        description = "Detects win.usbferry."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.usbferry"
        malpedia_rule_date = "20220805"
        malpedia_hash = "6ec06c64bcfdbeda64eff021c766b4ce34542b71"
        malpedia_version = "20220808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 84db 740b 3a1a 7507 41 }
            // n = 5, score = 200
            //   84db                 | test                bl, bl
            //   740b                 | je                  0xd
            //   3a1a                 | cmp                 bl, byte ptr [edx]
            //   7507                 | jne                 9
            //   41                   | inc                 ecx

        $sequence_1 = { 52 6a00 ff15???????? 85c0 7518 ff15???????? }
            // n = 6, score = 200
            //   52                   | push                edx
            //   6a00                 | push                0
            //   ff15????????         |                     
            //   85c0                 | test                eax, eax
            //   7518                 | jne                 0x1a
            //   ff15????????         |                     

        $sequence_2 = { 03c8 f30fe6c0 6a0f 58 c6012e 41 8845ff }
            // n = 7, score = 200
            //   03c8                 | add                 ecx, eax
            //   f30fe6c0             | cvtdq2pd            xmm0, xmm0
            //   6a0f                 | push                0xf
            //   58                   | pop                 eax
            //   c6012e               | mov                 byte ptr [ecx], 0x2e
            //   41                   | inc                 ecx
            //   8845ff               | mov                 byte ptr [ebp - 1], al

        $sequence_3 = { 8d85a8feffff 50 ff15???????? 6a02 8d8da8feffff 51 }
            // n = 6, score = 200
            //   8d85a8feffff         | lea                 eax, [ebp - 0x158]
            //   50                   | push                eax
            //   ff15????????         |                     
            //   6a02                 | push                2
            //   8d8da8feffff         | lea                 ecx, [ebp - 0x158]
            //   51                   | push                ecx

        $sequence_4 = { 33c9 3bf0 5e 0f9fc1 8bc1 8b4dfc 33cd }
            // n = 7, score = 200
            //   33c9                 | xor                 ecx, ecx
            //   3bf0                 | cmp                 esi, eax
            //   5e                   | pop                 esi
            //   0f9fc1               | setg                cl
            //   8bc1                 | mov                 eax, ecx
            //   8b4dfc               | mov                 ecx, dword ptr [ebp - 4]
            //   33cd                 | xor                 ecx, ebp

        $sequence_5 = { c685b1faffff2d c685b2faffff66 c685b3faffff20 c685b4faffff2d c685b5faffff69 }
            // n = 5, score = 200
            //   c685b1faffff2d       | mov                 byte ptr [ebp - 0x54f], 0x2d
            //   c685b2faffff66       | mov                 byte ptr [ebp - 0x54e], 0x66
            //   c685b3faffff20       | mov                 byte ptr [ebp - 0x54d], 0x20
            //   c685b4faffff2d       | mov                 byte ptr [ebp - 0x54c], 0x2d
            //   c685b5faffff69       | mov                 byte ptr [ebp - 0x54b], 0x69

        $sequence_6 = { ff75e0 a1???????? ff5060 837d0c01 7531 8bcb e8???????? }
            // n = 7, score = 200
            //   ff75e0               | push                dword ptr [ebp - 0x20]
            //   a1????????           |                     
            //   ff5060               | call                dword ptr [eax + 0x60]
            //   837d0c01             | cmp                 dword ptr [ebp + 0xc], 1
            //   7531                 | jne                 0x33
            //   8bcb                 | mov                 ecx, ebx
            //   e8????????           |                     

        $sequence_7 = { 8b0d???????? ff7110 8b91f4000000 8981f0000000 8b09 }
            // n = 5, score = 200
            //   8b0d????????         |                     
            //   ff7110               | push                dword ptr [ecx + 0x10]
            //   8b91f4000000         | mov                 edx, dword ptr [ecx + 0xf4]
            //   8981f0000000         | mov                 dword ptr [ecx + 0xf0], eax
            //   8b09                 | mov                 ecx, dword ptr [ecx]

        $sequence_8 = { 83e103 f3a4 6a00 8d85a8feffff 50 }
            // n = 5, score = 200
            //   83e103               | and                 ecx, 3
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   6a00                 | push                0
            //   8d85a8feffff         | lea                 eax, [ebp - 0x158]
            //   50                   | push                eax

        $sequence_9 = { a1???????? ff9090000000 6800040000 8bf0 }
            // n = 4, score = 200
            //   a1????????           |                     
            //   ff9090000000         | call                dword ptr [eax + 0x90]
            //   6800040000           | push                0x400
            //   8bf0                 | mov                 esi, eax

        $sequence_10 = { 898580f5ffff 8d95a8feffff 83c2ff 899594f5ffff 8b8594f5ffff 8a4801 888da2f5ffff }
            // n = 7, score = 200
            //   898580f5ffff         | mov                 dword ptr [ebp - 0xa80], eax
            //   8d95a8feffff         | lea                 edx, [ebp - 0x158]
            //   83c2ff               | add                 edx, -1
            //   899594f5ffff         | mov                 dword ptr [ebp - 0xa6c], edx
            //   8b8594f5ffff         | mov                 eax, dword ptr [ebp - 0xa6c]
            //   8a4801               | mov                 cl, byte ptr [eax + 1]
            //   888da2f5ffff         | mov                 byte ptr [ebp - 0xa5e], cl

        $sequence_11 = { 7fb7 8b5df0 85db 747c }
            // n = 4, score = 200
            //   7fb7                 | jg                  0xffffffb9
            //   8b5df0               | mov                 ebx, dword ptr [ebp - 0x10]
            //   85db                 | test                ebx, ebx
            //   747c                 | je                  0x7e

        $sequence_12 = { a1???????? 33c5 8945fc 56 57 c645ec66 c645ed6c }
            // n = 7, score = 200
            //   a1????????           |                     
            //   33c5                 | xor                 eax, ebp
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   56                   | push                esi
            //   57                   | push                edi
            //   c645ec66             | mov                 byte ptr [ebp - 0x14], 0x66
            //   c645ed6c             | mov                 byte ptr [ebp - 0x13], 0x6c

        $sequence_13 = { c685fcfffeff00 68ffff0000 6a00 8d85fdfffeff }
            // n = 4, score = 200
            //   c685fcfffeff00       | mov                 byte ptr [ebp - 0x10004], 0
            //   68ffff0000           | push                0xffff
            //   6a00                 | push                0
            //   8d85fdfffeff         | lea                 eax, [ebp - 0x10003]

        $sequence_14 = { c3 8bc6 ebf8 803900 }
            // n = 4, score = 200
            //   c3                   | ret                 
            //   8bc6                 | mov                 eax, esi
            //   ebf8                 | jmp                 0xfffffffa
            //   803900               | cmp                 byte ptr [ecx], 0

        $sequence_15 = { c645c573 c645c620 c645c74e c645c854 c645c95c c645ca43 c645cb75 }
            // n = 7, score = 200
            //   c645c573             | mov                 byte ptr [ebp - 0x3b], 0x73
            //   c645c620             | mov                 byte ptr [ebp - 0x3a], 0x20
            //   c645c74e             | mov                 byte ptr [ebp - 0x39], 0x4e
            //   c645c854             | mov                 byte ptr [ebp - 0x38], 0x54
            //   c645c95c             | mov                 byte ptr [ebp - 0x37], 0x5c
            //   c645ca43             | mov                 byte ptr [ebp - 0x36], 0x43
            //   c645cb75             | mov                 byte ptr [ebp - 0x35], 0x75

    condition:
        7 of them and filesize < 638976
}