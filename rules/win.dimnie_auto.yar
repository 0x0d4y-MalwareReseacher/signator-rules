rule win_dimnie_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-06-10"
        version = "1"
        description = "Detects win.dimnie."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.dimnie"
        malpedia_rule_date = "20210604"
        malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
        malpedia_version = "20210616"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { eb04 c645af3d 8b4d0c 8a55af 885102 837d1002 }
            // n = 6, score = 400
            //   eb04                 | jmp                 6
            //   c645af3d             | mov                 byte ptr [ebp - 0x51], 0x3d
            //   8b4d0c               | mov                 ecx, dword ptr [ebp + 0xc]
            //   8a55af               | mov                 dl, byte ptr [ebp - 0x51]
            //   885102               | mov                 byte ptr [ecx + 2], dl
            //   837d1002             | cmp                 dword ptr [ebp + 0x10], 2

        $sequence_1 = { eb54 8b550c 2b5508 83fa01 }
            // n = 4, score = 400
            //   eb54                 | jmp                 0x56
            //   8b550c               | mov                 edx, dword ptr [ebp + 0xc]
            //   2b5508               | sub                 edx, dword ptr [ebp + 8]
            //   83fa01               | cmp                 edx, 1

        $sequence_2 = { c1e804 8945f4 8b4df8 83c101 8b45f4 33d2 f7f1 }
            // n = 7, score = 400
            //   c1e804               | shr                 eax, 4
            //   8945f4               | mov                 dword ptr [ebp - 0xc], eax
            //   8b4df8               | mov                 ecx, dword ptr [ebp - 8]
            //   83c101               | add                 ecx, 1
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   33d2                 | xor                 edx, edx
            //   f7f1                 | div                 ecx

        $sequence_3 = { 8855ae eb04 c645ae3d 8b450c 8a4dae }
            // n = 5, score = 400
            //   8855ae               | mov                 byte ptr [ebp - 0x52], dl
            //   eb04                 | jmp                 6
            //   c645ae3d             | mov                 byte ptr [ebp - 0x52], 0x3d
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   8a4dae               | mov                 cl, byte ptr [ebp - 0x52]

        $sequence_4 = { 837d1001 7e28 8b5508 0fb64201 83e00f c1e002 8b4d08 }
            // n = 7, score = 400
            //   837d1001             | cmp                 dword ptr [ebp + 0x10], 1
            //   7e28                 | jle                 0x2a
            //   8b5508               | mov                 edx, dword ptr [ebp + 8]
            //   0fb64201             | movzx               eax, byte ptr [edx + 1]
            //   83e00f               | and                 eax, 0xf
            //   c1e002               | shl                 eax, 2
            //   8b4d08               | mov                 ecx, dword ptr [ebp + 8]

        $sequence_5 = { 8b4d0c 8a55af 885102 837d1002 7e13 8b4508 }
            // n = 6, score = 400
            //   8b4d0c               | mov                 ecx, dword ptr [ebp + 0xc]
            //   8a55af               | mov                 dl, byte ptr [ebp - 0x51]
            //   885102               | mov                 byte ptr [ecx + 2], dl
            //   837d1002             | cmp                 dword ptr [ebp + 0x10], 2
            //   7e13                 | jle                 0x15
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]

        $sequence_6 = { 8b550c 2b5508 8955f8 0f31 }
            // n = 4, score = 400
            //   8b550c               | mov                 edx, dword ptr [ebp + 0xc]
            //   2b5508               | sub                 edx, dword ptr [ebp + 8]
            //   8955f8               | mov                 dword ptr [ebp - 8], edx
            //   0f31                 | rdtsc               

        $sequence_7 = { 0fb65102 81e2c0000000 c1fa06 0bc2 }
            // n = 4, score = 400
            //   0fb65102             | movzx               edx, byte ptr [ecx + 2]
            //   81e2c0000000         | and                 edx, 0xc0
            //   c1fa06               | sar                 edx, 6
            //   0bc2                 | or                  eax, edx

        $sequence_8 = { c645af3d 8b4d0c 8a55af 885102 837d1002 7e13 }
            // n = 6, score = 400
            //   c645af3d             | mov                 byte ptr [ebp - 0x51], 0x3d
            //   8b4d0c               | mov                 ecx, dword ptr [ebp + 0xc]
            //   8a55af               | mov                 dl, byte ptr [ebp - 0x51]
            //   885102               | mov                 byte ptr [ecx + 2], dl
            //   837d1002             | cmp                 dword ptr [ebp + 0x10], 2
            //   7e13                 | jle                 0x15

        $sequence_9 = { 8b4508 0fb608 c1f902 8b550c }
            // n = 4, score = 400
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   0fb608               | movzx               ecx, byte ptr [eax]
            //   c1f902               | sar                 ecx, 2
            //   8b550c               | mov                 edx, dword ptr [ebp + 0xc]

    condition:
        7 of them and filesize < 212992
}