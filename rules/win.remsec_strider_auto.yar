rule win_remsec_strider_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.remsec_strider."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.remsec_strider"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 83e903 752a 6a02 58 }
            // n = 4, score = 200
            //   83e903               | sub                 ecx, 3
            //   752a                 | jne                 0x2c
            //   6a02                 | push                2
            //   58                   | pop                 eax

        $sequence_1 = { 33c0 40 8901 894108 }
            // n = 4, score = 200
            //   33c0                 | xor                 eax, eax
            //   40                   | inc                 eax
            //   8901                 | mov                 dword ptr [ecx], eax
            //   894108               | mov                 dword ptr [ecx + 8], eax

        $sequence_2 = { c21000 55 8bec 8b5508 83ec1c }
            // n = 5, score = 200
            //   c21000               | ret                 0x10
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   8b5508               | mov                 edx, dword ptr [ebp + 8]
            //   83ec1c               | sub                 esp, 0x1c

        $sequence_3 = { 83460810 33c0 5e 40 5b 8be5 5d }
            // n = 7, score = 200
            //   83460810             | add                 dword ptr [esi + 8], 0x10
            //   33c0                 | xor                 eax, eax
            //   5e                   | pop                 esi
            //   40                   | inc                 eax
            //   5b                   | pop                 ebx
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp

        $sequence_4 = { eb0a dec9 eb06 dee9 eb02 dec1 }
            // n = 6, score = 200
            //   eb0a                 | jmp                 0xc
            //   dec9                 | fmulp               st(1)
            //   eb06                 | jmp                 8
            //   dee9                 | fsubp               st(1)
            //   eb02                 | jmp                 4
            //   dec1                 | faddp               st(1)

        $sequence_5 = { 56 ff5058 59 6a01 }
            // n = 4, score = 200
            //   56                   | push                esi
            //   ff5058               | call                dword ptr [eax + 0x58]
            //   59                   | pop                 ecx
            //   6a01                 | push                1

        $sequence_6 = { 7406 8b01 6a01 ff10 83a68000000000 eb32 }
            // n = 6, score = 200
            //   7406                 | je                  8
            //   8b01                 | mov                 eax, dword ptr [ecx]
            //   6a01                 | push                1
            //   ff10                 | call                dword ptr [eax]
            //   83a68000000000       | and                 dword ptr [esi + 0x80], 0
            //   eb32                 | jmp                 0x34

        $sequence_7 = { 85ff 75e1 8b4604 85c0 }
            // n = 4, score = 200
            //   85ff                 | test                edi, edi
            //   75e1                 | jne                 0xffffffe3
            //   8b4604               | mov                 eax, dword ptr [esi + 4]
            //   85c0                 | test                eax, eax

        $sequence_8 = { 668908 830602 5e 5b c9 c3 }
            // n = 6, score = 200
            //   668908               | mov                 word ptr [eax], cx
            //   830602               | add                 dword ptr [esi], 2
            //   5e                   | pop                 esi
            //   5b                   | pop                 ebx
            //   c9                   | leave               
            //   c3                   | ret                 

        $sequence_9 = { 897df0 8975f4 e8???????? 5e 5f }
            // n = 5, score = 200
            //   897df0               | mov                 dword ptr [ebp - 0x10], edi
            //   8975f4               | mov                 dword ptr [ebp - 0xc], esi
            //   e8????????           |                     
            //   5e                   | pop                 esi
            //   5f                   | pop                 edi

    condition:
        7 of them and filesize < 344064
}