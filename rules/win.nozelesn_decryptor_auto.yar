rule win_nozelesn_decryptor_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-08-05"
        version = "1"
        description = "Detects win.nozelesn_decryptor."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.nozelesn_decryptor"
        malpedia_rule_date = "20220805"
        malpedia_hash = "6ec06c64bcfdbeda64eff021c766b4ce34542b71"
        malpedia_version = "20220808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8945e8 6bc930 8b048568ff4700 8945ec 894df4 8a4c0829 884df8 }
            // n = 7, score = 100
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax
            //   6bc930               | imul                ecx, ecx, 0x30
            //   8b048568ff4700       | mov                 eax, dword ptr [eax*4 + 0x47ff68]
            //   8945ec               | mov                 dword ptr [ebp - 0x14], eax
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx
            //   8a4c0829             | mov                 cl, byte ptr [eax + ecx + 0x29]
            //   884df8               | mov                 byte ptr [ebp - 8], cl

        $sequence_1 = { 5a e8???????? 8b4df4 8b5df0 33cb 8b75fc }
            // n = 6, score = 100
            //   5a                   | pop                 edx
            //   e8????????           |                     
            //   8b4df4               | mov                 ecx, dword ptr [ebp - 0xc]
            //   8b5df0               | mov                 ebx, dword ptr [ebp - 0x10]
            //   33cb                 | xor                 ecx, ebx
            //   8b75fc               | mov                 esi, dword ptr [ebp - 4]

        $sequence_2 = { c7857cfdffff00000000 6689856cfdffff 8b85d0fdffff c78580fdffff07000000 85c0 7435 }
            // n = 6, score = 100
            //   c7857cfdffff00000000     | mov    dword ptr [ebp - 0x284], 0
            //   6689856cfdffff       | mov                 word ptr [ebp - 0x294], ax
            //   8b85d0fdffff         | mov                 eax, dword ptr [ebp - 0x230]
            //   c78580fdffff07000000     | mov    dword ptr [ebp - 0x280], 7
            //   85c0                 | test                eax, eax
            //   7435                 | je                  0x37

        $sequence_3 = { 33d0 c1cb05 33d6 33d9 33de d1c9 33ca }
            // n = 7, score = 100
            //   33d0                 | xor                 edx, eax
            //   c1cb05               | ror                 ebx, 5
            //   33d6                 | xor                 edx, esi
            //   33d9                 | xor                 ebx, ecx
            //   33de                 | xor                 ebx, esi
            //   d1c9                 | ror                 ecx, 1
            //   33ca                 | xor                 ecx, edx

        $sequence_4 = { ff248515c14100 ff7524 8d45ec 8bcf 56 ff751c ff7518 }
            // n = 7, score = 100
            //   ff248515c14100       | jmp                 dword ptr [eax*4 + 0x41c115]
            //   ff7524               | push                dword ptr [ebp + 0x24]
            //   8d45ec               | lea                 eax, [ebp - 0x14]
            //   8bcf                 | mov                 ecx, edi
            //   56                   | push                esi
            //   ff751c               | push                dword ptr [ebp + 0x1c]
            //   ff7518               | push                dword ptr [ebp + 0x18]

        $sequence_5 = { 83fafe 7412 8bc2 83e23f 6bfa30 c1f806 033c8568ff4700 }
            // n = 7, score = 100
            //   83fafe               | cmp                 edx, -2
            //   7412                 | je                  0x14
            //   8bc2                 | mov                 eax, edx
            //   83e23f               | and                 edx, 0x3f
            //   6bfa30               | imul                edi, edx, 0x30
            //   c1f806               | sar                 eax, 6
            //   033c8568ff4700       | add                 edi, dword ptr [eax*4 + 0x47ff68]

        $sequence_6 = { 8b45ec 89b010010000 8bc1 23c2 33f8 8b45ec 337de4 }
            // n = 7, score = 100
            //   8b45ec               | mov                 eax, dword ptr [ebp - 0x14]
            //   89b010010000         | mov                 dword ptr [eax + 0x110], esi
            //   8bc1                 | mov                 eax, ecx
            //   23c2                 | and                 eax, edx
            //   33f8                 | xor                 edi, eax
            //   8b45ec               | mov                 eax, dword ptr [ebp - 0x14]
            //   337de4               | xor                 edi, dword ptr [ebp - 0x1c]

        $sequence_7 = { 8bc1 894df4 33c2 c1e207 33c6 33d1 }
            // n = 6, score = 100
            //   8bc1                 | mov                 eax, ecx
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx
            //   33c2                 | xor                 eax, edx
            //   c1e207               | shl                 edx, 7
            //   33c6                 | xor                 eax, esi
            //   33d1                 | xor                 edx, ecx

        $sequence_8 = { 33df 8bc8 5a 899888000000 e8???????? 8b5df0 83c440 }
            // n = 7, score = 100
            //   33df                 | xor                 ebx, edi
            //   8bc8                 | mov                 ecx, eax
            //   5a                   | pop                 edx
            //   899888000000         | mov                 dword ptr [eax + 0x88], ebx
            //   e8????????           |                     
            //   8b5df0               | mov                 ebx, dword ptr [ebp - 0x10]
            //   83c440               | add                 esp, 0x40

        $sequence_9 = { 50 e8???????? 83c404 8b06 c745d8ace44600 c70600000000 8945e8 }
            // n = 7, score = 100
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   c745d8ace44600       | mov                 dword ptr [ebp - 0x28], 0x46e4ac
            //   c70600000000         | mov                 dword ptr [esi], 0
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax

    condition:
        7 of them and filesize < 1122304
}