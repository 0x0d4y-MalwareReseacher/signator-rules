rule win_micrass_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.micrass."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.micrass"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 57 ff750c ff750c ffb5a83fffff 6aff 68???????? 56 }
            // n = 7, score = 100
            //   57                   | push                edi
            //   ff750c               | push                dword ptr [ebp + 0xc]
            //   ff750c               | push                dword ptr [ebp + 0xc]
            //   ffb5a83fffff         | push                dword ptr [ebp - 0xc058]
            //   6aff                 | push                -1
            //   68????????           |                     
            //   56                   | push                esi

        $sequence_1 = { 6801001f00 ff15???????? 3bc3 0f857c020000 56 53 }
            // n = 6, score = 100
            //   6801001f00           | push                0x1f0001
            //   ff15????????         |                     
            //   3bc3                 | cmp                 eax, ebx
            //   0f857c020000         | jne                 0x282
            //   56                   | push                esi
            //   53                   | push                ebx

        $sequence_2 = { 8a807c194000 08443b1d 0fb64601 47 3bf8 }
            // n = 5, score = 100
            //   8a807c194000         | mov                 al, byte ptr [eax + 0x40197c]
            //   08443b1d             | or                  byte ptr [ebx + edi + 0x1d], al
            //   0fb64601             | movzx               eax, byte ptr [esi + 1]
            //   47                   | inc                 edi
            //   3bf8                 | cmp                 edi, eax

        $sequence_3 = { b81c600000 e8???????? a1???????? 33c5 8945fc ff750c }
            // n = 6, score = 100
            //   b81c600000           | mov                 eax, 0x601c
            //   e8????????           |                     
            //   a1????????           |                     
            //   33c5                 | xor                 eax, ebp
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   ff750c               | push                dword ptr [ebp + 0xc]

        $sequence_4 = { ff15???????? 85c0 0f84fb000000 8d85bc3fffff 50 }
            // n = 5, score = 100
            //   ff15????????         |                     
            //   85c0                 | test                eax, eax
            //   0f84fb000000         | je                  0x101
            //   8d85bc3fffff         | lea                 eax, [ebp - 0xc044]
            //   50                   | push                eax

        $sequence_5 = { 35d3000000 8b8d14faffff 88840df4fcffff ebc8 }
            // n = 4, score = 100
            //   35d3000000           | xor                 eax, 0xd3
            //   8b8d14faffff         | mov                 ecx, dword ptr [ebp - 0x5ec]
            //   88840df4fcffff       | mov                 byte ptr [ebp + ecx - 0x30c], al
            //   ebc8                 | jmp                 0xffffffca

        $sequence_6 = { 6a05 59 be???????? 8dbd0cfdffff }
            // n = 4, score = 100
            //   6a05                 | push                5
            //   59                   | pop                 ecx
            //   be????????           |                     
            //   8dbd0cfdffff         | lea                 edi, [ebp - 0x2f4]

        $sequence_7 = { 898504faffff 8b8508faffff 668b00 66898502faffff 838508faffff02 6683bd02faffff00 }
            // n = 6, score = 100
            //   898504faffff         | mov                 dword ptr [ebp - 0x5fc], eax
            //   8b8508faffff         | mov                 eax, dword ptr [ebp - 0x5f8]
            //   668b00               | mov                 ax, word ptr [eax]
            //   66898502faffff       | mov                 word ptr [ebp - 0x5fe], ax
            //   838508faffff02       | add                 dword ptr [ebp - 0x5f8], 2
            //   6683bd02faffff00     | cmp                 word ptr [ebp - 0x5fe], 0

        $sequence_8 = { 48 49 75f1 33c9 66890c451ad94000 68???????? 56 }
            // n = 7, score = 100
            //   48                   | dec                 eax
            //   49                   | dec                 ecx
            //   75f1                 | jne                 0xfffffff3
            //   33c9                 | xor                 ecx, ecx
            //   66890c451ad94000     | mov                 word ptr [eax*2 + 0x40d91a], cx
            //   68????????           |                     
            //   56                   | push                esi

        $sequence_9 = { 33c5 8945fc ff7508 8d85e04fffff 56 50 e8???????? }
            // n = 7, score = 100
            //   33c5                 | xor                 eax, ebp
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   ff7508               | push                dword ptr [ebp + 8]
            //   8d85e04fffff         | lea                 eax, [ebp - 0xb020]
            //   56                   | push                esi
            //   50                   | push                eax
            //   e8????????           |                     

    condition:
        7 of them and filesize < 163840
}