rule win_petya_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.petya."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.petya"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8bc6 8bca c1e303 0facc110 897c2424 c1e810 }
            // n = 6, score = 600
            //   8bc6                 | mov                 eax, esi
            //   8bca                 | mov                 ecx, edx
            //   c1e303               | shl                 ebx, 3
            //   0facc110             | shrd                ecx, eax, 0x10
            //   897c2424             | mov                 dword ptr [esp + 0x24], edi
            //   c1e810               | shr                 eax, 0x10

        $sequence_1 = { 03c7 53 50 e8???????? 83c40c 8d5750 }
            // n = 6, score = 600
            //   03c7                 | add                 eax, edi
            //   53                   | push                ebx
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8d5750               | lea                 edx, [edi + 0x50]

        $sequence_2 = { 8bcb 56 8d5701 c60704 }
            // n = 4, score = 600
            //   8bcb                 | mov                 ecx, ebx
            //   56                   | push                esi
            //   8d5701               | lea                 edx, [edi + 1]
            //   c60704               | mov                 byte ptr [edi], 4

        $sequence_3 = { 0f42f2 6a04 56 e8???????? 8bd8 }
            // n = 5, score = 600
            //   0f42f2               | cmovb               esi, edx
            //   6a04                 | push                4
            //   56                   | push                esi
            //   e8????????           |                     
            //   8bd8                 | mov                 ebx, eax

        $sequence_4 = { 33c9 57 33ff 8d0486 8bd8 2bde }
            // n = 6, score = 600
            //   33c9                 | xor                 ecx, ecx
            //   57                   | push                edi
            //   33ff                 | xor                 edi, edi
            //   8d0486               | lea                 eax, [esi + eax*4]
            //   8bd8                 | mov                 ebx, eax
            //   2bde                 | sub                 ebx, esi

        $sequence_5 = { c1eb02 57 33ff 3b750c 0f47d9 }
            // n = 5, score = 600
            //   c1eb02               | shr                 ebx, 2
            //   57                   | push                edi
            //   33ff                 | xor                 edi, edi
            //   3b750c               | cmp                 esi, dword ptr [ebp + 0xc]
            //   0f47d9               | cmova               ebx, ecx

        $sequence_6 = { 68???????? ff15???????? 50 ff15???????? 8d4df8 51 }
            // n = 6, score = 600
            //   68????????           |                     
            //   ff15????????         |                     
            //   50                   | push                eax
            //   ff15????????         |                     
            //   8d4df8               | lea                 ecx, [ebp - 8]
            //   51                   | push                ecx

        $sequence_7 = { 33c9 57 33ff 8d0486 8bd8 }
            // n = 5, score = 600
            //   33c9                 | xor                 ecx, ecx
            //   57                   | push                edi
            //   33ff                 | xor                 edi, edi
            //   8d0486               | lea                 eax, [esi + eax*4]
            //   8bd8                 | mov                 ebx, eax

        $sequence_8 = { 03c7 53 50 e8???????? 83c40c 5f 5e }
            // n = 7, score = 600
            //   03c7                 | add                 eax, edi
            //   53                   | push                ebx
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

        $sequence_9 = { 8d957cfeffff 8bce e8???????? c7461001000000 }
            // n = 4, score = 600
            //   8d957cfeffff         | lea                 edx, [ebp - 0x184]
            //   8bce                 | mov                 ecx, esi
            //   e8????????           |                     
            //   c7461001000000       | mov                 dword ptr [esi + 0x10], 1

    condition:
        7 of them and filesize < 229376
}