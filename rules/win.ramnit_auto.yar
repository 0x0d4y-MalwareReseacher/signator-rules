rule win_ramnit_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.ramnit."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ramnit"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8bec 83c4f8 56 57 51 53 }
            // n = 6, score = 4000
            //   8bec                 | mov                 ebp, esp
            //   83c4f8               | add                 esp, -8
            //   56                   | push                esi
            //   57                   | push                edi
            //   51                   | push                ecx
            //   53                   | push                ebx

        $sequence_1 = { 5a 5b c9 c20c00 b800000000 }
            // n = 5, score = 4000
            //   5a                   | pop                 edx
            //   5b                   | pop                 ebx
            //   c9                   | leave               
            //   c20c00               | ret                 0xc
            //   b800000000           | mov                 eax, 0

        $sequence_2 = { 8b45fc 03450c 66bb0000 668918 8b45fc }
            // n = 5, score = 4000
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]
            //   03450c               | add                 eax, dword ptr [ebp + 0xc]
            //   66bb0000             | mov                 bx, 0
            //   668918               | mov                 word ptr [eax], bx
            //   8b45fc               | mov                 eax, dword ptr [ebp - 4]

        $sequence_3 = { 55 8bec 53 52 51 57 }
            // n = 6, score = 4000
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   53                   | push                ebx
            //   52                   | push                edx
            //   51                   | push                ecx
            //   57                   | push                edi

        $sequence_4 = { 3b450c 7603 8b450c c9 }
            // n = 4, score = 4000
            //   3b450c               | cmp                 eax, dword ptr [ebp + 0xc]
            //   7603                 | jbe                 5
            //   8b450c               | mov                 eax, dword ptr [ebp + 0xc]
            //   c9                   | leave               

        $sequence_5 = { f3aa 5e 5f 59 c9 }
            // n = 5, score = 4000
            //   f3aa                 | rep stosb           byte ptr es:[edi], al
            //   5e                   | pop                 esi
            //   5f                   | pop                 edi
            //   59                   | pop                 ecx
            //   c9                   | leave               

        $sequence_6 = { 8a4510 f2ae 4f 8a07 3a4510 }
            // n = 5, score = 4000
            //   8a4510               | mov                 al, byte ptr [ebp + 0x10]
            //   f2ae                 | repne scasb         al, byte ptr es:[edi]
            //   4f                   | dec                 edi
            //   8a07                 | mov                 al, byte ptr [edi]
            //   3a4510               | cmp                 al, byte ptr [ebp + 0x10]

        $sequence_7 = { 8bf8 037d14 3b7df8 771f 8945fc ff7514 ff7510 }
            // n = 7, score = 4000
            //   8bf8                 | mov                 edi, eax
            //   037d14               | add                 edi, dword ptr [ebp + 0x14]
            //   3b7df8               | cmp                 edi, dword ptr [ebp - 8]
            //   771f                 | ja                  0x21
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   ff7514               | push                dword ptr [ebp + 0x14]
            //   ff7510               | push                dword ptr [ebp + 0x10]

        $sequence_8 = { 8bc1 f7d0 48 59 }
            // n = 4, score = 4000
            //   8bc1                 | mov                 eax, ecx
            //   f7d0                 | not                 eax
            //   48                   | dec                 eax
            //   59                   | pop                 ecx

        $sequence_9 = { c9 c20c00 b800000000 59 5f 5e }
            // n = 6, score = 4000
            //   c9                   | leave               
            //   c20c00               | ret                 0xc
            //   b800000000           | mov                 eax, 0
            //   59                   | pop                 ecx
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

    condition:
        7 of them and filesize < 470016
}