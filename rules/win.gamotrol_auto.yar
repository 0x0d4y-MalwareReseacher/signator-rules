rule win_gamotrol_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.gamotrol."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.gamotrol"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8b8d98000000 8bc7 5f 5e 33cd 5b }
            // n = 6, score = 100
            //   8b8d98000000         | mov                 ecx, dword ptr [ebp + 0x98]
            //   8bc7                 | mov                 eax, edi
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   33cd                 | xor                 ecx, ebp
            //   5b                   | pop                 ebx

        $sequence_1 = { 6a00 ff15???????? 8b4b54 6a04 6800100000 }
            // n = 5, score = 100
            //   6a00                 | push                0
            //   ff15????????         |                     
            //   8b4b54               | mov                 ecx, dword ptr [ebx + 0x54]
            //   6a04                 | push                4
            //   6800100000           | push                0x1000

        $sequence_2 = { 0fbec2 0fb680a0ed2e00 83e00f 8b4db8 6bc009 }
            // n = 5, score = 100
            //   0fbec2               | movsx               eax, dl
            //   0fb680a0ed2e00       | movzx               eax, byte ptr [eax + 0x2eeda0]
            //   83e00f               | and                 eax, 0xf
            //   8b4db8               | mov                 ecx, dword ptr [ebp - 0x48]
            //   6bc009               | imul                eax, eax, 9

        $sequence_3 = { 50 e8???????? 85c0 59 7404 ff450c }
            // n = 6, score = 100
            //   50                   | push                eax
            //   e8????????           |                     
            //   85c0                 | test                eax, eax
            //   59                   | pop                 ecx
            //   7404                 | je                  6
            //   ff450c               | inc                 dword ptr [ebp + 0xc]

        $sequence_4 = { c6854fffffff61 c68550ffffff67 889d51ffffff c68552ffffff56 c68553ffffff69 889d54ffffff c68556ffffff5f }
            // n = 7, score = 100
            //   c6854fffffff61       | mov                 byte ptr [ebp - 0xb1], 0x61
            //   c68550ffffff67       | mov                 byte ptr [ebp - 0xb0], 0x67
            //   889d51ffffff         | mov                 byte ptr [ebp - 0xaf], bl
            //   c68552ffffff56       | mov                 byte ptr [ebp - 0xae], 0x56
            //   c68553ffffff69       | mov                 byte ptr [ebp - 0xad], 0x69
            //   889d54ffffff         | mov                 byte ptr [ebp - 0xac], bl
            //   c68556ffffff5f       | mov                 byte ptr [ebp - 0xaa], 0x5f

        $sequence_5 = { c3 56 57 33ff 8db7584e2f00 }
            // n = 5, score = 100
            //   c3                   | ret                 
            //   56                   | push                esi
            //   57                   | push                edi
            //   33ff                 | xor                 edi, edi
            //   8db7584e2f00         | lea                 esi, [edi + 0x2f4e58]

        $sequence_6 = { 8b55e4 50 51 52 ffd3 }
            // n = 5, score = 100
            //   8b55e4               | mov                 edx, dword ptr [ebp - 0x1c]
            //   50                   | push                eax
            //   51                   | push                ecx
            //   52                   | push                edx
            //   ffd3                 | call                ebx

        $sequence_7 = { 8d9549fdffff 6a00 52 c68548fdffff00 e8???????? }
            // n = 5, score = 100
            //   8d9549fdffff         | lea                 edx, [ebp - 0x2b7]
            //   6a00                 | push                0
            //   52                   | push                edx
            //   c68548fdffff00       | mov                 byte ptr [ebp - 0x2b8], 0
            //   e8????????           |                     

        $sequence_8 = { 668945d5 8845d7 c645c872 c645c975 c645ca6e c645cb64 c645cc6c }
            // n = 7, score = 100
            //   668945d5             | mov                 word ptr [ebp - 0x2b], ax
            //   8845d7               | mov                 byte ptr [ebp - 0x29], al
            //   c645c872             | mov                 byte ptr [ebp - 0x38], 0x72
            //   c645c975             | mov                 byte ptr [ebp - 0x37], 0x75
            //   c645ca6e             | mov                 byte ptr [ebp - 0x36], 0x6e
            //   c645cb64             | mov                 byte ptr [ebp - 0x35], 0x64
            //   c645cc6c             | mov                 byte ptr [ebp - 0x34], 0x6c

        $sequence_9 = { 5d 85c0 7709 33c0 5f 5e 5b }
            // n = 7, score = 100
            //   5d                   | pop                 ebp
            //   85c0                 | test                eax, eax
            //   7709                 | ja                  0xb
            //   33c0                 | xor                 eax, eax
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   5b                   | pop                 ebx

    condition:
        7 of them and filesize < 376832
}