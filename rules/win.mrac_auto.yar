rule win_mrac_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.mrac."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mrac"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { e8???????? 3420 888424ac100000 6a09 8d8c24a4100000 e8???????? 344d }
            // n = 7, score = 200
            //   e8????????           |                     
            //   3420                 | xor                 al, 0x20
            //   888424ac100000       | mov                 byte ptr [esp + 0x10ac], al
            //   6a09                 | push                9
            //   8d8c24a4100000       | lea                 ecx, [esp + 0x10a4]
            //   e8????????           |                     
            //   344d                 | xor                 al, 0x4d

        $sequence_1 = { ffd0 c744242011000000 33d2 c644242459 c644242574 c644242670 c644242761 }
            // n = 7, score = 200
            //   ffd0                 | call                eax
            //   c744242011000000     | mov                 dword ptr [esp + 0x20], 0x11
            //   33d2                 | xor                 edx, edx
            //   c644242459           | mov                 byte ptr [esp + 0x24], 0x59
            //   c644242574           | mov                 byte ptr [esp + 0x25], 0x74
            //   c644242670           | mov                 byte ptr [esp + 0x26], 0x70
            //   c644242761           | mov                 byte ptr [esp + 0x27], 0x61

        $sequence_2 = { c68424160600000a c68424170600005e c68424180600000d c68424190600000a c684241a06000011 c684241b0600000e c684241c0600005e }
            // n = 7, score = 200
            //   c68424160600000a     | mov                 byte ptr [esp + 0x616], 0xa
            //   c68424170600005e     | mov                 byte ptr [esp + 0x617], 0x5e
            //   c68424180600000d     | mov                 byte ptr [esp + 0x618], 0xd
            //   c68424190600000a     | mov                 byte ptr [esp + 0x619], 0xa
            //   c684241a06000011     | mov                 byte ptr [esp + 0x61a], 0x11
            //   c684241b0600000e     | mov                 byte ptr [esp + 0x61b], 0xe
            //   c684241c0600005e     | mov                 byte ptr [esp + 0x61c], 0x5e

        $sequence_3 = { 8884241f040000 e8???????? 0473 8d8c2418040000 6a5e 88842420040000 }
            // n = 6, score = 200
            //   8884241f040000       | mov                 byte ptr [esp + 0x41f], al
            //   e8????????           |                     
            //   0473                 | add                 al, 0x73
            //   8d8c2418040000       | lea                 ecx, [esp + 0x418]
            //   6a5e                 | push                0x5e
            //   88842420040000       | mov                 byte ptr [esp + 0x420], al

        $sequence_4 = { c785a8fbffff53000000 8b85a8fbffff 3476 8885acfbffff 8b85a8fbffff fec0 3473 }
            // n = 7, score = 200
            //   c785a8fbffff53000000     | mov    dword ptr [ebp - 0x458], 0x53
            //   8b85a8fbffff         | mov                 eax, dword ptr [ebp - 0x458]
            //   3476                 | xor                 al, 0x76
            //   8885acfbffff         | mov                 byte ptr [ebp - 0x454], al
            //   8b85a8fbffff         | mov                 eax, dword ptr [ebp - 0x458]
            //   fec0                 | inc                 al
            //   3473                 | xor                 al, 0x73

        $sequence_5 = { c68592faffff78 c68593faffff7d c68594faffff76 c68595faffff6e c68596faffff6a c68597faffff39 }
            // n = 6, score = 200
            //   c68592faffff78       | mov                 byte ptr [ebp - 0x56e], 0x78
            //   c68593faffff7d       | mov                 byte ptr [ebp - 0x56d], 0x7d
            //   c68594faffff76       | mov                 byte ptr [ebp - 0x56c], 0x76
            //   c68595faffff6e       | mov                 byte ptr [ebp - 0x56b], 0x6e
            //   c68596faffff6a       | mov                 byte ptr [ebp - 0x56a], 0x6a
            //   c68597faffff39       | mov                 byte ptr [ebp - 0x569], 0x39

        $sequence_6 = { 0402 3473 8884246e010000 8b842468010000 0403 346b }
            // n = 6, score = 200
            //   0402                 | add                 al, 2
            //   3473                 | xor                 al, 0x73
            //   8884246e010000       | mov                 byte ptr [esp + 0x16e], al
            //   8b842468010000       | mov                 eax, dword ptr [esp + 0x168]
            //   0403                 | add                 al, 3
            //   346b                 | xor                 al, 0x6b

        $sequence_7 = { 8d8c2428150000 6a0b 8884243a150000 e8???????? 3453 8d8c2428150000 6a0c }
            // n = 7, score = 200
            //   8d8c2428150000       | lea                 ecx, [esp + 0x1528]
            //   6a0b                 | push                0xb
            //   8884243a150000       | mov                 byte ptr [esp + 0x153a], al
            //   e8????????           |                     
            //   3453                 | xor                 al, 0x53
            //   8d8c2428150000       | lea                 ecx, [esp + 0x1528]
            //   6a0c                 | push                0xc

        $sequence_8 = { 8884244c0b0000 e8???????? 3420 888424490b0000 6a12 8d8c24380b0000 e8???????? }
            // n = 7, score = 200
            //   8884244c0b0000       | mov                 byte ptr [esp + 0xb4c], al
            //   e8????????           |                     
            //   3420                 | xor                 al, 0x20
            //   888424490b0000       | mov                 byte ptr [esp + 0xb49], al
            //   6a12                 | push                0x12
            //   8d8c24380b0000       | lea                 ecx, [esp + 0xb38]
            //   e8????????           |                     

        $sequence_9 = { c68424c803000062 c68424c903000059 c68424ca0300002d c68424cb0300003f c68424cc0300004b c68424cd0300002d }
            // n = 6, score = 200
            //   c68424c803000062     | mov                 byte ptr [esp + 0x3c8], 0x62
            //   c68424c903000059     | mov                 byte ptr [esp + 0x3c9], 0x59
            //   c68424ca0300002d     | mov                 byte ptr [esp + 0x3ca], 0x2d
            //   c68424cb0300003f     | mov                 byte ptr [esp + 0x3cb], 0x3f
            //   c68424cc0300004b     | mov                 byte ptr [esp + 0x3cc], 0x4b
            //   c68424cd0300002d     | mov                 byte ptr [esp + 0x3cd], 0x2d

    condition:
        7 of them and filesize < 745472
}