rule win_darkloader_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.darkloader."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.darkloader"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 68???????? e8???????? 8bf0 e8???????? 50 56 e8???????? }
            // n = 7, score = 100
            //   68????????           |                     
            //   e8????????           |                     
            //   8bf0                 | mov                 esi, eax
            //   e8????????           |                     
            //   50                   | push                eax
            //   56                   | push                esi
            //   e8????????           |                     

        $sequence_1 = { 0f44c6 89442414 80f90a 7506 807b010d }
            // n = 5, score = 100
            //   0f44c6               | cmove               eax, esi
            //   89442414             | mov                 dword ptr [esp + 0x14], eax
            //   80f90a               | cmp                 cl, 0xa
            //   7506                 | jne                 8
            //   807b010d             | cmp                 byte ptr [ebx + 1], 0xd

        $sequence_2 = { c705????????01000000 6a04 58 6bc000 c7804ce1001002000000 6a04 }
            // n = 6, score = 100
            //   c705????????01000000     |     
            //   6a04                 | push                4
            //   58                   | pop                 eax
            //   6bc000               | imul                eax, eax, 0
            //   c7804ce1001002000000     | mov    dword ptr [eax + 0x1000e14c], 2
            //   6a04                 | push                4

        $sequence_3 = { 68???????? 50 ff15???????? 83c40c 8d8500fcffff }
            // n = 5, score = 100
            //   68????????           |                     
            //   50                   | push                eax
            //   ff15????????         |                     
            //   83c40c               | add                 esp, 0xc
            //   8d8500fcffff         | lea                 eax, dword ptr [ebp - 0x400]

        $sequence_4 = { ffd6 68???????? ffb7dc010000 89470c ffd6 8987a8010000 }
            // n = 6, score = 100
            //   ffd6                 | call                esi
            //   68????????           |                     
            //   ffb7dc010000         | push                dword ptr [edi + 0x1dc]
            //   89470c               | mov                 dword ptr [edi + 0xc], eax
            //   ffd6                 | call                esi
            //   8987a8010000         | mov                 dword ptr [edi + 0x1a8], eax

        $sequence_5 = { ffd6 68???????? ffb7dc010000 8987bc010000 ffd6 68???????? }
            // n = 6, score = 100
            //   ffd6                 | call                esi
            //   68????????           |                     
            //   ffb7dc010000         | push                dword ptr [edi + 0x1dc]
            //   8987bc010000         | mov                 dword ptr [edi + 0x1bc], eax
            //   ffd6                 | call                esi
            //   68????????           |                     

        $sequence_6 = { 88040a 41 84c0 75f6 ff742410 46 83ef80 }
            // n = 7, score = 100
            //   88040a               | mov                 byte ptr [edx + ecx], al
            //   41                   | inc                 ecx
            //   84c0                 | test                al, al
            //   75f6                 | jne                 0xfffffff8
            //   ff742410             | push                dword ptr [esp + 0x10]
            //   46                   | inc                 esi
            //   83ef80               | sub                 edi, -0x80

        $sequence_7 = { 8a043e 3c2d 744b 3c5f 7447 }
            // n = 5, score = 100
            //   8a043e               | mov                 al, byte ptr [esi + edi]
            //   3c2d                 | cmp                 al, 0x2d
            //   744b                 | je                  0x4d
            //   3c5f                 | cmp                 al, 0x5f
            //   7447                 | je                  0x49

        $sequence_8 = { 6a08 8bf8 be???????? 59 8d442414 f3a5 }
            // n = 6, score = 100
            //   6a08                 | push                8
            //   8bf8                 | mov                 edi, eax
            //   be????????           |                     
            //   59                   | pop                 ecx
            //   8d442414             | lea                 eax, dword ptr [esp + 0x14]
            //   f3a5                 | rep movsd           dword ptr es:[edi], dword ptr [esi]

        $sequence_9 = { e8???????? 8bd8 59 8bd3 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   8bd8                 | mov                 ebx, eax
            //   59                   | pop                 ecx
            //   8bd3                 | mov                 edx, ebx

    condition:
        7 of them and filesize < 124928
}