rule win_fatal_rat_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.fatal_rat."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.fatal_rat"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8d8534ffffff 53 50 e8???????? 83c40c 68???????? }
            // n = 6, score = 100
            //   8d8534ffffff         | lea                 eax, [ebp - 0xcc]
            //   53                   | push                ebx
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   68????????           |                     

        $sequence_1 = { c645d36c c645d46f c645d561 c645d664 c645d754 c645d86f c645d946 }
            // n = 7, score = 100
            //   c645d36c             | mov                 byte ptr [ebp - 0x2d], 0x6c
            //   c645d46f             | mov                 byte ptr [ebp - 0x2c], 0x6f
            //   c645d561             | mov                 byte ptr [ebp - 0x2b], 0x61
            //   c645d664             | mov                 byte ptr [ebp - 0x2a], 0x64
            //   c645d754             | mov                 byte ptr [ebp - 0x29], 0x54
            //   c645d86f             | mov                 byte ptr [ebp - 0x28], 0x6f
            //   c645d946             | mov                 byte ptr [ebp - 0x27], 0x46

        $sequence_2 = { ff15???????? 8bf8 6880000000 57 ff15???????? 57 ff15???????? }
            // n = 7, score = 100
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   6880000000           | push                0x80
            //   57                   | push                edi
            //   ff15????????         |                     
            //   57                   | push                edi
            //   ff15????????         |                     

        $sequence_3 = { 8b4e10 56 034df4 68???????? 6a00 6a00 51 }
            // n = 7, score = 100
            //   8b4e10               | mov                 ecx, dword ptr [esi + 0x10]
            //   56                   | push                esi
            //   034df4               | add                 ecx, dword ptr [ebp - 0xc]
            //   68????????           |                     
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   51                   | push                ecx

        $sequence_4 = { ff15???????? 59 3bc3 59 7524 8d85a4feffff 68???????? }
            // n = 7, score = 100
            //   ff15????????         |                     
            //   59                   | pop                 ecx
            //   3bc3                 | cmp                 eax, ebx
            //   59                   | pop                 ecx
            //   7524                 | jne                 0x26
            //   8d85a4feffff         | lea                 eax, [ebp - 0x15c]
            //   68????????           |                     

        $sequence_5 = { c685ecfeffff25 c685edfeffff61 c685eefeffff70 c685effeffff70 c685f0feffff64 c685f1feffff61 c685f2feffff74 }
            // n = 7, score = 100
            //   c685ecfeffff25       | mov                 byte ptr [ebp - 0x114], 0x25
            //   c685edfeffff61       | mov                 byte ptr [ebp - 0x113], 0x61
            //   c685eefeffff70       | mov                 byte ptr [ebp - 0x112], 0x70
            //   c685effeffff70       | mov                 byte ptr [ebp - 0x111], 0x70
            //   c685f0feffff64       | mov                 byte ptr [ebp - 0x110], 0x64
            //   c685f1feffff61       | mov                 byte ptr [ebp - 0x10f], 0x61
            //   c685f2feffff74       | mov                 byte ptr [ebp - 0x10e], 0x74

        $sequence_6 = { 85c0 59 750c 68???????? 56 ff15???????? }
            // n = 6, score = 100
            //   85c0                 | test                eax, eax
            //   59                   | pop                 ecx
            //   750c                 | jne                 0xe
            //   68????????           |                     
            //   56                   | push                esi
            //   ff15????????         |                     

        $sequence_7 = { c1e205 33c2 23cf 89867caf0600 4b 8b848670af0400 8945fc }
            // n = 7, score = 100
            //   c1e205               | shl                 edx, 5
            //   33c2                 | xor                 eax, edx
            //   23cf                 | and                 ecx, edi
            //   89867caf0600         | mov                 dword ptr [esi + 0x6af7c], eax
            //   4b                   | dec                 ebx
            //   8b848670af0400       | mov                 eax, dword ptr [esi + eax*4 + 0x4af70]
            //   8945fc               | mov                 dword ptr [ebp - 4], eax

        $sequence_8 = { e9???????? 668b8594fcffff 83461810 6689856cfcffff 8b4614 85c0 756c }
            // n = 7, score = 100
            //   e9????????           |                     
            //   668b8594fcffff       | mov                 ax, word ptr [ebp - 0x36c]
            //   83461810             | add                 dword ptr [esi + 0x18], 0x10
            //   6689856cfcffff       | mov                 word ptr [ebp - 0x394], ax
            //   8b4614               | mov                 eax, dword ptr [esi + 0x14]
            //   85c0                 | test                eax, eax
            //   756c                 | jne                 0x6e

        $sequence_9 = { 57 ff75f0 ffd6 eb6e 8d45cc c645cc26 50 }
            // n = 7, score = 100
            //   57                   | push                edi
            //   ff75f0               | push                dword ptr [ebp - 0x10]
            //   ffd6                 | call                esi
            //   eb6e                 | jmp                 0x70
            //   8d45cc               | lea                 eax, [ebp - 0x34]
            //   c645cc26             | mov                 byte ptr [ebp - 0x34], 0x26
            //   50                   | push                eax

    condition:
        7 of them and filesize < 344064
}