rule win_kazuar_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.kazuar."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.kazuar"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8955e8 31f6 8b4718 8945f0 8b4720 01d8 8945ec }
            // n = 7, score = 300
            //   8955e8               | mov                 eax, ecx
            //   31f6                 | dec                 eax
            //   8b4718               | sub                 esp, 0x28
            //   8945f0               | inc                 ebp
            //   8b4720               | xor                 eax, eax
            //   01d8                 | dec                 eax
            //   8945ec               | test                ecx, ecx

        $sequence_1 = { 5e 5f 5d 415c c3 4883ec48 }
            // n = 6, score = 300
            //   5e                   | lea                 eax, dword ptr [0xfffff3b6]
            //   5f                   | dec                 eax
            //   5d                   | lea                 eax, dword ptr [esp + 0x3c]
            //   415c                 | mov                 dword ptr [esp + 0x3c], 0
            //   c3                   | dec                 eax
            //   4883ec48             | mov                 dword ptr [esp + 0x28], eax

        $sequence_2 = { eb07 48ffc3 ebc8 31c0 4883c420 5b }
            // n = 6, score = 300
            //   eb07                 | test                eax, eax
            //   48ffc3               | jne                 0xab
            //   ebc8                 | mov                 dword ptr [ebx], 0x80004005
            //   31c0                 | mov                 dword ptr [ebx + 4], 0x168
            //   4883c420             | mov                 edi, 0x80004005
            //   5b                   | test                eax, eax

        $sequence_3 = { 53 4883ec20 31db 65488b1c2530000000 }
            // n = 4, score = 300
            //   53                   | dec                 eax
            //   4883ec20             | mov                 edx, ebp
            //   31db                 | dec                 ecx
            //   65488b1c2530000000     | mov    ecx, edi

        $sequence_4 = { 448b6618 4c01dd 4139dc 7633 }
            // n = 4, score = 300
            //   448b6618             | test                cx, cx
            //   4c01dd               | je                  0x40
            //   4139dc               | inc                 ecx
            //   7633                 | movsx               ecx, byte ptr [edx + eax]

        $sequence_5 = { 4989c0 e8???????? 4c8d4c2428 31d2 31c9 01c0 }
            // n = 6, score = 300
            //   4989c0               | mov                 eax, dword ptr [eax + 0x24]
            //   e8????????           |                     
            //   4c8d4c2428           | mov                 dword ptr [ebp - 0x2c], eax
            //   31d2                 | mov                 eax, 0x4024a8
            //   31c9                 | mov                 dword ptr [ebp - 0x20], 0
            //   01c0                 | mov                 edi, eax

        $sequence_6 = { 8945f0 8b4720 01d8 8945ec }
            // n = 4, score = 300
            //   8945f0               | mov                 dword ptr [ebx], 0x80131700
            //   8b4720               | mov                 dword ptr [ebx + 4], 0x18b
            //   01d8                 | mov                 eax, 0x80131700
            //   8945ec               | jne                 0x6d

        $sequence_7 = { 89c2 66833c5100 7404 ffc0 }
            // n = 4, score = 300
            //   89c2                 | je                  0x1dd
            //   66833c5100           | add                 ebx, 2
            //   7404                 | movzx               eax, word ptr [ebx - 2]
            //   ffc0                 | test                ax, ax

        $sequence_8 = { 6685c9 7417 e8???????? 0fb7c0 41ffc1 }
            // n = 5, score = 300
            //   6685c9               | add                 eax, 0x402000
            //   7417                 | dec                 eax
            //   e8????????           |                     
            //   0fb7c0               | add                 esp, 0x48
            //   41ffc1               | ret                 

        $sequence_9 = { 89e5 e8???????? 85c0 740a 81ea00204000 01d0 }
            // n = 6, score = 300
            //   89e5                 | push                ebx
            //   e8????????           |                     
            //   85c0                 | xor                 ebx, ebx
            //   740a                 | test                eax, eax
            //   81ea00204000         | je                  0x463
            //   01d0                 | mov                 edx, eax

    condition:
        7 of them and filesize < 81920
}