rule win_dented_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.dented."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.dented"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 2bc2 03f0 eb02 8bf2 85f6 7fde 5b }
            // n = 7, score = 400
            //   2bc2                 | sub                 eax, edx
            //   03f0                 | add                 esi, eax
            //   eb02                 | jmp                 4
            //   8bf2                 | mov                 esi, edx
            //   85f6                 | test                esi, esi
            //   7fde                 | jg                  0xffffffe0
            //   5b                   | pop                 ebx

        $sequence_1 = { 8bf1 8d4dac 50 e8???????? 837dbc00 }
            // n = 5, score = 400
            //   8bf1                 | mov                 esi, ecx
            //   8d4dac               | lea                 ecx, [ebp - 0x54]
            //   50                   | push                eax
            //   e8????????           |                     
            //   837dbc00             | cmp                 dword ptr [ebp - 0x44], 0

        $sequence_2 = { ff5004 8b06 8b4804 837c310c00 }
            // n = 4, score = 400
            //   ff5004               | call                dword ptr [eax + 4]
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   8b4804               | mov                 ecx, dword ptr [eax + 4]
            //   837c310c00           | cmp                 dword ptr [ecx + esi + 0xc], 0

        $sequence_3 = { 8d4101 8985f8f7ffff 8a01 41 84c0 75f9 2b8df8f7ffff }
            // n = 7, score = 400
            //   8d4101               | lea                 eax, [ecx + 1]
            //   8985f8f7ffff         | mov                 dword ptr [ebp - 0x808], eax
            //   8a01                 | mov                 al, byte ptr [ecx]
            //   41                   | inc                 ecx
            //   84c0                 | test                al, al
            //   75f9                 | jne                 0xfffffffb
            //   2b8df8f7ffff         | sub                 ecx, dword ptr [ebp - 0x808]

        $sequence_4 = { 8d85ecfbffff 6810040000 53 50 8bf2 899de8fbffff e8???????? }
            // n = 7, score = 400
            //   8d85ecfbffff         | lea                 eax, [ebp - 0x414]
            //   6810040000           | push                0x410
            //   53                   | push                ebx
            //   50                   | push                eax
            //   8bf2                 | mov                 esi, edx
            //   899de8fbffff         | mov                 dword ptr [ebp - 0x418], ebx
            //   e8????????           |                     

        $sequence_5 = { e8???????? eb34 f6423c04 7520 8b421c }
            // n = 5, score = 400
            //   e8????????           |                     
            //   eb34                 | jmp                 0x36
            //   f6423c04             | test                byte ptr [edx + 0x3c], 4
            //   7520                 | jne                 0x22
            //   8b421c               | mov                 eax, dword ptr [edx + 0x1c]

        $sequence_6 = { 8944243c 8844242c e8???????? 837c243810 8d442424 }
            // n = 5, score = 400
            //   8944243c             | mov                 dword ptr [esp + 0x3c], eax
            //   8844242c             | mov                 byte ptr [esp + 0x2c], al
            //   e8????????           |                     
            //   837c243810           | cmp                 dword ptr [esp + 0x38], 0x10
            //   8d442424             | lea                 eax, [esp + 0x24]

        $sequence_7 = { 33c0 5d c21000 55 8bec 81ec58020000 a1???????? }
            // n = 7, score = 400
            //   33c0                 | xor                 eax, eax
            //   5d                   | pop                 ebp
            //   c21000               | ret                 0x10
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   81ec58020000         | sub                 esp, 0x258
            //   a1????????           |                     

        $sequence_8 = { 8d85ecfbffff 50 6a01 53 }
            // n = 4, score = 400
            //   8d85ecfbffff         | lea                 eax, [ebp - 0x414]
            //   50                   | push                eax
            //   6a01                 | push                1
            //   53                   | push                ebx

        $sequence_9 = { 0f94c0 884704 8bc7 5f 5e 8be5 5d }
            // n = 7, score = 400
            //   0f94c0               | sete                al
            //   884704               | mov                 byte ptr [edi + 4], al
            //   8bc7                 | mov                 eax, edi
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp

    condition:
        7 of them and filesize < 450560
}