rule win_doubleback_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.doubleback."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.doubleback"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { eb50 b947060000 eb49 b9e7050000 }
            // n = 4, score = 400
            //   eb50                 | mov                 dword ptr [ebp - 4], eax
            //   b947060000           | mov                 dword ptr [ebp - 8], ecx
            //   eb49                 | cmp                 eax, 2
            //   b9e7050000           | jl                  0x1df4

        $sequence_1 = { b90b070000 eb34 2d63450000 7428 }
            // n = 4, score = 400
            //   b90b070000           | xor                 ecx, ecx
            //   eb34                 | cmp                 dword ptr [esi + 8], 0
            //   2d63450000           | je                  0x1311
            //   7428                 | mov                 eax, dword ptr [esi + 0xc]

        $sequence_2 = { 7446 3d00280000 7438 3d5a290000 742a 3d39380000 }
            // n = 6, score = 400
            //   7446                 | inc                 ebp
            //   3d00280000           | xor                 ecx, ecx
            //   7438                 | dec                 eax
            //   3d5a290000           | lea                 edx, dword ptr [esi + 6]
            //   742a                 | dec                 eax
            //   3d39380000           | add                 ecx, dword ptr [ebx]

        $sequence_3 = { b9e3050000 eb3b b90b070000 eb34 2d63450000 7428 }
            // n = 6, score = 400
            //   b9e3050000           | mov                 eax, dword ptr [eax]
            //   eb3b                 | add                 eax, ecx
            //   b90b070000           | push                eax
            //   eb34                 | push                0
            //   2d63450000           | push                eax
            //   7428                 | mov                 eax, dword ptr [ebp + 8]

        $sequence_4 = { 3dab3f0000 755e b9ad060000 eb57 b9a7060000 eb50 }
            // n = 6, score = 400
            //   3dab3f0000           | push                esi
            //   755e                 | push                dword ptr [ebp - 4]
            //   b9ad060000           | mov                 ecx, dword ptr [eax + 0x40]
            //   eb57                 | inc                 ecx
            //   b9a7060000           | add                 ecx, esi
            //   eb50                 | dec                 eax

        $sequence_5 = { 2d63450000 7428 2d57020000 741a }
            // n = 4, score = 400
            //   2d63450000           | add                 edx, edi
            //   7428                 | movzx               eax, byte ptr [ebx + 1]
            //   2d57020000           | mov                 dword ptr [ecx + 0x204], eax
            //   741a                 | mov                 al, byte ptr [ebx + 2]

        $sequence_6 = { 740e 3dab3f0000 755e b9ad060000 }
            // n = 4, score = 400
            //   740e                 | test                ecx, ecx
            //   3dab3f0000           | dec                 esp
            //   755e                 | mov                 dword ptr [ebp - 0x50], esp
            //   b9ad060000           | dec                 eax

        $sequence_7 = { e8???????? 85c0 7508 c60703 }
            // n = 4, score = 400
            //   e8????????           |                     
            //   85c0                 | jne                 0x139a
            //   7508                 | push                0xf
            //   c60703               | pop                 ecx

        $sequence_8 = { eb3b b90b070000 eb34 2d63450000 7428 }
            // n = 5, score = 400
            //   eb3b                 | jne                 0x171c
            //   b90b070000           | cmp                 ecx, 1
            //   eb34                 | jne                 0x1755
            //   2d63450000           | inc                 eax
            //   7428                 | mov                 edx, eax

        $sequence_9 = { 3dd73a0000 740e 3dab3f0000 755e b9ad060000 }
            // n = 5, score = 400
            //   3dd73a0000           | inc                 esp
            //   740e                 | mov                 esi, ecx
            //   3dab3f0000           | inc                 ecx
            //   755e                 | mov                 edx, dword ptr [eax + 0x4c]
            //   b9ad060000           | test                edx, edx

    condition:
        7 of them and filesize < 106496
}