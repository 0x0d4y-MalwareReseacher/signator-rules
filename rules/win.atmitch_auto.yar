rule win_atmitch_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.atmitch."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.atmitch"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c744242000000000 833d????????02 7f05 e8???????? a1???????? }
            // n = 5, score = 100
            //   c744242000000000     | mov                 dword ptr [esp + 0x20], 0
            //   833d????????02       |                     
            //   7f05                 | jg                  7
            //   e8????????           |                     
            //   a1????????           |                     

        $sequence_1 = { ffd6 51 8bcc 89642408 68???????? }
            // n = 5, score = 100
            //   ffd6                 | call                esi
            //   51                   | push                ecx
            //   8bcc                 | mov                 ecx, esp
            //   89642408             | mov                 dword ptr [esp + 8], esp
            //   68????????           |                     

        $sequence_2 = { 0fb705???????? 83c408 50 51 }
            // n = 4, score = 100
            //   0fb705????????       |                     
            //   83c408               | add                 esp, 8
            //   50                   | push                eax
            //   51                   | push                ecx

        $sequence_3 = { 8bcc 89642410 68???????? ff15???????? e8???????? 83c408 }
            // n = 6, score = 100
            //   8bcc                 | mov                 ecx, esp
            //   89642410             | mov                 dword ptr [esp + 0x10], esp
            //   68????????           |                     
            //   ff15????????         |                     
            //   e8????????           |                     
            //   83c408               | add                 esp, 8

        $sequence_4 = { e8???????? 59 5d c20c00 6a14 }
            // n = 5, score = 100
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   5d                   | pop                 ebp
            //   c20c00               | ret                 0xc
            //   6a14                 | push                0x14

        $sequence_5 = { 894c2414 8b2c85e8630010 0faf6c2414 6a0e e8???????? }
            // n = 5, score = 100
            //   894c2414             | mov                 dword ptr [esp + 0x14], ecx
            //   8b2c85e8630010       | mov                 ebp, dword ptr [eax*4 + 0x100063e8]
            //   0faf6c2414           | imul                ebp, dword ptr [esp + 0x14]
            //   6a0e                 | push                0xe
            //   e8????????           |                     

        $sequence_6 = { 668b680d 66896c2418 8a480f 884c241a 885c2430 }
            // n = 5, score = 100
            //   668b680d             | mov                 bp, word ptr [eax + 0xd]
            //   66896c2418           | mov                 word ptr [esp + 0x18], bp
            //   8a480f               | mov                 cl, byte ptr [eax + 0xf]
            //   884c241a             | mov                 byte ptr [esp + 0x1a], cl
            //   885c2430             | mov                 byte ptr [esp + 0x30], bl

        $sequence_7 = { 83c408 52 51 8bcc }
            // n = 4, score = 100
            //   83c408               | add                 esp, 8
            //   52                   | push                edx
            //   51                   | push                ecx
            //   8bcc                 | mov                 ecx, esp

        $sequence_8 = { 8b3d???????? 83c404 50 ffd7 8b4c2410 83c404 }
            // n = 6, score = 100
            //   8b3d????????         |                     
            //   83c404               | add                 esp, 4
            //   50                   | push                eax
            //   ffd7                 | call                edi
            //   8b4c2410             | mov                 ecx, dword ptr [esp + 0x10]
            //   83c404               | add                 esp, 4

        $sequence_9 = { 33c4 50 8d442440 64a300000000 8d4c2430 e8???????? }
            // n = 6, score = 100
            //   33c4                 | xor                 eax, esp
            //   50                   | push                eax
            //   8d442440             | lea                 eax, [esp + 0x40]
            //   64a300000000         | mov                 dword ptr fs:[0], eax
            //   8d4c2430             | lea                 ecx, [esp + 0x30]
            //   e8????????           |                     

    condition:
        7 of them and filesize < 73728
}