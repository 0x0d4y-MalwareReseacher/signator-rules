rule win_wannacryptor_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.wannacryptor."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.wannacryptor"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 50 ff15???????? 50 e8???????? 8b4820 6a00 }
            // n = 6, score = 600
            //   50                   | push                eax
            //   ff15????????         |                     
            //   50                   | push                eax
            //   e8????????           |                     
            //   8b4820               | mov                 ecx, dword ptr [eax + 0x20]
            //   6a00                 | push                0

        $sequence_1 = { c1e802 2401 88442412 8bc2 }
            // n = 4, score = 600
            //   c1e802               | shr                 eax, 2
            //   2401                 | and                 al, 1
            //   88442412             | mov                 byte ptr [esp + 0x12], al
            //   8bc2                 | mov                 eax, edx

        $sequence_2 = { 7e0a 6a64 ff15???????? 33ed }
            // n = 4, score = 600
            //   7e0a                 | jle                 0xc
            //   6a64                 | push                0x64
            //   ff15????????         |                     
            //   33ed                 | xor                 ebp, ebp

        $sequence_3 = { 6a00 e8???????? 83c418 e9???????? 8b8b38010000 8b13 }
            // n = 6, score = 600
            //   6a00                 | push                0
            //   e8????????           |                     
            //   83c418               | add                 esp, 0x18
            //   e9????????           |                     
            //   8b8b38010000         | mov                 ecx, dword ptr [ebx + 0x138]
            //   8b13                 | mov                 edx, dword ptr [ebx]

        $sequence_4 = { 85ff 7522 8b7174 85f6 7414 8b4144 }
            // n = 6, score = 600
            //   85ff                 | test                edi, edi
            //   7522                 | jne                 0x24
            //   8b7174               | mov                 esi, dword ptr [ecx + 0x74]
            //   85f6                 | test                esi, esi
            //   7414                 | je                  0x16
            //   8b4144               | mov                 eax, dword ptr [ecx + 0x44]

        $sequence_5 = { fec3 885c2410 8b4d04 8b5500 8d442414 6a03 }
            // n = 6, score = 600
            //   fec3                 | inc                 bl
            //   885c2410             | mov                 byte ptr [esp + 0x10], bl
            //   8b4d04               | mov                 ecx, dword ptr [ebp + 4]
            //   8b5500               | mov                 edx, dword ptr [ebp]
            //   8d442414             | lea                 eax, [esp + 0x14]
            //   6a03                 | push                3

        $sequence_6 = { 84c9 740e 8b8508010000 0c01 898508010000 }
            // n = 5, score = 600
            //   84c9                 | test                cl, cl
            //   740e                 | je                  0x10
            //   8b8508010000         | mov                 eax, dword ptr [ebp + 0x108]
            //   0c01                 | or                  al, 1
            //   898508010000         | mov                 dword ptr [ebp + 0x108], eax

        $sequence_7 = { 88442419 88542418 b9???????? 8d442418 }
            // n = 4, score = 600
            //   88442419             | mov                 byte ptr [esp + 0x19], al
            //   88542418             | mov                 byte ptr [esp + 0x18], dl
            //   b9????????           |                     
            //   8d442418             | lea                 eax, [esp + 0x18]

        $sequence_8 = { 8b4678 8d7e44 85c0 755f 8b17 }
            // n = 5, score = 600
            //   8b4678               | mov                 eax, dword ptr [esi + 0x78]
            //   8d7e44               | lea                 edi, [esi + 0x44]
            //   85c0                 | test                eax, eax
            //   755f                 | jne                 0x61
            //   8b17                 | mov                 edx, dword ptr [edi]

        $sequence_9 = { c21000 83ff01 750c 8bbc2458030000 }
            // n = 4, score = 600
            //   c21000               | ret                 0x10
            //   83ff01               | cmp                 edi, 1
            //   750c                 | jne                 0xe
            //   8bbc2458030000       | mov                 edi, dword ptr [esp + 0x358]

    condition:
        7 of them and filesize < 540672
}