rule win_bohmini_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-06-10"
        version = "1"
        description = "Detects win.bohmini."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.bohmini"
        malpedia_rule_date = "20210604"
        malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
        malpedia_version = "20210616"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 751f 55 50 ffd7 }
            // n = 4, score = 100
            //   751f                 | jne                 0x21
            //   55                   | push                ebp
            //   50                   | push                eax
            //   ffd7                 | call                edi

        $sequence_1 = { f7d7 33c7 a900010181 7513 33ce 8d81fffefe7e }
            // n = 6, score = 100
            //   f7d7                 | not                 edi
            //   33c7                 | xor                 eax, edi
            //   a900010181           | test                eax, 0x81010100
            //   7513                 | jne                 0x15
            //   33ce                 | xor                 ecx, esi
            //   8d81fffefe7e         | lea                 eax, dword ptr [ecx + 0x7efefeff]

        $sequence_2 = { 53 8b5c240c 55 8b6c2414 8b480c }
            // n = 5, score = 100
            //   53                   | push                ebx
            //   8b5c240c             | mov                 ebx, dword ptr [esp + 0xc]
            //   55                   | push                ebp
            //   8b6c2414             | mov                 ebp, dword ptr [esp + 0x14]
            //   8b480c               | mov                 ecx, dword ptr [eax + 0xc]

        $sequence_3 = { 7509 ebd9 bf01000000 eb04 8b7c240c }
            // n = 5, score = 100
            //   7509                 | jne                 0xb
            //   ebd9                 | jmp                 0xffffffdb
            //   bf01000000           | mov                 edi, 1
            //   eb04                 | jmp                 6
            //   8b7c240c             | mov                 edi, dword ptr [esp + 0xc]

        $sequence_4 = { 8a041f 47 3ac1 754e 8a141f }
            // n = 5, score = 100
            //   8a041f               | mov                 al, byte ptr [edi + ebx]
            //   47                   | inc                 edi
            //   3ac1                 | cmp                 al, cl
            //   754e                 | jne                 0x50
            //   8a141f               | mov                 dl, byte ptr [edi + ebx]

        $sequence_5 = { ff15???????? 8d9424a8000000 6a5c 52 e8???????? 40 }
            // n = 6, score = 100
            //   ff15????????         |                     
            //   8d9424a8000000       | lea                 edx, dword ptr [esp + 0xa8]
            //   6a5c                 | push                0x5c
            //   52                   | push                edx
            //   e8????????           |                     
            //   40                   | inc                 eax

        $sequence_6 = { 83c410 85c0 7507 6891130000 eb2a }
            // n = 5, score = 100
            //   83c410               | add                 esp, 0x10
            //   85c0                 | test                eax, eax
            //   7507                 | jne                 9
            //   6891130000           | push                0x1391
            //   eb2a                 | jmp                 0x2c

        $sequence_7 = { 3bd3 751d 84c9 7414 8a4f01 46 47 }
            // n = 7, score = 100
            //   3bd3                 | cmp                 edx, ebx
            //   751d                 | jne                 0x1f
            //   84c9                 | test                cl, cl
            //   7414                 | je                  0x16
            //   8a4f01               | mov                 cl, byte ptr [edi + 1]
            //   46                   | inc                 esi
            //   47                   | inc                 edi

        $sequence_8 = { c705????????01000000 57 33f6 ffd3 }
            // n = 4, score = 100
            //   c705????????01000000     |     
            //   57                   | push                edi
            //   33f6                 | xor                 esi, esi
            //   ffd3                 | call                ebx

        $sequence_9 = { 8a5e01 8d7e01 84db 885c2418 746c 8a4801 }
            // n = 6, score = 100
            //   8a5e01               | mov                 bl, byte ptr [esi + 1]
            //   8d7e01               | lea                 edi, dword ptr [esi + 1]
            //   84db                 | test                bl, bl
            //   885c2418             | mov                 byte ptr [esp + 0x18], bl
            //   746c                 | je                  0x6e
            //   8a4801               | mov                 cl, byte ptr [eax + 1]

    condition:
        7 of them and filesize < 139264
}