rule win_xfsadm_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-06-10"
        version = "1"
        description = "Detects win.xfsadm."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.xfsadm"
        malpedia_rule_date = "20210604"
        malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
        malpedia_version = "20210616"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 6a00 6a00 68b5080000 50 ffd6 68???????? 6a00 }
            // n = 7, score = 100
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   68b5080000           | push                0x8b5
            //   50                   | push                eax
            //   ffd6                 | call                esi
            //   68????????           |                     
            //   6a00                 | push                0

        $sequence_1 = { 85c0 750a 8b4604 807c38013b 7410 83c60c 81fe???????? }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   750a                 | jne                 0xc
            //   8b4604               | mov                 eax, dword ptr [esi + 4]
            //   807c38013b           | cmp                 byte ptr [eax + edi + 1], 0x3b
            //   7410                 | je                  0x12
            //   83c60c               | add                 esi, 0xc
            //   81fe????????         |                     

        $sequence_2 = { 894de0 c745e4dc2b4200 e9???????? c745e4d82b4200 e9???????? 894de0 c745e4d82b4200 }
            // n = 7, score = 100
            //   894de0               | mov                 dword ptr [ebp - 0x20], ecx
            //   c745e4dc2b4200       | mov                 dword ptr [ebp - 0x1c], 0x422bdc
            //   e9????????           |                     
            //   c745e4d82b4200       | mov                 dword ptr [ebp - 0x1c], 0x422bd8
            //   e9????????           |                     
            //   894de0               | mov                 dword ptr [ebp - 0x20], ecx
            //   c745e4d82b4200       | mov                 dword ptr [ebp - 0x1c], 0x422bd8

        $sequence_3 = { 83c0fc 83f81f 0f87bb010000 52 51 e8???????? 83c408 }
            // n = 7, score = 100
            //   83c0fc               | add                 eax, -4
            //   83f81f               | cmp                 eax, 0x1f
            //   0f87bb010000         | ja                  0x1c1
            //   52                   | push                edx
            //   51                   | push                ecx
            //   e8????????           |                     
            //   83c408               | add                 esp, 8

        $sequence_4 = { 0fb68401100e4200 c1e804 8be5 5d c20800 8bff 55 }
            // n = 7, score = 100
            //   0fb68401100e4200     | movzx               eax, byte ptr [ecx + eax + 0x420e10]
            //   c1e804               | shr                 eax, 4
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c20800               | ret                 8
            //   8bff                 | mov                 edi, edi
            //   55                   | push                ebp

        $sequence_5 = { 0fb7c0 50 57 ff15???????? 894508 85c0 0f84c5000000 }
            // n = 7, score = 100
            //   0fb7c0               | movzx               eax, ax
            //   50                   | push                eax
            //   57                   | push                edi
            //   ff15????????         |                     
            //   894508               | mov                 dword ptr [ebp + 8], eax
            //   85c0                 | test                eax, eax
            //   0f84c5000000         | je                  0xcb

        $sequence_6 = { 25ff010000 83c001 25fe030000 f20f592c85a0674200 f20f591485a0674200 660f5834c5b06f4200 660f54c5 }
            // n = 7, score = 100
            //   25ff010000           | and                 eax, 0x1ff
            //   83c001               | add                 eax, 1
            //   25fe030000           | and                 eax, 0x3fe
            //   f20f592c85a0674200     | mulsd    xmm5, qword ptr [eax*4 + 0x4267a0]
            //   f20f591485a0674200     | mulsd    xmm2, qword ptr [eax*4 + 0x4267a0]
            //   660f5834c5b06f4200     | addpd    xmm6, xmmword ptr [eax*8 + 0x426fb0]
            //   660f54c5             | andpd               xmm0, xmm5

        $sequence_7 = { 8be5 5d c3 5e 33c0 5b 5f }
            // n = 7, score = 100
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   5e                   | pop                 esi
            //   33c0                 | xor                 eax, eax
            //   5b                   | pop                 ebx
            //   5f                   | pop                 edi

        $sequence_8 = { 660f7e8194feffff 660f6ec0 660f70c000 660ffec2 660f3840c1 660ffec3 }
            // n = 6, score = 100
            //   660f7e8194feffff     | movd                dword ptr [ecx - 0x16c], xmm0
            //   660f6ec0             | movd                xmm0, eax
            //   660f70c000           | pshufd              xmm0, xmm0, 0
            //   660ffec2             | paddd               xmm0, xmm2
            //   660f3840c1           | pmulld              xmm0, xmm1
            //   660ffec3             | paddd               xmm0, xmm3

        $sequence_9 = { 8b0c8df8d84200 804c112802 5b 2bf7 83e6fe 5f 8bc6 }
            // n = 7, score = 100
            //   8b0c8df8d84200       | mov                 ecx, dword ptr [ecx*4 + 0x42d8f8]
            //   804c112802           | or                  byte ptr [ecx + edx + 0x28], 2
            //   5b                   | pop                 ebx
            //   2bf7                 | sub                 esi, edi
            //   83e6fe               | and                 esi, 0xfffffffe
            //   5f                   | pop                 edi
            //   8bc6                 | mov                 eax, esi

    condition:
        7 of them and filesize < 566272
}