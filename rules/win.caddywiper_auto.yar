rule win_caddywiper_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-08-05"
        version = "1"
        description = "Detects win.caddywiper."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.caddywiper"
        malpedia_rule_date = "20220805"
        malpedia_hash = "6ec06c64bcfdbeda64eff021c766b4ce34542b71"
        malpedia_version = "20220808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c645cc72 c645cd6f c645ce6c c645cf00 c645dc6b }
            // n = 5, score = 100
            //   c645cc72             | mov                 byte ptr [ebp - 0x34], 0x72
            //   c645cd6f             | mov                 byte ptr [ebp - 0x33], 0x6f
            //   c645ce6c             | mov                 byte ptr [ebp - 0x32], 0x6c
            //   c645cf00             | mov                 byte ptr [ebp - 0x31], 0
            //   c645dc6b             | mov                 byte ptr [ebp - 0x24], 0x6b

        $sequence_1 = { c645e946 c645ea69 c645eb6c c645ec65 c645ed00 8d45e4 }
            // n = 6, score = 100
            //   c645e946             | mov                 byte ptr [ebp - 0x17], 0x46
            //   c645ea69             | mov                 byte ptr [ebp - 0x16], 0x69
            //   c645eb6c             | mov                 byte ptr [ebp - 0x15], 0x6c
            //   c645ec65             | mov                 byte ptr [ebp - 0x14], 0x65
            //   c645ed00             | mov                 byte ptr [ebp - 0x13], 0
            //   8d45e4               | lea                 eax, [ebp - 0x1c]

        $sequence_2 = { c645f42e c645f500 c645f664 c645f700 c645f86c c645f900 c645fa6c }
            // n = 7, score = 100
            //   c645f42e             | mov                 byte ptr [ebp - 0xc], 0x2e
            //   c645f500             | mov                 byte ptr [ebp - 0xb], 0
            //   c645f664             | mov                 byte ptr [ebp - 0xa], 0x64
            //   c645f700             | mov                 byte ptr [ebp - 9], 0
            //   c645f86c             | mov                 byte ptr [ebp - 8], 0x6c
            //   c645f900             | mov                 byte ptr [ebp - 7], 0
            //   c645fa6c             | mov                 byte ptr [ebp - 6], 0x6c

        $sequence_3 = { 68000000c0 8d8dd0fbffff 51 ff9560f7ffff 8985acf1ffff 83bdacf1ffffff 7505 }
            // n = 7, score = 100
            //   68000000c0           | push                0xc0000000
            //   8d8dd0fbffff         | lea                 ecx, [ebp - 0x430]
            //   51                   | push                ecx
            //   ff9560f7ffff         | call                dword ptr [ebp - 0x8a0]
            //   8985acf1ffff         | mov                 dword ptr [ebp - 0xe54], eax
            //   83bdacf1ffffff       | cmp                 dword ptr [ebp - 0xe54], -1
            //   7505                 | jne                 7

        $sequence_4 = { 8d85c4feffff 50 8d4db8 51 }
            // n = 4, score = 100
            //   8d85c4feffff         | lea                 eax, [ebp - 0x13c]
            //   50                   | push                eax
            //   8d4db8               | lea                 ecx, [ebp - 0x48]
            //   51                   | push                ecx

        $sequence_5 = { c645d000 c645d100 c685c4feffff47 c685c5feffff65 c685c6feffff74 c685c7feffff43 c685c8feffff75 }
            // n = 7, score = 100
            //   c645d000             | mov                 byte ptr [ebp - 0x30], 0
            //   c645d100             | mov                 byte ptr [ebp - 0x2f], 0
            //   c685c4feffff47       | mov                 byte ptr [ebp - 0x13c], 0x47
            //   c685c5feffff65       | mov                 byte ptr [ebp - 0x13b], 0x65
            //   c685c6feffff74       | mov                 byte ptr [ebp - 0x13a], 0x74
            //   c685c7feffff43       | mov                 byte ptr [ebp - 0x139], 0x43
            //   c685c8feffff75       | mov                 byte ptr [ebp - 0x138], 0x75

        $sequence_6 = { c685cff1ffff00 8d8dc4f1ffff 51 8d95b4fbffff }
            // n = 4, score = 100
            //   c685cff1ffff00       | mov                 byte ptr [ebp - 0xe31], 0
            //   8d8dc4f1ffff         | lea                 ecx, [ebp - 0xe3c]
            //   51                   | push                ecx
            //   8d95b4fbffff         | lea                 edx, [ebp - 0x44c]

        $sequence_7 = { c645a061 c645a16c c645a275 c645a365 c645a441 c645a500 }
            // n = 6, score = 100
            //   c645a061             | mov                 byte ptr [ebp - 0x60], 0x61
            //   c645a16c             | mov                 byte ptr [ebp - 0x5f], 0x6c
            //   c645a275             | mov                 byte ptr [ebp - 0x5e], 0x75
            //   c645a365             | mov                 byte ptr [ebp - 0x5d], 0x65
            //   c645a441             | mov                 byte ptr [ebp - 0x5c], 0x41
            //   c645a500             | mov                 byte ptr [ebp - 0x5b], 0

        $sequence_8 = { c645a332 c645a42e c645a564 c645a66c c645a76c c645a800 }
            // n = 6, score = 100
            //   c645a332             | mov                 byte ptr [ebp - 0x5d], 0x32
            //   c645a42e             | mov                 byte ptr [ebp - 0x5c], 0x2e
            //   c645a564             | mov                 byte ptr [ebp - 0x5b], 0x64
            //   c645a66c             | mov                 byte ptr [ebp - 0x5a], 0x6c
            //   c645a76c             | mov                 byte ptr [ebp - 0x59], 0x6c
            //   c645a800             | mov                 byte ptr [ebp - 0x58], 0

        $sequence_9 = { c645eb00 c645ec65 c645ed00 c645ee6c }
            // n = 4, score = 100
            //   c645eb00             | mov                 byte ptr [ebp - 0x15], 0
            //   c645ec65             | mov                 byte ptr [ebp - 0x14], 0x65
            //   c645ed00             | mov                 byte ptr [ebp - 0x13], 0
            //   c645ee6c             | mov                 byte ptr [ebp - 0x12], 0x6c

    condition:
        7 of them and filesize < 33792
}