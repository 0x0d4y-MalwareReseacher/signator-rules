rule win_bundestrojaner_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.bundestrojaner."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.bundestrojaner"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 50 e8???????? 8b4e1c 83c418 33c0 85c9 7e16 }
            // n = 7, score = 100
            //   50                   | push                eax
            //   e8????????           |                     
            //   8b4e1c               | mov                 ecx, dword ptr [esi + 0x1c]
            //   83c418               | add                 esp, 0x18
            //   33c0                 | xor                 eax, eax
            //   85c9                 | test                ecx, ecx
            //   7e16                 | jle                 0x18

        $sequence_1 = { c1eb10 81e6ff000000 81e3ff000000 c1ef18 8b34b5c8fc0310 8b2c9dc8000410 8b5c2414 }
            // n = 7, score = 100
            //   c1eb10               | shr                 ebx, 0x10
            //   81e6ff000000         | and                 esi, 0xff
            //   81e3ff000000         | and                 ebx, 0xff
            //   c1ef18               | shr                 edi, 0x18
            //   8b34b5c8fc0310       | mov                 esi, dword ptr [esi*4 + 0x1003fcc8]
            //   8b2c9dc8000410       | mov                 ebp, dword ptr [ebx*4 + 0x100400c8]
            //   8b5c2414             | mov                 ebx, dword ptr [esp + 0x14]

        $sequence_2 = { 33fb 8b1c8dc8000410 8b4c2420 8b34b5c8fc0310 c1e918 33f3 8b1c8dc8040410 }
            // n = 7, score = 100
            //   33fb                 | xor                 edi, ebx
            //   8b1c8dc8000410       | mov                 ebx, dword ptr [ecx*4 + 0x100400c8]
            //   8b4c2420             | mov                 ecx, dword ptr [esp + 0x20]
            //   8b34b5c8fc0310       | mov                 esi, dword ptr [esi*4 + 0x1003fcc8]
            //   c1e918               | shr                 ecx, 0x18
            //   33f3                 | xor                 esi, ebx
            //   8b1c8dc8040410       | mov                 ebx, dword ptr [ecx*4 + 0x100404c8]

        $sequence_3 = { 8bce 894610 e8???????? 68???????? 8bce c746240a000000 e8???????? }
            // n = 7, score = 100
            //   8bce                 | mov                 ecx, esi
            //   894610               | mov                 dword ptr [esi + 0x10], eax
            //   e8????????           |                     
            //   68????????           |                     
            //   8bce                 | mov                 ecx, esi
            //   c746240a000000       | mov                 dword ptr [esi + 0x24], 0xa
            //   e8????????           |                     

        $sequence_4 = { c1ea18 c1eb10 89704c 8b1495c8f00310 81e3ff000000 33149dc8ec0310 8bde }
            // n = 7, score = 100
            //   c1ea18               | shr                 edx, 0x18
            //   c1eb10               | shr                 ebx, 0x10
            //   89704c               | mov                 dword ptr [eax + 0x4c], esi
            //   8b1495c8f00310       | mov                 edx, dword ptr [edx*4 + 0x1003f0c8]
            //   81e3ff000000         | and                 ebx, 0xff
            //   33149dc8ec0310       | xor                 edx, dword ptr [ebx*4 + 0x1003ecc8]
            //   8bde                 | mov                 ebx, esi

        $sequence_5 = { 84c0 0f847f010000 8b4518 83783814 0f8372010000 8a442413 84c0 }
            // n = 7, score = 100
            //   84c0                 | test                al, al
            //   0f847f010000         | je                  0x185
            //   8b4518               | mov                 eax, dword ptr [ebp + 0x18]
            //   83783814             | cmp                 dword ptr [eax + 0x38], 0x14
            //   0f8372010000         | jae                 0x178
            //   8a442413             | mov                 al, byte ptr [esp + 0x13]
            //   84c0                 | test                al, al

        $sequence_6 = { 84c0 7405 be12000000 68???????? e8???????? 83c404 84c0 }
            // n = 7, score = 100
            //   84c0                 | test                al, al
            //   7405                 | je                  7
            //   be12000000           | mov                 esi, 0x12
            //   68????????           |                     
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   84c0                 | test                al, al

        $sequence_7 = { 50 57 51 53 e8???????? 8be8 a1???????? }
            // n = 7, score = 100
            //   50                   | push                eax
            //   57                   | push                edi
            //   51                   | push                ecx
            //   53                   | push                ebx
            //   e8????????           |                     
            //   8be8                 | mov                 ebp, eax
            //   a1????????           |                     

        $sequence_8 = { 53 55 8be9 57 8d4c2458 8b451c 50 }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   55                   | push                ebp
            //   8be9                 | mov                 ebp, ecx
            //   57                   | push                edi
            //   8d4c2458             | lea                 ecx, dword ptr [esp + 0x58]
            //   8b451c               | mov                 eax, dword ptr [ebp + 0x1c]
            //   50                   | push                eax

        $sequence_9 = { 40 3bc1 89442420 7cd9 8b4e0c 33c0 }
            // n = 6, score = 100
            //   40                   | inc                 eax
            //   3bc1                 | cmp                 eax, ecx
            //   89442420             | mov                 dword ptr [esp + 0x20], eax
            //   7cd9                 | jl                  0xffffffdb
            //   8b4e0c               | mov                 ecx, dword ptr [esi + 0xc]
            //   33c0                 | xor                 eax, eax

    condition:
        7 of them and filesize < 729088
}