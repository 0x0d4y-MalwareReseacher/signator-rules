rule win_ryuk_stealer_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.ryuk_stealer."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ryuk_stealer"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8bcb e8???????? 3bc7 7552 }
            // n = 4, score = 800
            //   8bcb                 | mov                 ecx, ebx
            //   e8????????           |                     
            //   3bc7                 | cmp                 eax, edi
            //   7552                 | jne                 0x54

        $sequence_1 = { 8bf2 e8???????? 8bc8 33d2 8bc6 }
            // n = 5, score = 800
            //   8bf2                 | mov                 esi, edx
            //   e8????????           |                     
            //   8bc8                 | mov                 ecx, eax
            //   33d2                 | xor                 edx, edx
            //   8bc6                 | mov                 eax, esi

        $sequence_2 = { 668945ec 8945ee 668945f2 8d45e0 }
            // n = 4, score = 800
            //   668945ec             | mov                 word ptr [ebp - 0x14], ax
            //   8945ee               | mov                 dword ptr [ebp - 0x12], eax
            //   668945f2             | mov                 word ptr [ebp - 0xe], ax
            //   8d45e0               | lea                 eax, [ebp - 0x20]

        $sequence_3 = { 8a443706 3c2f 7404 3c2d }
            // n = 4, score = 800
            //   8a443706             | mov                 al, byte ptr [edi + esi + 6]
            //   3c2f                 | cmp                 al, 0x2f
            //   7404                 | je                  6
            //   3c2d                 | cmp                 al, 0x2d

        $sequence_4 = { 33d2 b910270000 f7f1 8bf2 e8???????? }
            // n = 5, score = 800
            //   33d2                 | xor                 edx, edx
            //   b910270000           | mov                 ecx, 0x2710
            //   f7f1                 | div                 ecx
            //   8bf2                 | mov                 esi, edx
            //   e8????????           |                     

        $sequence_5 = { b9a0860100 f7f9 81c2f8240100 52 ff15???????? 46 83fe03 }
            // n = 7, score = 800
            //   b9a0860100           | mov                 ecx, 0x186a0
            //   f7f9                 | idiv                ecx
            //   81c2f8240100         | add                 edx, 0x124f8
            //   52                   | push                edx
            //   ff15????????         |                     
            //   46                   | inc                 esi
            //   83fe03               | cmp                 esi, 3

        $sequence_6 = { 8be5 5d c3 ff35???????? 8b35???????? }
            // n = 5, score = 800
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   ff35????????         |                     
            //   8b35????????         |                     

        $sequence_7 = { 83f801 7410 83ff01 755d 8bcb e8???????? 3bc7 }
            // n = 7, score = 800
            //   83f801               | cmp                 eax, 1
            //   7410                 | je                  0x12
            //   83ff01               | cmp                 edi, 1
            //   755d                 | jne                 0x5f
            //   8bcb                 | mov                 ecx, ebx
            //   e8????????           |                     
            //   3bc7                 | cmp                 eax, edi

        $sequence_8 = { b910270000 f7f1 8bf2 e8???????? 8bc8 33d2 }
            // n = 6, score = 800
            //   b910270000           | mov                 ecx, 0x2710
            //   f7f1                 | div                 ecx
            //   8bf2                 | mov                 esi, edx
            //   e8????????           |                     
            //   8bc8                 | mov                 ecx, eax
            //   33d2                 | xor                 edx, edx

        $sequence_9 = { 51 ff15???????? 8bf8 83ffff 7507 0bc0 }
            // n = 6, score = 800
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   8bf8                 | mov                 edi, eax
            //   83ffff               | cmp                 edi, -1
            //   7507                 | jne                 9
            //   0bc0                 | or                  eax, eax

    condition:
        7 of them and filesize < 368640
}