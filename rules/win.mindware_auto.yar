rule win_mindware_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.mindware."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.mindware"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 50 ff15???????? 8dbd48ffffff 32c0 b980000000 f3aa }
            // n = 6, score = 100
            //   50                   | push                eax
            //   ff15????????         |                     
            //   8dbd48ffffff         | lea                 edi, [ebp - 0xb8]
            //   32c0                 | xor                 al, al
            //   b980000000           | mov                 ecx, 0x80
            //   f3aa                 | rep stosb           byte ptr es:[edi], al

        $sequence_1 = { c1e308 0fb689f0d84400 33d9 8b4de8 0fb6c9 }
            // n = 5, score = 100
            //   c1e308               | shl                 ebx, 8
            //   0fb689f0d84400       | movzx               ecx, byte ptr [ecx + 0x44d8f0]
            //   33d9                 | xor                 ebx, ecx
            //   8b4de8               | mov                 ecx, dword ptr [ebp - 0x18]
            //   0fb6c9               | movzx               ecx, cl

        $sequence_2 = { c78560feffffd4014400 c78564feffffdc014400 c78568fefffff0014400 c7856cfefffff8014400 c78570feffff00024400 c78574feffff08024400 c78578feffff10024400 }
            // n = 7, score = 100
            //   c78560feffffd4014400     | mov    dword ptr [ebp - 0x1a0], 0x4401d4
            //   c78564feffffdc014400     | mov    dword ptr [ebp - 0x19c], 0x4401dc
            //   c78568fefffff0014400     | mov    dword ptr [ebp - 0x198], 0x4401f0
            //   c7856cfefffff8014400     | mov    dword ptr [ebp - 0x194], 0x4401f8
            //   c78570feffff00024400     | mov    dword ptr [ebp - 0x190], 0x440200
            //   c78574feffff08024400     | mov    dword ptr [ebp - 0x18c], 0x440208
            //   c78578feffff10024400     | mov    dword ptr [ebp - 0x188], 0x440210

        $sequence_3 = { 25ffffff00 0bd8 8bc6 83e00f 03db 8b0485203a4400 25ffffff01 }
            // n = 7, score = 100
            //   25ffffff00           | and                 eax, 0xffffff
            //   0bd8                 | or                  ebx, eax
            //   8bc6                 | mov                 eax, esi
            //   83e00f               | and                 eax, 0xf
            //   03db                 | add                 ebx, ebx
            //   8b0485203a4400       | mov                 eax, dword ptr [eax*4 + 0x443a20]
            //   25ffffff01           | and                 eax, 0x1ffffff

        $sequence_4 = { c1e918 89586c 895dfc 0fb691f0d84400 8bcb c1e910 0fb6c9 }
            // n = 7, score = 100
            //   c1e918               | shr                 ecx, 0x18
            //   89586c               | mov                 dword ptr [eax + 0x6c], ebx
            //   895dfc               | mov                 dword ptr [ebp - 4], ebx
            //   0fb691f0d84400       | movzx               edx, byte ptr [ecx + 0x44d8f0]
            //   8bcb                 | mov                 ecx, ebx
            //   c1e910               | shr                 ecx, 0x10
            //   0fb6c9               | movzx               ecx, cl

        $sequence_5 = { c78598e7ffffc4c84300 c7859ce7ffffccc84300 c785a0e7ffffd4c84300 c785a4e7ffffdcc84300 c785a8e7ffffe4c84300 c785ace7ffffecc84300 c785b0e7fffff4c84300 }
            // n = 7, score = 100
            //   c78598e7ffffc4c84300     | mov    dword ptr [ebp - 0x1868], 0x43c8c4
            //   c7859ce7ffffccc84300     | mov    dword ptr [ebp - 0x1864], 0x43c8cc
            //   c785a0e7ffffd4c84300     | mov    dword ptr [ebp - 0x1860], 0x43c8d4
            //   c785a4e7ffffdcc84300     | mov    dword ptr [ebp - 0x185c], 0x43c8dc
            //   c785a8e7ffffe4c84300     | mov    dword ptr [ebp - 0x1858], 0x43c8e4
            //   c785ace7ffffecc84300     | mov    dword ptr [ebp - 0x1854], 0x43c8ec
            //   c785b0e7fffff4c84300     | mov    dword ptr [ebp - 0x1850], 0x43c8f4

        $sequence_6 = { 8b55a8 83e201 7414 8b45a8 83e0fe 50 8b4d0c }
            // n = 7, score = 100
            //   8b55a8               | mov                 edx, dword ptr [ebp - 0x58]
            //   83e201               | and                 edx, 1
            //   7414                 | je                  0x16
            //   8b45a8               | mov                 eax, dword ptr [ebp - 0x58]
            //   83e0fe               | and                 eax, 0xfffffffe
            //   50                   | push                eax
            //   8b4d0c               | mov                 ecx, dword ptr [ebp + 0xc]

        $sequence_7 = { 0fb689f0d84400 33d9 8b4de8 0fb6c9 c1e308 0fb689f0d84400 33d9 }
            // n = 7, score = 100
            //   0fb689f0d84400       | movzx               ecx, byte ptr [ecx + 0x44d8f0]
            //   33d9                 | xor                 ebx, ecx
            //   8b4de8               | mov                 ecx, dword ptr [ebp - 0x18]
            //   0fb6c9               | movzx               ecx, cl
            //   c1e308               | shl                 ebx, 8
            //   0fb689f0d84400       | movzx               ecx, byte ptr [ecx + 0x44d8f0]
            //   33d9                 | xor                 ebx, ecx

        $sequence_8 = { 330c95e03e4400 8b97e0000000 33d9 33d3 8bca 8bc2 c1e918 }
            // n = 7, score = 100
            //   330c95e03e4400       | xor                 ecx, dword ptr [edx*4 + 0x443ee0]
            //   8b97e0000000         | mov                 edx, dword ptr [edi + 0xe0]
            //   33d9                 | xor                 ebx, ecx
            //   33d3                 | xor                 edx, ebx
            //   8bca                 | mov                 ecx, edx
            //   8bc2                 | mov                 eax, edx
            //   c1e918               | shr                 ecx, 0x18

        $sequence_9 = { c78528f9ffff6cf54300 c7852cf9ffff74f54300 c78530f9ffff7cf54300 c78534f9ffff84f54300 c78538f9ffff90f54300 c7853cf9ffff98f54300 c78540f9ffffa0f54300 }
            // n = 7, score = 100
            //   c78528f9ffff6cf54300     | mov    dword ptr [ebp - 0x6d8], 0x43f56c
            //   c7852cf9ffff74f54300     | mov    dword ptr [ebp - 0x6d4], 0x43f574
            //   c78530f9ffff7cf54300     | mov    dword ptr [ebp - 0x6d0], 0x43f57c
            //   c78534f9ffff84f54300     | mov    dword ptr [ebp - 0x6cc], 0x43f584
            //   c78538f9ffff90f54300     | mov    dword ptr [ebp - 0x6c8], 0x43f590
            //   c7853cf9ffff98f54300     | mov    dword ptr [ebp - 0x6c4], 0x43f598
            //   c78540f9ffffa0f54300     | mov    dword ptr [ebp - 0x6c0], 0x43f5a0

    condition:
        7 of them and filesize < 661504
}