rule win_royal_dns_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-08-05"
        version = "1"
        description = "Detects win.royal_dns."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.royal_dns"
        malpedia_rule_date = "20220805"
        malpedia_hash = "6ec06c64bcfdbeda64eff021c766b4ce34542b71"
        malpedia_version = "20220808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 0f8578040000 8b11 52 8985ccfcffff ff15???????? b801000000 }
            // n = 6, score = 100
            //   0f8578040000         | jne                 0x47e
            //   8b11                 | mov                 edx, dword ptr [ecx]
            //   52                   | push                edx
            //   8985ccfcffff         | mov                 dword ptr [ebp - 0x334], eax
            //   ff15????????         |                     
            //   b801000000           | mov                 eax, 1

        $sequence_1 = { 894df0 8b4d0c 52 50 c745e010000000 c745e807000000 894df4 }
            // n = 7, score = 100
            //   894df0               | mov                 dword ptr [ebp - 0x10], ecx
            //   8b4d0c               | mov                 ecx, dword ptr [ebp + 0xc]
            //   52                   | push                edx
            //   50                   | push                eax
            //   c745e010000000       | mov                 dword ptr [ebp - 0x20], 0x10
            //   c745e807000000       | mov                 dword ptr [ebp - 0x18], 7
            //   894df4               | mov                 dword ptr [ebp - 0xc], ecx

        $sequence_2 = { 8bf0 83feff 0f84e7000000 85f6 }
            // n = 4, score = 100
            //   8bf0                 | mov                 esi, eax
            //   83feff               | cmp                 esi, -1
            //   0f84e7000000         | je                  0xed
            //   85f6                 | test                esi, esi

        $sequence_3 = { 3bd1 7344 0fb7450c 2bc3 }
            // n = 4, score = 100
            //   3bd1                 | cmp                 edx, ecx
            //   7344                 | jae                 0x46
            //   0fb7450c             | movzx               eax, word ptr [ebp + 0xc]
            //   2bc3                 | sub                 eax, ebx

        $sequence_4 = { 40 8811 3d00010000 72de 8d95fcfeffff 2bd7 }
            // n = 6, score = 100
            //   40                   | inc                 eax
            //   8811                 | mov                 byte ptr [ecx], dl
            //   3d00010000           | cmp                 eax, 0x100
            //   72de                 | jb                  0xffffffe0
            //   8d95fcfeffff         | lea                 edx, [ebp - 0x104]
            //   2bd7                 | sub                 edx, edi

        $sequence_5 = { c1e705 03f7 8bf8 c1ef02 }
            // n = 4, score = 100
            //   c1e705               | shl                 edi, 5
            //   03f7                 | add                 esi, edi
            //   8bf8                 | mov                 edi, eax
            //   c1ef02               | shr                 edi, 2

        $sequence_6 = { 33db 2bc3 888dd8feffff 899d94fcffff 7469 48 743c }
            // n = 7, score = 100
            //   33db                 | xor                 ebx, ebx
            //   2bc3                 | sub                 eax, ebx
            //   888dd8feffff         | mov                 byte ptr [ebp - 0x128], cl
            //   899d94fcffff         | mov                 dword ptr [ebp - 0x36c], ebx
            //   7469                 | je                  0x6b
            //   48                   | dec                 eax
            //   743c                 | je                  0x3e

        $sequence_7 = { c3 8d85e0fcffff 50 68???????? 8d95c8f9ffff e8???????? }
            // n = 6, score = 100
            //   c3                   | ret                 
            //   8d85e0fcffff         | lea                 eax, [ebp - 0x320]
            //   50                   | push                eax
            //   68????????           |                     
            //   8d95c8f9ffff         | lea                 edx, [ebp - 0x638]
            //   e8????????           |                     

        $sequence_8 = { 5e 66c741073700 5b 8be5 5d c3 0fb6543003 }
            // n = 7, score = 100
            //   5e                   | pop                 esi
            //   66c741073700         | mov                 word ptr [ecx + 7], 0x37
            //   5b                   | pop                 ebx
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   0fb6543003           | movzx               edx, byte ptr [eax + esi + 3]

        $sequence_9 = { c1e90a 5e 880a 5b }
            // n = 4, score = 100
            //   c1e90a               | shr                 ecx, 0xa
            //   5e                   | pop                 esi
            //   880a                 | mov                 byte ptr [edx], cl
            //   5b                   | pop                 ebx

    condition:
        7 of them and filesize < 204800
}