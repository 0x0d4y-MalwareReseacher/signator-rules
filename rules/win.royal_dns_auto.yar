rule win_royal_dns_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.royal_dns."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.royal_dns"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 7543 8d95b0f7ffff 8d85a1f1ffff e8???????? eb30 }
            // n = 5, score = 100
            //   7543                 | jne                 0x45
            //   8d95b0f7ffff         | lea                 edx, [ebp - 0x850]
            //   8d85a1f1ffff         | lea                 eax, [ebp - 0xe5f]
            //   e8????????           |                     
            //   eb30                 | jmp                 0x32

        $sequence_1 = { e8???????? 83c40c 8bc6 eb15 8d8da1f1ffff }
            // n = 5, score = 100
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8bc6                 | mov                 eax, esi
            //   eb15                 | jmp                 0x17
            //   8d8da1f1ffff         | lea                 ecx, [ebp - 0xe5f]

        $sequence_2 = { 8a8d8ff1ffff 80e1f5 02c0 0ac1 b908000000 be???????? }
            // n = 6, score = 100
            //   8a8d8ff1ffff         | mov                 cl, byte ptr [ebp - 0xe71]
            //   80e1f5               | and                 cl, 0xf5
            //   02c0                 | add                 al, al
            //   0ac1                 | or                  al, cl
            //   b908000000           | mov                 ecx, 8
            //   be????????           |                     

        $sequence_3 = { 898594fcffff 8d85d9feffff 83c404 8d5001 8a08 40 84c9 }
            // n = 7, score = 100
            //   898594fcffff         | mov                 dword ptr [ebp - 0x36c], eax
            //   8d85d9feffff         | lea                 eax, [ebp - 0x127]
            //   83c404               | add                 esp, 4
            //   8d5001               | lea                 edx, [eax + 1]
            //   8a08                 | mov                 cl, byte ptr [eax]
            //   40                   | inc                 eax
            //   84c9                 | test                cl, cl

        $sequence_4 = { 0fb6730c 83c40c 56 83c30d }
            // n = 4, score = 100
            //   0fb6730c             | movzx               esi, byte ptr [ebx + 0xc]
            //   83c40c               | add                 esp, 0xc
            //   56                   | push                esi
            //   83c30d               | add                 ebx, 0xd

        $sequence_5 = { 51 ffd6 5b b801000000 }
            // n = 4, score = 100
            //   51                   | push                ecx
            //   ffd6                 | call                esi
            //   5b                   | pop                 ebx
            //   b801000000           | mov                 eax, 1

        $sequence_6 = { 5d c3 8d85e0fcffff 50 68???????? }
            // n = 5, score = 100
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   8d85e0fcffff         | lea                 eax, [ebp - 0x320]
            //   50                   | push                eax
            //   68????????           |                     

        $sequence_7 = { 894208 393d???????? 7c11 6860ea0000 }
            // n = 4, score = 100
            //   894208               | mov                 dword ptr [edx + 8], eax
            //   393d????????         |                     
            //   7c11                 | jl                  0x13
            //   6860ea0000           | push                0xea60

        $sequence_8 = { 8d1cbd04000000 53 e8???????? 8bf0 83c404 }
            // n = 5, score = 100
            //   8d1cbd04000000       | lea                 ebx, [edi*4 + 4]
            //   53                   | push                ebx
            //   e8????????           |                     
            //   8bf0                 | mov                 esi, eax
            //   83c404               | add                 esp, 4

        $sequence_9 = { 51 ff15???????? 85c0 0f8597000000 8b85f8f5ffff 8d95f0f5ffff }
            // n = 6, score = 100
            //   51                   | push                ecx
            //   ff15????????         |                     
            //   85c0                 | test                eax, eax
            //   0f8597000000         | jne                 0x9d
            //   8b85f8f5ffff         | mov                 eax, dword ptr [ebp - 0xa08]
            //   8d95f0f5ffff         | lea                 edx, [ebp - 0xa10]

    condition:
        7 of them and filesize < 204800
}