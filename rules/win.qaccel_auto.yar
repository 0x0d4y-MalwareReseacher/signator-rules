rule win_qaccel_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.qaccel."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.qaccel"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 5f 5f 5f 5f 33c0 5e 8b4df4 }
            // n = 7, score = 100
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   33c0                 | xor                 eax, eax
            //   5e                   | pop                 esi
            //   8b4df4               | mov                 ecx, dword ptr [ebp - 0xc]

        $sequence_1 = { 2bf9 8d95fcfeffff 8bf7 8bd9 8bfa 83c9ff f2ae }
            // n = 7, score = 100
            //   2bf9                 | sub                 edi, ecx
            //   8d95fcfeffff         | lea                 edx, dword ptr [ebp - 0x104]
            //   8bf7                 | mov                 esi, edi
            //   8bd9                 | mov                 ebx, ecx
            //   8bfa                 | mov                 edi, edx
            //   83c9ff               | or                  ecx, 0xffffffff
            //   f2ae                 | repne scasb         al, byte ptr es:[edi]

        $sequence_2 = { 5f 5f 5f c78500f0ffff33323148 c78504f0ffff01000000 }
            // n = 5, score = 100
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   c78500f0ffff33323148     | mov    dword ptr [ebp - 0x1000], 0x48313233
            //   c78504f0ffff01000000     | mov    dword ptr [ebp - 0xffc], 1

        $sequence_3 = { e8???????? 8d8eec000000 c644241403 e8???????? 8d8ef0000000 }
            // n = 5, score = 100
            //   e8????????           |                     
            //   8d8eec000000         | lea                 ecx, dword ptr [esi + 0xec]
            //   c644241403           | mov                 byte ptr [esp + 0x14], 3
            //   e8????????           |                     
            //   8d8ef0000000         | lea                 ecx, dword ptr [esi + 0xf0]

        $sequence_4 = { 5f 5f 5f 6a01 8d8dfcfeffff 6a23 }
            // n = 6, score = 100
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   6a01                 | push                1
            //   8d8dfcfeffff         | lea                 ecx, dword ptr [ebp - 0x104]
            //   6a23                 | push                0x23

        $sequence_5 = { 5f 5f 5f 5f 5f bf???????? 83c9ff }
            // n = 7, score = 100
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   5f                   | pop                 edi
            //   bf????????           |                     
            //   83c9ff               | or                  ecx, 0xffffffff

        $sequence_6 = { 83c404 8bce e8???????? 6a00 8d8d00ffffff e8???????? c745fc00000000 }
            // n = 7, score = 100
            //   83c404               | add                 esp, 4
            //   8bce                 | mov                 ecx, esi
            //   e8????????           |                     
            //   6a00                 | push                0
            //   8d8d00ffffff         | lea                 ecx, dword ptr [ebp - 0x100]
            //   e8????????           |                     
            //   c745fc00000000       | mov                 dword ptr [ebp - 4], 0

        $sequence_7 = { 33c0 8dbdfcfeffff bb05000000 f3ab 8d8dfcfeffff 51 }
            // n = 6, score = 100
            //   33c0                 | xor                 eax, eax
            //   8dbdfcfeffff         | lea                 edi, dword ptr [ebp - 0x104]
            //   bb05000000           | mov                 ebx, 5
            //   f3ab                 | rep stosd           dword ptr es:[edi], eax
            //   8d8dfcfeffff         | lea                 ecx, dword ptr [ebp - 0x104]
            //   51                   | push                ecx

        $sequence_8 = { 42 f3a4 8b75d8 0580000000 8955e8 8945f0 8b45f4 }
            // n = 7, score = 100
            //   42                   | inc                 edx
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   8b75d8               | mov                 esi, dword ptr [ebp - 0x28]
            //   0580000000           | add                 eax, 0x80
            //   8955e8               | mov                 dword ptr [ebp - 0x18], edx
            //   8945f0               | mov                 dword ptr [ebp - 0x10], eax
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]

        $sequence_9 = { 83e103 42 f3a4 8b75d8 0580000000 8955e8 8945f0 }
            // n = 7, score = 100
            //   83e103               | and                 ecx, 3
            //   42                   | inc                 edx
            //   f3a4                 | rep movsb           byte ptr es:[edi], byte ptr [esi]
            //   8b75d8               | mov                 esi, dword ptr [ebp - 0x28]
            //   0580000000           | add                 eax, 0x80
            //   8955e8               | mov                 dword ptr [ebp - 0x18], edx
            //   8945f0               | mov                 dword ptr [ebp - 0x10], eax

    condition:
        7 of them and filesize < 106496
}