rule win_headertip_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.headertip."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.headertip"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 6a1f ff35???????? ff15???????? 56 56 56 56 }
            // n = 7, score = 100
            //   6a1f                 | push                0x1f
            //   ff35????????         |                     
            //   ff15????????         |                     
            //   56                   | push                esi
            //   56                   | push                esi
            //   56                   | push                esi
            //   56                   | push                esi

        $sequence_1 = { 83c414 3bf7 7504 33c0 eb15 }
            // n = 5, score = 100
            //   83c414               | add                 esp, 0x14
            //   3bf7                 | cmp                 esi, edi
            //   7504                 | jne                 6
            //   33c0                 | xor                 eax, eax
            //   eb15                 | jmp                 0x17

        $sequence_2 = { 85c0 742e 56 8d45f0 50 8d45fc 50 }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   742e                 | je                  0x30
            //   56                   | push                esi
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   8d45fc               | lea                 eax, [ebp - 4]
            //   50                   | push                eax

        $sequence_3 = { 58 6a6e 668945ee 58 6a64 668945f0 58 }
            // n = 7, score = 100
            //   58                   | pop                 eax
            //   6a6e                 | push                0x6e
            //   668945ee             | mov                 word ptr [ebp - 0x12], ax
            //   58                   | pop                 eax
            //   6a64                 | push                0x64
            //   668945f0             | mov                 word ptr [ebp - 0x10], ax
            //   58                   | pop                 eax

        $sequence_4 = { 33c9 66894802 c3 53 }
            // n = 4, score = 100
            //   33c9                 | xor                 ecx, ecx
            //   66894802             | mov                 word ptr [eax + 2], cx
            //   c3                   | ret                 
            //   53                   | push                ebx

        $sequence_5 = { 8b5d18 56 57 8d7b10 57 ff15???????? }
            // n = 6, score = 100
            //   8b5d18               | mov                 ebx, dword ptr [ebp + 0x18]
            //   56                   | push                esi
            //   57                   | push                edi
            //   8d7b10               | lea                 edi, [ebx + 0x10]
            //   57                   | push                edi
            //   ff15????????         |                     

        $sequence_6 = { 57 6a04 5f 68???????? 897dec e8???????? }
            // n = 6, score = 100
            //   57                   | push                edi
            //   6a04                 | push                4
            //   5f                   | pop                 edi
            //   68????????           |                     
            //   897dec               | mov                 dword ptr [ebp - 0x14], edi
            //   e8????????           |                     

        $sequence_7 = { c645914f c6459270 c6459374 c6459469 c645956f c645966e }
            // n = 6, score = 100
            //   c645914f             | mov                 byte ptr [ebp - 0x6f], 0x4f
            //   c6459270             | mov                 byte ptr [ebp - 0x6e], 0x70
            //   c6459374             | mov                 byte ptr [ebp - 0x6d], 0x74
            //   c6459469             | mov                 byte ptr [ebp - 0x6c], 0x69
            //   c645956f             | mov                 byte ptr [ebp - 0x6b], 0x6f
            //   c645966e             | mov                 byte ptr [ebp - 0x6a], 0x6e

        $sequence_8 = { ff35???????? c745fc80330000 ff15???????? 53 8d45fc 50 }
            // n = 6, score = 100
            //   ff35????????         |                     
            //   c745fc80330000       | mov                 dword ptr [ebp - 4], 0x3380
            //   ff15????????         |                     
            //   53                   | push                ebx
            //   8d45fc               | lea                 eax, [ebp - 4]
            //   50                   | push                eax

        $sequence_9 = { c645c565 c645c674 c645c753 c645c879 }
            // n = 4, score = 100
            //   c645c565             | mov                 byte ptr [ebp - 0x3b], 0x65
            //   c645c674             | mov                 byte ptr [ebp - 0x3a], 0x74
            //   c645c753             | mov                 byte ptr [ebp - 0x39], 0x53
            //   c645c879             | mov                 byte ptr [ebp - 0x38], 0x79

    condition:
        7 of them and filesize < 174080
}