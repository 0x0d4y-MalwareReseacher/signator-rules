rule win_deathransom_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-06-10"
        version = "1"
        description = "Detects win.deathransom."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.deathransom"
        malpedia_rule_date = "20210604"
        malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
        malpedia_version = "20210616"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 85f6 7ff3 f7de 5f 8bc6 5e 5b }
            // n = 7, score = 100
            //   85f6                 | test                esi, esi
            //   7ff3                 | jg                  0xfffffff5
            //   f7de                 | neg                 esi
            //   5f                   | pop                 edi
            //   8bc6                 | mov                 eax, esi
            //   5e                   | pop                 esi
            //   5b                   | pop                 ebx

        $sequence_1 = { 99 33c2 2bc2 8b55f4 56 50 8b5208 }
            // n = 7, score = 100
            //   99                   | cdq                 
            //   33c2                 | xor                 eax, edx
            //   2bc2                 | sub                 eax, edx
            //   8b55f4               | mov                 edx, dword ptr [ebp - 0xc]
            //   56                   | push                esi
            //   50                   | push                eax
            //   8b5208               | mov                 edx, dword ptr [edx + 8]

        $sequence_2 = { 8b45e0 8bd8 03ca 23c6 0bde 235de8 8bd7 }
            // n = 7, score = 100
            //   8b45e0               | mov                 eax, dword ptr [ebp - 0x20]
            //   8bd8                 | mov                 ebx, eax
            //   03ca                 | add                 ecx, edx
            //   23c6                 | and                 eax, esi
            //   0bde                 | or                  ebx, esi
            //   235de8               | and                 ebx, dword ptr [ebp - 0x18]
            //   8bd7                 | mov                 edx, edi

        $sequence_3 = { c1c00a c1c90d 33c8 8975e8 8b45ec }
            // n = 5, score = 100
            //   c1c00a               | rol                 eax, 0xa
            //   c1c90d               | ror                 ecx, 0xd
            //   33c8                 | xor                 ecx, eax
            //   8975e8               | mov                 dword ptr [ebp - 0x18], esi
            //   8b45ec               | mov                 eax, dword ptr [ebp - 0x14]

        $sequence_4 = { 83c0fc 660f1f440000 833800 7508 4e 83e804 }
            // n = 6, score = 100
            //   83c0fc               | add                 eax, -4
            //   660f1f440000         | nop                 word ptr [eax + eax]
            //   833800               | cmp                 dword ptr [eax], 0
            //   7508                 | jne                 0xa
            //   4e                   | dec                 esi
            //   83e804               | sub                 eax, 4

        $sequence_5 = { 32c2 32c6 8a771e 3463 }
            // n = 4, score = 100
            //   32c2                 | xor                 al, dl
            //   32c6                 | xor                 al, dh
            //   8a771e               | mov                 dh, byte ptr [edi + 0x1e]
            //   3463                 | xor                 al, 0x63

        $sequence_6 = { 0f8e90000000 8b5108 8955f4 3b19 7e40 }
            // n = 5, score = 100
            //   0f8e90000000         | jle                 0x96
            //   8b5108               | mov                 edx, dword ptr [ecx + 8]
            //   8955f4               | mov                 dword ptr [ebp - 0xc], edx
            //   3b19                 | cmp                 ebx, dword ptr [ecx]
            //   7e40                 | jle                 0x42

        $sequence_7 = { 8b4f08 894d18 3b07 7e42 be01000000 }
            // n = 5, score = 100
            //   8b4f08               | mov                 ecx, dword ptr [edi + 8]
            //   894d18               | mov                 dword ptr [ebp + 0x18], ecx
            //   3b07                 | cmp                 eax, dword ptr [edi]
            //   7e42                 | jle                 0x44
            //   be01000000           | mov                 esi, 1

        $sequence_8 = { 81c254730a65 03d0 8b45e0 8bc8 03fa c1c00a c1c90d }
            // n = 7, score = 100
            //   81c254730a65         | add                 edx, 0x650a7354
            //   03d0                 | add                 edx, eax
            //   8b45e0               | mov                 eax, dword ptr [ebp - 0x20]
            //   8bc8                 | mov                 ecx, eax
            //   03fa                 | add                 edi, edx
            //   c1c00a               | rol                 eax, 0xa
            //   c1c90d               | ror                 ecx, 0xd

        $sequence_9 = { 8b5e08 8b1c83 40 b904000000 881a 49 c1eb08 }
            // n = 7, score = 100
            //   8b5e08               | mov                 ebx, dword ptr [esi + 8]
            //   8b1c83               | mov                 ebx, dword ptr [ebx + eax*4]
            //   40                   | inc                 eax
            //   b904000000           | mov                 ecx, 4
            //   881a                 | mov                 byte ptr [edx], bl
            //   49                   | dec                 ecx
            //   c1eb08               | shr                 ebx, 8

    condition:
        7 of them and filesize < 133120
}