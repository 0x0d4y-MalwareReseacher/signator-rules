rule win_molerat_loader_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.molerat_loader."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.molerat_loader"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 50 c645fc2e e8???????? 83c40c 8d4d60 51 }
            // n = 6, score = 100
            //   50                   | push                eax
            //   c645fc2e             | mov                 byte ptr [ebp - 4], 0x2e
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8d4d60               | lea                 ecx, [ebp + 0x60]
            //   51                   | push                ecx

        $sequence_1 = { 50 8d4de0 e8???????? 8b45d4 8d7dac 8d5de0 }
            // n = 6, score = 100
            //   50                   | push                eax
            //   8d4de0               | lea                 ecx, [ebp - 0x20]
            //   e8????????           |                     
            //   8b45d4               | mov                 eax, dword ptr [ebp - 0x2c]
            //   8d7dac               | lea                 edi, [ebp - 0x54]
            //   8d5de0               | lea                 ebx, [ebp - 0x20]

        $sequence_2 = { 8d44240c 64a300000000 8bf1 89742408 c706???????? c744241400000000 807e4800 }
            // n = 7, score = 100
            //   8d44240c             | lea                 eax, [esp + 0xc]
            //   64a300000000         | mov                 dword ptr fs:[0], eax
            //   8bf1                 | mov                 esi, ecx
            //   89742408             | mov                 dword ptr [esp + 8], esi
            //   c706????????         |                     
            //   c744241400000000     | mov                 dword ptr [esp + 0x14], 0
            //   807e4800             | cmp                 byte ptr [esi + 0x48], 0

        $sequence_3 = { 8b11 50 8b4204 ffd0 c645fc79 8b855cfeffff 83c0f0 }
            // n = 7, score = 100
            //   8b11                 | mov                 edx, dword ptr [ecx]
            //   50                   | push                eax
            //   8b4204               | mov                 eax, dword ptr [edx + 4]
            //   ffd0                 | call                eax
            //   c645fc79             | mov                 byte ptr [ebp - 4], 0x79
            //   8b855cfeffff         | mov                 eax, dword ptr [ebp - 0x1a4]
            //   83c0f0               | add                 eax, -0x10

        $sequence_4 = { c745fc00000000 68???????? 8d4de8 c645fc01 e8???????? 8b45e8 83c0f0 }
            // n = 7, score = 100
            //   c745fc00000000       | mov                 dword ptr [ebp - 4], 0
            //   68????????           |                     
            //   8d4de8               | lea                 ecx, [ebp - 0x18]
            //   c645fc01             | mov                 byte ptr [ebp - 4], 1
            //   e8????????           |                     
            //   8b45e8               | mov                 eax, dword ptr [ebp - 0x18]
            //   83c0f0               | add                 eax, -0x10

        $sequence_5 = { 7f0a 8b08 8b11 50 8b4204 ffd0 c645fc5d }
            // n = 7, score = 100
            //   7f0a                 | jg                  0xc
            //   8b08                 | mov                 ecx, dword ptr [eax]
            //   8b11                 | mov                 edx, dword ptr [ecx]
            //   50                   | push                eax
            //   8b4204               | mov                 eax, dword ptr [edx + 4]
            //   ffd0                 | call                eax
            //   c645fc5d             | mov                 byte ptr [ebp - 4], 0x5d

        $sequence_6 = { 83ec10 8bc4 8b5da0 8918 8b5da4 895804 895008 }
            // n = 7, score = 100
            //   83ec10               | sub                 esp, 0x10
            //   8bc4                 | mov                 eax, esp
            //   8b5da0               | mov                 ebx, dword ptr [ebp - 0x60]
            //   8918                 | mov                 dword ptr [eax], ebx
            //   8b5da4               | mov                 ebx, dword ptr [ebp - 0x5c]
            //   895804               | mov                 dword ptr [eax + 4], ebx
            //   895008               | mov                 dword ptr [eax + 8], edx

        $sequence_7 = { 8b11 50 8b4204 ffd0 8b4c2414 57 57 }
            // n = 7, score = 100
            //   8b11                 | mov                 edx, dword ptr [ecx]
            //   50                   | push                eax
            //   8b4204               | mov                 eax, dword ptr [edx + 4]
            //   ffd0                 | call                eax
            //   8b4c2414             | mov                 ecx, dword ptr [esp + 0x14]
            //   57                   | push                edi
            //   57                   | push                edi

        $sequence_8 = { 68???????? 8d4d90 e8???????? 68???????? 8d4d98 c645fc7e }
            // n = 6, score = 100
            //   68????????           |                     
            //   8d4d90               | lea                 ecx, [ebp - 0x70]
            //   e8????????           |                     
            //   68????????           |                     
            //   8d4d98               | lea                 ecx, [ebp - 0x68]
            //   c645fc7e             | mov                 byte ptr [ebp - 4], 0x7e

        $sequence_9 = { 8b4dec 8379f400 0f8528010000 a1???????? 51 83c0f0 8965e0 }
            // n = 7, score = 100
            //   8b4dec               | mov                 ecx, dword ptr [ebp - 0x14]
            //   8379f400             | cmp                 dword ptr [ecx - 0xc], 0
            //   0f8528010000         | jne                 0x12e
            //   a1????????           |                     
            //   51                   | push                ecx
            //   83c0f0               | add                 eax, -0x10
            //   8965e0               | mov                 dword ptr [ebp - 0x20], esp

    condition:
        7 of them and filesize < 688128
}