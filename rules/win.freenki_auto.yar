rule win_freenki_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.freenki."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.freenki"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 68???????? 50 ff5110 8b55b8 8b4dcc 2bd1 }
            // n = 6, score = 200
            //   68????????           |                     
            //   50                   | push                eax
            //   ff5110               | call                dword ptr [ecx + 0x10]
            //   8b55b8               | mov                 edx, dword ptr [ebp - 0x48]
            //   8b4dcc               | mov                 ecx, dword ptr [ebp - 0x34]
            //   2bd1                 | sub                 edx, ecx

        $sequence_1 = { 0f848a000000 837de800 0f8480000000 8b4df8 6a0a 8b048d78394200 f644382848 }
            // n = 7, score = 200
            //   0f848a000000         | je                  0x90
            //   837de800             | cmp                 dword ptr [ebp - 0x18], 0
            //   0f8480000000         | je                  0x86
            //   8b4df8               | mov                 ecx, dword ptr [ebp - 8]
            //   6a0a                 | push                0xa
            //   8b048d78394200       | mov                 eax, dword ptr [ecx*4 + 0x423978]
            //   f644382848           | test                byte ptr [eax + edi + 0x28], 0x48

        $sequence_2 = { 8b049578394200 f644082801 7414 8d4508 }
            // n = 4, score = 200
            //   8b049578394200       | mov                 eax, dword ptr [edx*4 + 0x423978]
            //   f644082801           | test                byte ptr [eax + ecx + 0x28], 1
            //   7414                 | je                  0x16
            //   8d4508               | lea                 eax, [ebp + 8]

        $sequence_3 = { 85d2 7e69 83fa20 724f 8bca 57 81e11f000080 }
            // n = 7, score = 200
            //   85d2                 | test                edx, edx
            //   7e69                 | jle                 0x6b
            //   83fa20               | cmp                 edx, 0x20
            //   724f                 | jb                  0x51
            //   8bca                 | mov                 ecx, edx
            //   57                   | push                edi
            //   81e11f000080         | and                 ecx, 0x8000001f

        $sequence_4 = { 660ff8c1 660fefc2 0f110406 0f10440610 660ff8c1 }
            // n = 5, score = 200
            //   660ff8c1             | psubb               xmm0, xmm1
            //   660fefc2             | pxor                xmm0, xmm2
            //   0f110406             | movups              xmmword ptr [esi + eax], xmm0
            //   0f10440610           | movups              xmm0, xmmword ptr [esi + eax + 0x10]
            //   660ff8c1             | psubb               xmm0, xmm1

        $sequence_5 = { c3 6a00 6800010000 6a00 6a00 6a00 }
            // n = 6, score = 200
            //   c3                   | ret                 
            //   6a00                 | push                0
            //   6800010000           | push                0x100
            //   6a00                 | push                0
            //   6a00                 | push                0
            //   6a00                 | push                0

        $sequence_6 = { 85ff 75f2 897e10 83f908 720f 8b06 33c9 }
            // n = 7, score = 200
            //   85ff                 | test                edi, edi
            //   75f2                 | jne                 0xfffffff4
            //   897e10               | mov                 dword ptr [esi + 0x10], edi
            //   83f908               | cmp                 ecx, 8
            //   720f                 | jb                  0x11
            //   8b06                 | mov                 eax, dword ptr [esi]
            //   33c9                 | xor                 ecx, ecx

        $sequence_7 = { d9f1 833d????????00 0f85fc170000 8d0d60dc4100 ba1b000000 }
            // n = 5, score = 200
            //   d9f1                 | fyl2x               
            //   833d????????00       |                     
            //   0f85fc170000         | jne                 0x1802
            //   8d0d60dc4100         | lea                 ecx, [0x41dc60]
            //   ba1b000000           | mov                 edx, 0x1b

        $sequence_8 = { 57 33c0 8d3c9db4354200 f00fb10f 8bc8 }
            // n = 5, score = 200
            //   57                   | push                edi
            //   33c0                 | xor                 eax, eax
            //   8d3c9db4354200       | lea                 edi, [ebx*4 + 0x4235b4]
            //   f00fb10f             | lock cmpxchg        dword ptr [edi], ecx
            //   8bc8                 | mov                 ecx, eax

        $sequence_9 = { 8b45f0 8b4de8 8b048578394200 f644012880 }
            // n = 4, score = 200
            //   8b45f0               | mov                 eax, dword ptr [ebp - 0x10]
            //   8b4de8               | mov                 ecx, dword ptr [ebp - 0x18]
            //   8b048578394200       | mov                 eax, dword ptr [eax*4 + 0x423978]
            //   f644012880           | test                byte ptr [ecx + eax + 0x28], 0x80

    condition:
        7 of them and filesize < 327680
}