rule win_sneepy_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.sneepy."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.sneepy"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 84c9 75f6 8d45d0 50 68???????? e8???????? }
            // n = 6, score = 100
            //   84c9                 | test                cl, cl
            //   75f6                 | jne                 0xfffffff8
            //   8d45d0               | lea                 eax, [ebp - 0x30]
            //   50                   | push                eax
            //   68????????           |                     
            //   e8????????           |                     

        $sequence_1 = { ff15???????? 8d95f8feffff 52 e8???????? 8d85ecfbffff }
            // n = 5, score = 100
            //   ff15????????         |                     
            //   8d95f8feffff         | lea                 edx, [ebp - 0x108]
            //   52                   | push                edx
            //   e8????????           |                     
            //   8d85ecfbffff         | lea                 eax, [ebp - 0x414]

        $sequence_2 = { 68???????? e8???????? 6804010000 8d85ecfbffff 6a00 }
            // n = 5, score = 100
            //   68????????           |                     
            //   e8????????           |                     
            //   6804010000           | push                0x104
            //   8d85ecfbffff         | lea                 eax, [ebp - 0x414]
            //   6a00                 | push                0

        $sequence_3 = { 0f8e4c010000 8d8dc4feffff 68???????? 51 }
            // n = 4, score = 100
            //   0f8e4c010000         | jle                 0x152
            //   8d8dc4feffff         | lea                 ecx, [ebp - 0x13c]
            //   68????????           |                     
            //   51                   | push                ecx

        $sequence_4 = { 8b510c 40 833c8200 8985a8fbffff 8d0482 0f85c5feffff 33c0 }
            // n = 7, score = 100
            //   8b510c               | mov                 edx, dword ptr [ecx + 0xc]
            //   40                   | inc                 eax
            //   833c8200             | cmp                 dword ptr [edx + eax*4], 0
            //   8985a8fbffff         | mov                 dword ptr [ebp - 0x458], eax
            //   8d0482               | lea                 eax, [edx + eax*4]
            //   0f85c5feffff         | jne                 0xfffffecb
            //   33c0                 | xor                 eax, eax

        $sequence_5 = { 68???????? 8945c4 8845c8 e8???????? }
            // n = 4, score = 100
            //   68????????           |                     
            //   8945c4               | mov                 dword ptr [ebp - 0x3c], eax
            //   8845c8               | mov                 byte ptr [ebp - 0x38], al
            //   e8????????           |                     

        $sequence_6 = { a1???????? 85f6 7502 8bf0 68???????? ffd0 }
            // n = 6, score = 100
            //   a1????????           |                     
            //   85f6                 | test                esi, esi
            //   7502                 | jne                 4
            //   8bf0                 | mov                 esi, eax
            //   68????????           |                     
            //   ffd0                 | call                eax

        $sequence_7 = { a1???????? 894704 668b0d???????? 83c404 66894f08 }
            // n = 5, score = 100
            //   a1????????           |                     
            //   894704               | mov                 dword ptr [edi + 4], eax
            //   668b0d????????       |                     
            //   83c404               | add                 esp, 4
            //   66894f08             | mov                 word ptr [edi + 8], cx

        $sequence_8 = { 40 84c9 75f6 33c0 68???????? 8945dc 8845e0 }
            // n = 7, score = 100
            //   40                   | inc                 eax
            //   84c9                 | test                cl, cl
            //   75f6                 | jne                 0xfffffff8
            //   33c0                 | xor                 eax, eax
            //   68????????           |                     
            //   8945dc               | mov                 dword ptr [ebp - 0x24], eax
            //   8845e0               | mov                 byte ptr [ebp - 0x20], al

        $sequence_9 = { 6a00 50 e8???????? 83c40c 33c0 8a8810234100 888c05f8feffff }
            // n = 7, score = 100
            //   6a00                 | push                0
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   33c0                 | xor                 eax, eax
            //   8a8810234100         | mov                 cl, byte ptr [eax + 0x412310]
            //   888c05f8feffff       | mov                 byte ptr [ebp + eax - 0x108], cl

    condition:
        7 of them and filesize < 188416
}