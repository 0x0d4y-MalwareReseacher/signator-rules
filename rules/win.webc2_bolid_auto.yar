rule win_webc2_bolid_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2021-06-10"
        version = "1"
        description = "Detects win.webc2_bolid."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.webc2_bolid"
        malpedia_rule_date = "20210604"
        malpedia_hash = "be09d5d71e77373c0f538068be31a2ad4c69cfbd"
        malpedia_version = "20210616"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8b4de0 8d5108 52 8d95f0feffff 52 6a00 6a00 }
            // n = 7, score = 100
            //   8b4de0               | mov                 ecx, dword ptr [ebp - 0x20]
            //   8d5108               | lea                 edx, dword ptr [ecx + 8]
            //   52                   | push                edx
            //   8d95f0feffff         | lea                 edx, dword ptr [ebp - 0x110]
            //   52                   | push                edx
            //   6a00                 | push                0
            //   6a00                 | push                0

        $sequence_1 = { 33c0 89b3bc000000 89b3c0000000 89b3c4000000 89b3c8000000 6a01 f2ae }
            // n = 7, score = 100
            //   33c0                 | xor                 eax, eax
            //   89b3bc000000         | mov                 dword ptr [ebx + 0xbc], esi
            //   89b3c0000000         | mov                 dword ptr [ebx + 0xc0], esi
            //   89b3c4000000         | mov                 dword ptr [ebx + 0xc4], esi
            //   89b3c8000000         | mov                 dword ptr [ebx + 0xc8], esi
            //   6a01                 | push                1
            //   f2ae                 | repne scasb         al, byte ptr es:[edi]

        $sequence_2 = { c744241000000000 8a442470 6a00 8d4c2444 c744246c01000000 88442444 }
            // n = 6, score = 100
            //   c744241000000000     | mov                 dword ptr [esp + 0x10], 0
            //   8a442470             | mov                 al, byte ptr [esp + 0x70]
            //   6a00                 | push                0
            //   8d4c2444             | lea                 ecx, dword ptr [esp + 0x44]
            //   c744246c01000000     | mov                 dword ptr [esp + 0x6c], 1
            //   88442444             | mov                 byte ptr [esp + 0x44], al

        $sequence_3 = { 8db6ec164100 bf???????? a5 a5 59 a3???????? a5 }
            // n = 7, score = 100
            //   8db6ec164100         | lea                 esi, dword ptr [esi + 0x4116ec]
            //   bf????????           |                     
            //   a5                   | movsd               dword ptr es:[edi], dword ptr [esi]
            //   a5                   | movsd               dword ptr es:[edi], dword ptr [esi]
            //   59                   | pop                 ecx
            //   a3????????           |                     
            //   a5                   | movsd               dword ptr es:[edi], dword ptr [esi]

        $sequence_4 = { 6a01 8d8c24dc000000 c68424000200000c e8???????? bf???????? 83c9ff 33c0 }
            // n = 7, score = 100
            //   6a01                 | push                1
            //   8d8c24dc000000       | lea                 ecx, dword ptr [esp + 0xdc]
            //   c68424000200000c     | mov                 byte ptr [esp + 0x200], 0xc
            //   e8????????           |                     
            //   bf????????           |                     
            //   83c9ff               | or                  ecx, 0xffffffff
            //   33c0                 | xor                 eax, eax

        $sequence_5 = { e8???????? c644245405 bf???????? 83cdff 33c0 8bcd }
            // n = 6, score = 100
            //   e8????????           |                     
            //   c644245405           | mov                 byte ptr [esp + 0x54], 5
            //   bf????????           |                     
            //   83cdff               | or                  ebp, 0xffffffff
            //   33c0                 | xor                 eax, eax
            //   8bcd                 | mov                 ecx, ebp

        $sequence_6 = { c1f805 83e11f 8b0485c01f4100 f644c80401 0f84f9000000 6a01 56 }
            // n = 7, score = 100
            //   c1f805               | sar                 eax, 5
            //   83e11f               | and                 ecx, 0x1f
            //   8b0485c01f4100       | mov                 eax, dword ptr [eax*4 + 0x411fc0]
            //   f644c80401           | test                byte ptr [eax + ecx*8 + 4], 1
            //   0f84f9000000         | je                  0xff
            //   6a01                 | push                1
            //   56                   | push                esi

        $sequence_7 = { 8bf1 89742408 c706???????? 8b4644 33db 3bc3 }
            // n = 6, score = 100
            //   8bf1                 | mov                 esi, ecx
            //   89742408             | mov                 dword ptr [esp + 8], esi
            //   c706????????         |                     
            //   8b4644               | mov                 eax, dword ptr [esi + 0x44]
            //   33db                 | xor                 ebx, ebx
            //   3bc3                 | cmp                 eax, ebx

        $sequence_8 = { e8???????? 3bc3 0f84bc000000 8b44242c 8b4808 8b4004 3bc3 }
            // n = 7, score = 100
            //   e8????????           |                     
            //   3bc3                 | cmp                 eax, ebx
            //   0f84bc000000         | je                  0xc2
            //   8b44242c             | mov                 eax, dword ptr [esp + 0x2c]
            //   8b4808               | mov                 ecx, dword ptr [eax + 8]
            //   8b4004               | mov                 eax, dword ptr [eax + 4]
            //   3bc3                 | cmp                 eax, ebx

        $sequence_9 = { c7851cffffff01010000 ff15???????? 8a4d1b 53 884d88 8d4d88 8bf0 }
            // n = 7, score = 100
            //   c7851cffffff01010000     | mov    dword ptr [ebp - 0xe4], 0x101
            //   ff15????????         |                     
            //   8a4d1b               | mov                 cl, byte ptr [ebp + 0x1b]
            //   53                   | push                ebx
            //   884d88               | mov                 byte ptr [ebp - 0x78], cl
            //   8d4d88               | lea                 ecx, dword ptr [ebp - 0x78]
            //   8bf0                 | mov                 esi, eax

    condition:
        7 of them and filesize < 163840
}