rule win_webc2_bolid_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.webc2_bolid."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.webc2_bolid"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8801 eb09 51 e8???????? 83c404 8b442450 899c2480000000 }
            // n = 7, score = 100
            //   8801                 | mov                 byte ptr [ecx], al
            //   eb09                 | jmp                 0xb
            //   51                   | push                ecx
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   8b442450             | mov                 eax, dword ptr [esp + 0x50]
            //   899c2480000000       | mov                 dword ptr [esp + 0x80], ebx

        $sequence_1 = { 8bcd e8???????? c644245405 bf???????? 83cdff 33c0 }
            // n = 6, score = 100
            //   8bcd                 | mov                 ecx, ebp
            //   e8????????           |                     
            //   c644245405           | mov                 byte ptr [esp + 0x54], 5
            //   bf????????           |                     
            //   83cdff               | or                  ebp, 0xffffffff
            //   33c0                 | xor                 eax, eax

        $sequence_2 = { c1f905 83e61f 88450b 8d3c8dc01f4100 c1e603 8b0f 80650b48 }
            // n = 7, score = 100
            //   c1f905               | sar                 ecx, 5
            //   83e61f               | and                 esi, 0x1f
            //   88450b               | mov                 byte ptr [ebp + 0xb], al
            //   8d3c8dc01f4100       | lea                 edi, [ecx*4 + 0x411fc0]
            //   c1e603               | shl                 esi, 3
            //   8b0f                 | mov                 ecx, dword ptr [edi]
            //   80650b48             | and                 byte ptr [ebp + 0xb], 0x48

        $sequence_3 = { 83ec10 8a45f3 53 8bd9 }
            // n = 4, score = 100
            //   83ec10               | sub                 esp, 0x10
            //   8a45f3               | mov                 al, byte ptr [ebp - 0xd]
            //   53                   | push                ebx
            //   8bd9                 | mov                 ebx, ecx

        $sequence_4 = { 85c0 763e 8a536c 8d7b6c 83ec10 }
            // n = 5, score = 100
            //   85c0                 | test                eax, eax
            //   763e                 | jbe                 0x40
            //   8a536c               | mov                 dl, byte ptr [ebx + 0x6c]
            //   8d7b6c               | lea                 edi, [ebx + 0x6c]
            //   83ec10               | sub                 esp, 0x10

        $sequence_5 = { 0fb641ff 0fb6d2 3bc2 0f8793000000 80880132410004 }
            // n = 5, score = 100
            //   0fb641ff             | movzx               eax, byte ptr [ecx - 1]
            //   0fb6d2               | movzx               edx, dl
            //   3bc2                 | cmp                 eax, edx
            //   0f8793000000         | ja                  0x99
            //   80880132410004       | or                  byte ptr [eax + 0x413201], 4

        $sequence_6 = { e8???????? c645fc0f 6a01 8d4da0 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   c645fc0f             | mov                 byte ptr [ebp - 4], 0xf
            //   6a01                 | push                1
            //   8d4da0               | lea                 ecx, [ebp - 0x60]

        $sequence_7 = { 6a01 8d8d34ffffff c645fc16 e8???????? 8b45a4 85c0 }
            // n = 6, score = 100
            //   6a01                 | push                1
            //   8d8d34ffffff         | lea                 ecx, [ebp - 0xcc]
            //   c645fc16             | mov                 byte ptr [ebp - 4], 0x16
            //   e8????????           |                     
            //   8b45a4               | mov                 eax, dword ptr [ebp - 0x5c]
            //   85c0                 | test                eax, eax

        $sequence_8 = { 8b4f04 8b5508 03ca 2bc6 50 }
            // n = 5, score = 100
            //   8b4f04               | mov                 ecx, dword ptr [edi + 4]
            //   8b5508               | mov                 edx, dword ptr [ebp + 8]
            //   03ca                 | add                 ecx, edx
            //   2bc6                 | sub                 eax, esi
            //   50                   | push                eax

        $sequence_9 = { c7851cffffff01010000 ff15???????? 8a4d1b 53 884d88 8d4d88 8bf0 }
            // n = 7, score = 100
            //   c7851cffffff01010000     | mov    dword ptr [ebp - 0xe4], 0x101
            //   ff15????????         |                     
            //   8a4d1b               | mov                 cl, byte ptr [ebp + 0x1b]
            //   53                   | push                ebx
            //   884d88               | mov                 byte ptr [ebp - 0x78], cl
            //   8d4d88               | lea                 ecx, [ebp - 0x78]
            //   8bf0                 | mov                 esi, eax

    condition:
        7 of them and filesize < 163840
}