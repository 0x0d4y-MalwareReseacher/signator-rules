rule win_chinotto_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-08-05"
        version = "1"
        description = "Detects win.chinotto."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.chinotto"
        malpedia_rule_date = "20220805"
        malpedia_hash = "6ec06c64bcfdbeda64eff021c766b4ce34542b71"
        malpedia_version = "20220808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c3 8bff 56 57 33f6 bf???????? 833cf5a4e6410001 }
            // n = 7, score = 100
            //   c3                   | ret                 
            //   8bff                 | mov                 edi, edi
            //   56                   | push                esi
            //   57                   | push                edi
            //   33f6                 | xor                 esi, esi
            //   bf????????           |                     
            //   833cf5a4e6410001     | cmp                 dword ptr [esi*8 + 0x41e6a4], 1

        $sequence_1 = { 889dedfeffff c785e9feffff78012c25 66c785e7feffff3b21 889de6feffff c785e2feffff163a3b21 c785defeffff2026585f 66c785dcfeffff3b78 }
            // n = 7, score = 100
            //   889dedfeffff         | mov                 byte ptr [ebp - 0x113], bl
            //   c785e9feffff78012c25     | mov    dword ptr [ebp - 0x117], 0x252c0178
            //   66c785e7feffff3b21     | mov    word ptr [ebp - 0x119], 0x213b
            //   889de6feffff         | mov                 byte ptr [ebp - 0x11a], bl
            //   c785e2feffff163a3b21     | mov    dword ptr [ebp - 0x11e], 0x213b3a16
            //   c785defeffff2026585f     | mov    dword ptr [ebp - 0x122], 0x5f582620
            //   66c785dcfeffff3b78     | mov    word ptr [ebp - 0x124], 0x783b

        $sequence_2 = { 85ff 745c 0fb79df8f3ffff 90 0fb73c86 8acb 8b9df4f3ffff }
            // n = 7, score = 100
            //   85ff                 | test                edi, edi
            //   745c                 | je                  0x5e
            //   0fb79df8f3ffff       | movzx               ebx, word ptr [ebp - 0xc08]
            //   90                   | nop                 
            //   0fb73c86             | movzx               edi, word ptr [esi + eax*4]
            //   8acb                 | mov                 cl, bl
            //   8b9df4f3ffff         | mov                 ebx, dword ptr [ebp - 0xc0c]

        $sequence_3 = { c78424d40100006f005800 c78424d801000078005700 c78424dc01000049004800 c78424e001000076006f00 c78424e401000073003000 c78424e801000075007000 c78424ec0100004c006300 }
            // n = 7, score = 100
            //   c78424d40100006f005800     | mov    dword ptr [esp + 0x1d4], 0x58006f
            //   c78424d801000078005700     | mov    dword ptr [esp + 0x1d8], 0x570078
            //   c78424dc01000049004800     | mov    dword ptr [esp + 0x1dc], 0x480049
            //   c78424e001000076006f00     | mov    dword ptr [esp + 0x1e0], 0x6f0076
            //   c78424e401000073003000     | mov    dword ptr [esp + 0x1e4], 0x300073
            //   c78424e801000075007000     | mov    dword ptr [esp + 0x1e8], 0x700075
            //   c78424ec0100004c006300     | mov    dword ptr [esp + 0x1ec], 0x63004c

        $sequence_4 = { c3 8b4de0 8b55d8 8b45ec c1e106 034ddc d1fa }
            // n = 7, score = 100
            //   c3                   | ret                 
            //   8b4de0               | mov                 ecx, dword ptr [ebp - 0x20]
            //   8b55d8               | mov                 edx, dword ptr [ebp - 0x28]
            //   8b45ec               | mov                 eax, dword ptr [ebp - 0x14]
            //   c1e106               | shl                 ecx, 6
            //   034ddc               | add                 ecx, dword ptr [ebp - 0x24]
            //   d1fa                 | sar                 edx, 1

        $sequence_5 = { eb0a c1e808 0fb680d8bb4100 66ff8446d2830000 }
            // n = 4, score = 100
            //   eb0a                 | jmp                 0xc
            //   c1e808               | shr                 eax, 8
            //   0fb680d8bb4100       | movzx               eax, byte ptr [eax + 0x41bbd8]
            //   66ff8446d2830000     | inc                 word ptr [esi + eax*2 + 0x83d2]

        $sequence_6 = { 83c404 895004 66c7007761 66c740026b65 50 66c740047570 }
            // n = 6, score = 100
            //   83c404               | add                 esp, 4
            //   895004               | mov                 dword ptr [eax + 4], edx
            //   66c7007761           | mov                 word ptr [eax], 0x6177
            //   66c740026b65         | mov                 word ptr [eax + 2], 0x656b
            //   50                   | push                eax
            //   66c740047570         | mov                 word ptr [eax + 4], 0x7075

        $sequence_7 = { f7d9 0bc8 51 e8???????? 8bf0 8bc3 }
            // n = 6, score = 100
            //   f7d9                 | neg                 ecx
            //   0bc8                 | or                  ecx, eax
            //   51                   | push                ecx
            //   e8????????           |                     
            //   8bf0                 | mov                 esi, eax
            //   8bc3                 | mov                 eax, ebx

        $sequence_8 = { c7852effffff7031585f c7852affffff213d6f75 66c78528ffffff3b32 889d27ffffff c78523ffffff3b217819 889d22ffffff }
            // n = 6, score = 100
            //   c7852effffff7031585f     | mov    dword ptr [ebp - 0xd2], 0x5f583170
            //   c7852affffff213d6f75     | mov    dword ptr [ebp - 0xd6], 0x756f3d21
            //   66c78528ffffff3b32     | mov    word ptr [ebp - 0xd8], 0x323b
            //   889d27ffffff         | mov                 byte ptr [ebp - 0xd9], bl
            //   c78523ffffff3b217819     | mov    dword ptr [ebp - 0xdd], 0x1978213b
            //   889d22ffffff         | mov                 byte ptr [ebp - 0xde], bl

        $sequence_9 = { 33c0 894610 894614 894618 89461c 8b4620 8b4f34 }
            // n = 7, score = 100
            //   33c0                 | xor                 eax, eax
            //   894610               | mov                 dword ptr [esi + 0x10], eax
            //   894614               | mov                 dword ptr [esi + 0x14], eax
            //   894618               | mov                 dword ptr [esi + 0x18], eax
            //   89461c               | mov                 dword ptr [esi + 0x1c], eax
            //   8b4620               | mov                 eax, dword ptr [esi + 0x20]
            //   8b4f34               | mov                 ecx, dword ptr [edi + 0x34]

    condition:
        7 of them and filesize < 300032
}