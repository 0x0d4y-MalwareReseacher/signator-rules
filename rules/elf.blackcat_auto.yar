rule elf_blackcat_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes elf.blackcat."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/elf.blackcat"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 3d???????? 0f43ca 81f9???????? 0f94c0 }
            // n = 4, score = 200
            //   3d????????           |                     
            //   0f43ca               | cmp                 edi, esi
            //   81f9????????         |                     
            //   0f94c0               | jae                 0x14f

        $sequence_1 = { 660f60c9 f20f70c900 660f70c900 660f6fd1 660f74d0 660fd7ea 660f6fd0 }
            // n = 7, score = 200
            //   660f60c9             | xor                 ebp, ebp
            //   f20f70c900           | nop                 word ptr [eax + eax]
            //   660f70c900           | movzx               ecx, byte ptr [ebp + eax]
            //   660f6fd1             | mov                 dl, cl
            //   660f74d0             | add                 dl, 0xf7
            //   660fd7ea             | cmp                 dl, 0x17
            //   660f6fd0             | ja                  0x7d5

        $sequence_2 = { 29c2 83c207 0fb7c2 69c0???????? c1e810 29c2 }
            // n = 6, score = 200
            //   29c2                 | ret                 
            //   83c207               | mov                 al, byte ptr [ecx + 1]
            //   0fb7c2               | and                 al, 8
            //   69c0????????         |                     
            //   c1e810               | shr                 al, 3
            //   29c2                 | and                 al, 8

        $sequence_3 = { 0f0b e8???????? 0f0b 90 90 90 }
            // n = 6, score = 200
            //   0f0b                 | ud2                 
            //   e8????????           |                     
            //   0f0b                 | ud2                 
            //   90                   | mov                 edx, 4
            //   90                   | mov                 ebx, dword ptr [esp + 0x1c]
            //   90                   | ud2                 

        $sequence_4 = { b804000000 81f9???????? 720d b805000000 }
            // n = 4, score = 200
            //   b804000000           | mov                 bl, 0x5d
            //   81f9????????         |                     
            //   720d                 | dec                 ecx
            //   b805000000           | cmp                 ebp, dword ptr [esi + 8]

        $sequence_5 = { 0fb7c0 c1e80c 6bc064 28c2 }
            // n = 4, score = 200
            //   0fb7c0               | movsd               xmm0, qword ptr [esp + 0x210]
            //   c1e80c               | movsd               qword ptr [esp + 0x1e8], xmm1
            //   6bc064               | movzx               eax, word ptr [esp + 0xc0]
            //   28c2                 | movsd               qword ptr [esp + 0x128], xmm1

        $sequence_6 = { 0fb7ca c1e902 69c9???????? c1e911 6bf164 29f2 }
            // n = 6, score = 200
            //   0fb7ca               | dec                 eax
            //   c1e902               | lea                 eax, dword ptr [ebp*2]
            //   69c9????????         |                     
            //   c1e911               | movzx               ebp, word ptr [ebx + 0x1c3a]
            //   6bf164               | dec                 eax
            //   29f2                 | lea                 edi, dword ptr [ebp + 1]

        $sequence_7 = { 803c0b00 780f 660f6f03 660fd7c8 }
            // n = 4, score = 200
            //   803c0b00             | je                  0x349
            //   780f                 | jne                 0x35f
            //   660f6f03             | mov                 ebp, dword ptr [esi + 8]
            //   660fd7c8             | mov                 dword ptr [esp + 4], eax

        $sequence_8 = { 660f62ee 660f72d50f 660f70f5f5 660ff4ec }
            // n = 4, score = 200
            //   660f62ee             | add                 ebp, esp
            //   660f72d50f           | jmp                 0x5a1
            //   660f70f5f5           | dec                 eax
            //   660ff4ec             | mov                 eax, dword ptr [esp + 0x60]

        $sequence_9 = { 660f60c0 f20f70c000 660f70c000 660f6fd0 660f74d1 660fd7c2 }
            // n = 6, score = 200
            //   660f60c0             | ret                 
            //   f20f70c000           | mov                 eax, dword ptr [esp + 0x98]
            //   660f70c000           | mov                 edx, dword ptr [esp + 0x78]
            //   660f6fd0             | pop                 edi
            //   660f74d1             | pop                 ebx
            //   660fd7c2             | pop                 ebp

    condition:
        7 of them and filesize < 8011776
}