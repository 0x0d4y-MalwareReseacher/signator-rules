rule win_typehash_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.typehash."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.typehash"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c1e604 aa 8d9e582c4100 803b00 8bcb 742c 8a5101 }
            // n = 7, score = 100
            //   c1e604               | shl                 esi, 4
            //   aa                   | stosb               byte ptr es:[edi], al
            //   8d9e582c4100         | lea                 ebx, [esi + 0x412c58]
            //   803b00               | cmp                 byte ptr [ebx], 0
            //   8bcb                 | mov                 ecx, ebx
            //   742c                 | je                  0x2e
            //   8a5101               | mov                 dl, byte ptr [ecx + 1]

        $sequence_1 = { 53 55 56 33ed 57 55 8d4c2418 }
            // n = 7, score = 100
            //   53                   | push                ebx
            //   55                   | push                ebp
            //   56                   | push                esi
            //   33ed                 | xor                 ebp, ebp
            //   57                   | push                edi
            //   55                   | push                ebp
            //   8d4c2418             | lea                 ecx, [esp + 0x18]

        $sequence_2 = { 8088????????10 8ac8 80c120 8888c03b4100 eb1f 83f861 7213 }
            // n = 7, score = 100
            //   8088????????10       |                     
            //   8ac8                 | mov                 cl, al
            //   80c120               | add                 cl, 0x20
            //   8888c03b4100         | mov                 byte ptr [eax + 0x413bc0], cl
            //   eb1f                 | jmp                 0x21
            //   83f861               | cmp                 eax, 0x61
            //   7213                 | jb                  0x15

        $sequence_3 = { 83c408 8b4028 85c0 7430 }
            // n = 4, score = 100
            //   83c408               | add                 esp, 8
            //   8b4028               | mov                 eax, dword ptr [eax + 0x28]
            //   85c0                 | test                eax, eax
            //   7430                 | je                  0x32

        $sequence_4 = { 8d1449 33c9 8a9c297ce54000 41 }
            // n = 4, score = 100
            //   8d1449               | lea                 edx, [ecx + ecx*2]
            //   33c9                 | xor                 ecx, ecx
            //   8a9c297ce54000       | mov                 bl, byte ptr [ecx + ebp + 0x40e57c]
            //   41                   | inc                 ecx

        $sequence_5 = { 49 51 e8???????? 83c404 8b8c24c0000000 5f 5e }
            // n = 7, score = 100
            //   49                   | dec                 ecx
            //   51                   | push                ecx
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   8b8c24c0000000       | mov                 ecx, dword ptr [esp + 0xc0]
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

        $sequence_6 = { 7476 fec8 8841ff eb79 }
            // n = 4, score = 100
            //   7476                 | je                  0x78
            //   fec8                 | dec                 al
            //   8841ff               | mov                 byte ptr [ecx - 1], al
            //   eb79                 | jmp                 0x7b

        $sequence_7 = { 8a10 40 0fb6da f683c13c410004 740c }
            // n = 5, score = 100
            //   8a10                 | mov                 dl, byte ptr [eax]
            //   40                   | inc                 eax
            //   0fb6da               | movzx               ebx, dl
            //   f683c13c410004       | test                byte ptr [ebx + 0x413cc1], 4
            //   740c                 | je                  0xe

        $sequence_8 = { 884c2414 8d4c2414 c68424d812000001 e8???????? 8b442418 c68424d412000002 }
            // n = 6, score = 100
            //   884c2414             | mov                 byte ptr [esp + 0x14], cl
            //   8d4c2414             | lea                 ecx, [esp + 0x14]
            //   c68424d812000001     | mov                 byte ptr [esp + 0x12d8], 1
            //   e8????????           |                     
            //   8b442418             | mov                 eax, dword ptr [esp + 0x18]
            //   c68424d412000002     | mov                 byte ptr [esp + 0x12d4], 2

        $sequence_9 = { 68???????? f2ae f7d1 2bf9 8bf7 8bd1 bf???????? }
            // n = 7, score = 100
            //   68????????           |                     
            //   f2ae                 | repne scasb         al, byte ptr es:[edi]
            //   f7d1                 | not                 ecx
            //   2bf9                 | sub                 edi, ecx
            //   8bf7                 | mov                 esi, edi
            //   8bd1                 | mov                 edx, ecx
            //   bf????????           |                     

    condition:
        7 of them and filesize < 180224
}