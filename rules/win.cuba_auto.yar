rule win_cuba_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.cuba."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cuba"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 50 e8???????? 83c414 5d c3 6892000000 68???????? }
            // n = 7, score = 100
            //   50                   | push                eax
            //   e8????????           |                     
            //   83c414               | add                 esp, 0x14
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   6892000000           | push                0x92
            //   68????????           |                     

        $sequence_1 = { 33c7 03c1 03d0 8b85f4feffff 8bc8 03da c1c80d }
            // n = 7, score = 100
            //   33c7                 | xor                 eax, edi
            //   03c1                 | add                 eax, ecx
            //   03d0                 | add                 edx, eax
            //   8b85f4feffff         | mov                 eax, dword ptr [ebp - 0x10c]
            //   8bc8                 | mov                 ecx, eax
            //   03da                 | add                 ebx, edx
            //   c1c80d               | ror                 eax, 0xd

        $sequence_2 = { 50 ff15???????? 83c404 85c0 0f84c3000000 8b4718 85c0 }
            // n = 7, score = 100
            //   50                   | push                eax
            //   ff15????????         |                     
            //   83c404               | add                 esp, 4
            //   85c0                 | test                eax, eax
            //   0f84c3000000         | je                  0xc9
            //   8b4718               | mov                 eax, dword ptr [edi + 0x18]
            //   85c0                 | test                eax, eax

        $sequence_3 = { 85f6 0f8ea5000000 8b9dfcefffff 8d8dfcefffff 898df0efffff 89b5ecefffff 89b5e4efffff }
            // n = 7, score = 100
            //   85f6                 | test                esi, esi
            //   0f8ea5000000         | jle                 0xab
            //   8b9dfcefffff         | mov                 ebx, dword ptr [ebp - 0x1004]
            //   8d8dfcefffff         | lea                 ecx, dword ptr [ebp - 0x1004]
            //   898df0efffff         | mov                 dword ptr [ebp - 0x1010], ecx
            //   89b5ecefffff         | mov                 dword ptr [ebp - 0x1014], esi
            //   89b5e4efffff         | mov                 dword ptr [ebp - 0x101c], esi

        $sequence_4 = { 8bf0 83c40c 85f6 753d 8b4704 50 ff7508 }
            // n = 7, score = 100
            //   8bf0                 | mov                 esi, eax
            //   83c40c               | add                 esp, 0xc
            //   85f6                 | test                esi, esi
            //   753d                 | jne                 0x3f
            //   8b4704               | mov                 eax, dword ptr [edi + 4]
            //   50                   | push                eax
            //   ff7508               | push                dword ptr [ebp + 8]

        $sequence_5 = { 239dd8feffff 2385e4feffff 03ca 0bd8 8b95f0feffff 899de8feffff 8bc6 }
            // n = 7, score = 100
            //   239dd8feffff         | and                 ebx, dword ptr [ebp - 0x128]
            //   2385e4feffff         | and                 eax, dword ptr [ebp - 0x11c]
            //   03ca                 | add                 ecx, edx
            //   0bd8                 | or                  ebx, eax
            //   8b95f0feffff         | mov                 edx, dword ptr [ebp - 0x110]
            //   899de8feffff         | mov                 dword ptr [ebp - 0x118], ebx
            //   8bc6                 | mov                 eax, esi

        $sequence_6 = { 90 8a040e 8d4901 3041ff 83ea01 75f2 8b75e4 }
            // n = 7, score = 100
            //   90                   | nop                 
            //   8a040e               | mov                 al, byte ptr [esi + ecx]
            //   8d4901               | lea                 ecx, dword ptr [ecx + 1]
            //   3041ff               | xor                 byte ptr [ecx - 1], al
            //   83ea01               | sub                 edx, 1
            //   75f2                 | jne                 0xfffffff4
            //   8b75e4               | mov                 esi, dword ptr [ebp - 0x1c]

        $sequence_7 = { 8b55d8 c1c112 334ddc 894ddc 8d0c02 c1c107 334dec }
            // n = 7, score = 100
            //   8b55d8               | mov                 edx, dword ptr [ebp - 0x28]
            //   c1c112               | rol                 ecx, 0x12
            //   334ddc               | xor                 ecx, dword ptr [ebp - 0x24]
            //   894ddc               | mov                 dword ptr [ebp - 0x24], ecx
            //   8d0c02               | lea                 ecx, dword ptr [edx + eax]
            //   c1c107               | rol                 ecx, 7
            //   334dec               | xor                 ecx, dword ptr [ebp - 0x14]

        $sequence_8 = { 8be5 5d c3 8b4d10 b802000000 5f 03c2 }
            // n = 7, score = 100
            //   8be5                 | mov                 esp, ebp
            //   5d                   | pop                 ebp
            //   c3                   | ret                 
            //   8b4d10               | mov                 ecx, dword ptr [ebp + 0x10]
            //   b802000000           | mov                 eax, 2
            //   5f                   | pop                 edi
            //   03c2                 | add                 eax, edx

        $sequence_9 = { 897db4 8b4308 8d575c 8907 b808000000 8702 c745c408000000 }
            // n = 7, score = 100
            //   897db4               | mov                 dword ptr [ebp - 0x4c], edi
            //   8b4308               | mov                 eax, dword ptr [ebx + 8]
            //   8d575c               | lea                 edx, dword ptr [edi + 0x5c]
            //   8907                 | mov                 dword ptr [edi], eax
            //   b808000000           | mov                 eax, 8
            //   8702                 | xchg                dword ptr [edx], eax
            //   c745c408000000       | mov                 dword ptr [ebp - 0x3c], 8

    condition:
        7 of them and filesize < 1094656
}