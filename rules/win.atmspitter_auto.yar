rule win_atmspitter_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.atmspitter."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.atmspitter"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { eb59 68???????? e8???????? 83c404 }
            // n = 4, score = 200
            //   eb59                 | jmp                 0x5b
            //   68????????           |                     
            //   e8????????           |                     
            //   83c404               | add                 esp, 4

        $sequence_1 = { 57 50 c745fc00000000 ffd3 0500280000 50 e8???????? }
            // n = 7, score = 200
            //   57                   | push                edi
            //   50                   | push                eax
            //   c745fc00000000       | mov                 dword ptr [ebp - 4], 0
            //   ffd3                 | call                ebx
            //   0500280000           | add                 eax, 0x2800
            //   50                   | push                eax
            //   e8????????           |                     

        $sequence_2 = { 85c0 7402 ffd0 8345e404 ebe6 c745e060914000 }
            // n = 6, score = 200
            //   85c0                 | test                eax, eax
            //   7402                 | je                  4
            //   ffd0                 | call                eax
            //   8345e404             | add                 dword ptr [ebp - 0x1c], 4
            //   ebe6                 | jmp                 0xffffffe8
            //   c745e060914000       | mov                 dword ptr [ebp - 0x20], 0x409160

        $sequence_3 = { c744242850000000 ff15???????? a900800000 7424 68???????? e8???????? 83ec24 }
            // n = 7, score = 200
            //   c744242850000000     | mov                 dword ptr [esp + 0x28], 0x50
            //   ff15????????         |                     
            //   a900800000           | test                eax, 0x8000
            //   7424                 | je                  0x26
            //   68????????           |                     
            //   e8????????           |                     
            //   83ec24               | sub                 esp, 0x24

        $sequence_4 = { 0fbe8060914000 83e00f eb02 33c0 0fbe84c180914000 }
            // n = 5, score = 200
            //   0fbe8060914000       | movsx               eax, byte ptr [eax + 0x409160]
            //   83e00f               | and                 eax, 0xf
            //   eb02                 | jmp                 4
            //   33c0                 | xor                 eax, eax
            //   0fbe84c180914000     | movsx               eax, byte ptr [ecx + eax*8 + 0x409180]

        $sequence_5 = { eb02 33c0 0fbe84c180914000 6a07 c1f804 59 }
            // n = 6, score = 200
            //   eb02                 | jmp                 4
            //   33c0                 | xor                 eax, eax
            //   0fbe84c180914000     | movsx               eax, byte ptr [ecx + eax*8 + 0x409180]
            //   6a07                 | push                7
            //   c1f804               | sar                 eax, 4
            //   59                   | pop                 ecx

        $sequence_6 = { 8bd1 52 895c2424 c744242853000000 894c2430 ff15???????? 40 }
            // n = 7, score = 200
            //   8bd1                 | mov                 edx, ecx
            //   52                   | push                edx
            //   895c2424             | mov                 dword ptr [esp + 0x24], ebx
            //   c744242853000000     | mov                 dword ptr [esp + 0x28], 0x53
            //   894c2430             | mov                 dword ptr [esp + 0x30], ecx
            //   ff15????????         |                     
            //   40                   | inc                 eax

        $sequence_7 = { e8???????? 8d4c247c 83c41c 8bd1 52 895c2424 }
            // n = 6, score = 200
            //   e8????????           |                     
            //   8d4c247c             | lea                 ecx, dword ptr [esp + 0x7c]
            //   83c41c               | add                 esp, 0x1c
            //   8bd1                 | mov                 edx, ecx
            //   52                   | push                edx
            //   895c2424             | mov                 dword ptr [esp + 0x24], ebx

        $sequence_8 = { 83c404 eb4a 68???????? e8???????? }
            // n = 4, score = 200
            //   83c404               | add                 esp, 4
            //   eb4a                 | jmp                 0x4c
            //   68????????           |                     
            //   e8????????           |                     

        $sequence_9 = { 68???????? e8???????? 83c408 68???????? e8???????? 8b4524 83c404 }
            // n = 7, score = 200
            //   68????????           |                     
            //   e8????????           |                     
            //   83c408               | add                 esp, 8
            //   68????????           |                     
            //   e8????????           |                     
            //   8b4524               | mov                 eax, dword ptr [ebp + 0x24]
            //   83c404               | add                 esp, 4

    condition:
        7 of them and filesize < 147456
}