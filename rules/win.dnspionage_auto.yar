rule win_dnspionage_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.dnspionage."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.dnspionage"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 8b451c 57 8945e8 8bf9 }
            // n = 4, score = 300
            //   8b451c               | mov                 eax, dword ptr [ebp + 0x1c]
            //   57                   | push                edi
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax
            //   8bf9                 | mov                 edi, ecx

        $sequence_1 = { eb52 8d0492 8d144503000000 eb46 8d0492 }
            // n = 5, score = 300
            //   eb52                 | jmp                 0x54
            //   8d0492               | lea                 eax, [edx + edx*4]
            //   8d144503000000       | lea                 edx, [eax*2 + 3]
            //   eb46                 | jmp                 0x48
            //   8d0492               | lea                 eax, [edx + edx*4]

        $sequence_2 = { 85c0 7540 8b85f8feffff 40 }
            // n = 4, score = 300
            //   85c0                 | test                eax, eax
            //   7540                 | jne                 0x42
            //   8b85f8feffff         | mov                 eax, dword ptr [ebp - 0x108]
            //   40                   | inc                 eax

        $sequence_3 = { 8a5dfa 8a55f9 8a75f8 eb03 8a5dff 8ac6 80e603 }
            // n = 7, score = 300
            //   8a5dfa               | mov                 bl, byte ptr [ebp - 6]
            //   8a55f9               | mov                 dl, byte ptr [ebp - 7]
            //   8a75f8               | mov                 dh, byte ptr [ebp - 8]
            //   eb03                 | jmp                 5
            //   8a5dff               | mov                 bl, byte ptr [ebp - 1]
            //   8ac6                 | mov                 al, dh
            //   80e603               | and                 dh, 3

        $sequence_4 = { eb5e 8d0492 8d144502000000 eb52 8d0492 }
            // n = 5, score = 300
            //   eb5e                 | jmp                 0x60
            //   8d0492               | lea                 eax, [edx + edx*4]
            //   8d144502000000       | lea                 edx, [eax*2 + 2]
            //   eb52                 | jmp                 0x54
            //   8d0492               | lea                 eax, [edx + edx*4]

        $sequence_5 = { c6000a 40 015e08 c60000 8b3f }
            // n = 5, score = 300
            //   c6000a               | mov                 byte ptr [eax], 0xa
            //   40                   | inc                 eax
            //   015e08               | add                 dword ptr [esi + 8], ebx
            //   c60000               | mov                 byte ptr [eax], 0
            //   8b3f                 | mov                 edi, dword ptr [edi]

        $sequence_6 = { 8bc3 56 33f6 0bc2 57 }
            // n = 5, score = 300
            //   8bc3                 | mov                 eax, ebx
            //   56                   | push                esi
            //   33f6                 | xor                 esi, esi
            //   0bc2                 | or                  eax, edx
            //   57                   | push                edi

        $sequence_7 = { 83c404 33c9 33f6 8bf8 }
            // n = 4, score = 300
            //   83c404               | add                 esp, 4
            //   33c9                 | xor                 ecx, ecx
            //   33f6                 | xor                 esi, esi
            //   8bf8                 | mov                 edi, eax

        $sequence_8 = { 85d2 7413 2bfe 8a06 8d7601 41 }
            // n = 6, score = 300
            //   85d2                 | test                edx, edx
            //   7413                 | je                  0x15
            //   2bfe                 | sub                 edi, esi
            //   8a06                 | mov                 al, byte ptr [esi]
            //   8d7601               | lea                 esi, [esi + 1]
            //   41                   | inc                 ecx

        $sequence_9 = { 2bca 03f1 56 e8???????? 8bd8 83c408 2bde }
            // n = 7, score = 300
            //   2bca                 | sub                 ecx, edx
            //   03f1                 | add                 esi, ecx
            //   56                   | push                esi
            //   e8????????           |                     
            //   8bd8                 | mov                 ebx, eax
            //   83c408               | add                 esp, 8
            //   2bde                 | sub                 ebx, esi

    condition:
        7 of them and filesize < 786432
}