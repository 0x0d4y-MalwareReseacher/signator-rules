rule win_applejeus_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.applejeus."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.applejeus"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 83f035 88856cf6ffff 8b8560f6ffff 0409 83f02e 88856df6ffff 8b8560f6ffff }
            // n = 7, score = 100
            //   83f035               | xor                 eax, 0x35
            //   88856cf6ffff         | mov                 byte ptr [ebp - 0x994], al
            //   8b8560f6ffff         | mov                 eax, dword ptr [ebp - 0x9a0]
            //   0409                 | add                 al, 9
            //   83f02e               | xor                 eax, 0x2e
            //   88856df6ffff         | mov                 byte ptr [ebp - 0x993], al
            //   8b8560f6ffff         | mov                 eax, dword ptr [ebp - 0x9a0]

        $sequence_1 = { 6690 668b844d78ecffff 0fb7c0 83c0f6 6689844d78ecffff 41 }
            // n = 6, score = 100
            //   6690                 | nop                 
            //   668b844d78ecffff     | mov                 ax, word ptr [ebp + ecx*2 - 0x1388]
            //   0fb7c0               | movzx               eax, ax
            //   83c0f6               | add                 eax, -0xa
            //   6689844d78ecffff     | mov                 word ptr [ebp + ecx*2 - 0x1388], ax
            //   41                   | inc                 ecx

        $sequence_2 = { 0411 83f074 8885f1fcffff 8b85dcfcffff 0412 83f05c 8885f2fcffff }
            // n = 7, score = 100
            //   0411                 | add                 al, 0x11
            //   83f074               | xor                 eax, 0x74
            //   8885f1fcffff         | mov                 byte ptr [ebp - 0x30f], al
            //   8b85dcfcffff         | mov                 eax, dword ptr [ebp - 0x324]
            //   0412                 | add                 al, 0x12
            //   83f05c               | xor                 eax, 0x5c
            //   8885f2fcffff         | mov                 byte ptr [ebp - 0x30e], al

        $sequence_3 = { 58 668906 8b048d38f14800 668955e0 6a0a 8854072a 8b0c8d38f14800 }
            // n = 7, score = 100
            //   58                   | pop                 eax
            //   668906               | mov                 word ptr [esi], ax
            //   8b048d38f14800       | mov                 eax, dword ptr [ecx*4 + 0x48f138]
            //   668955e0             | mov                 word ptr [ebp - 0x20], dx
            //   6a0a                 | push                0xa
            //   8854072a             | mov                 byte ptr [edi + eax + 0x2a], dl
            //   8b0c8d38f14800       | mov                 ecx, dword ptr [ecx*4 + 0x48f138]

        $sequence_4 = { 8d4ddc e9???????? 8d8d60ffffff e9???????? 8d8d64ffffff e9???????? 8d8d68ffffff }
            // n = 7, score = 100
            //   8d4ddc               | lea                 ecx, [ebp - 0x24]
            //   e9????????           |                     
            //   8d8d60ffffff         | lea                 ecx, [ebp - 0xa0]
            //   e9????????           |                     
            //   8d8d64ffffff         | lea                 ecx, [ebp - 0x9c]
            //   e9????????           |                     
            //   8d8d68ffffff         | lea                 ecx, [ebp - 0x98]

        $sequence_5 = { 8b8de4f6ffff 83c404 8985e0f6ffff f30f7e85ccf7ffff 660fd64004 c700???????? 89700c }
            // n = 7, score = 100
            //   8b8de4f6ffff         | mov                 ecx, dword ptr [ebp - 0x91c]
            //   83c404               | add                 esp, 4
            //   8985e0f6ffff         | mov                 dword ptr [ebp - 0x920], eax
            //   f30f7e85ccf7ffff     | movq                xmm0, qword ptr [ebp - 0x834]
            //   660fd64004           | movq                qword ptr [eax + 4], xmm0
            //   c700????????         |                     
            //   89700c               | mov                 dword ptr [eax + 0xc], esi

        $sequence_6 = { 85c0 0f8428070000 50 c70002000000 ff15???????? 6a00 6a0c }
            // n = 7, score = 100
            //   85c0                 | test                eax, eax
            //   0f8428070000         | je                  0x72e
            //   50                   | push                eax
            //   c70002000000         | mov                 dword ptr [eax], 2
            //   ff15????????         |                     
            //   6a00                 | push                0
            //   6a0c                 | push                0xc

        $sequence_7 = { c685c8fcffff01 c685c9fcffff1a c685cafcffff07 c685cbfcffff06 c685ccfcffff05 c685cdfcffff0d c685cefcffff06 }
            // n = 7, score = 100
            //   c685c8fcffff01       | mov                 byte ptr [ebp - 0x338], 1
            //   c685c9fcffff1a       | mov                 byte ptr [ebp - 0x337], 0x1a
            //   c685cafcffff07       | mov                 byte ptr [ebp - 0x336], 7
            //   c685cbfcffff06       | mov                 byte ptr [ebp - 0x335], 6
            //   c685ccfcffff05       | mov                 byte ptr [ebp - 0x334], 5
            //   c685cdfcffff0d       | mov                 byte ptr [ebp - 0x333], 0xd
            //   c685cefcffff06       | mov                 byte ptr [ebp - 0x332], 6

        $sequence_8 = { 8b8510e9ffff 038514e9ffff 50 e8???????? 8d8dd8fdffff 83c40c 8d5101 }
            // n = 7, score = 100
            //   8b8510e9ffff         | mov                 eax, dword ptr [ebp - 0x16f0]
            //   038514e9ffff         | add                 eax, dword ptr [ebp - 0x16ec]
            //   50                   | push                eax
            //   e8????????           |                     
            //   8d8dd8fdffff         | lea                 ecx, [ebp - 0x228]
            //   83c40c               | add                 esp, 0xc
            //   8d5101               | lea                 edx, [ecx + 1]

        $sequence_9 = { 33852cdfffff d1f9 660fd68514dfffff 89852cdfffff 898d2cdfffff c78514dfffff00000000 }
            // n = 6, score = 100
            //   33852cdfffff         | xor                 eax, dword ptr [ebp - 0x20d4]
            //   d1f9                 | sar                 ecx, 1
            //   660fd68514dfffff     | movq                qword ptr [ebp - 0x20ec], xmm0
            //   89852cdfffff         | mov                 dword ptr [ebp - 0x20d4], eax
            //   898d2cdfffff         | mov                 dword ptr [ebp - 0x20d4], ecx
            //   c78514dfffff00000000     | mov    dword ptr [ebp - 0x20ec], 0

    condition:
        7 of them and filesize < 1245184
}