rule win_applejeus_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.applejeus."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.applejeus"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c6856efdffff5a c6856ffdffff53 c68570fdffff75 c68571fdffff63 c68572fdffff74 c68573fdffff75 c68574fdffff5a }
            // n = 7, score = 100
            //   c6856efdffff5a       | mov                 byte ptr [ebp - 0x292], 0x5a
            //   c6856ffdffff53       | mov                 byte ptr [ebp - 0x291], 0x53
            //   c68570fdffff75       | mov                 byte ptr [ebp - 0x290], 0x75
            //   c68571fdffff63       | mov                 byte ptr [ebp - 0x28f], 0x63
            //   c68572fdffff74       | mov                 byte ptr [ebp - 0x28e], 0x74
            //   c68573fdffff75       | mov                 byte ptr [ebp - 0x28d], 0x75
            //   c68574fdffff5a       | mov                 byte ptr [ebp - 0x28c], 0x5a

        $sequence_1 = { 33f1 8917 897704 c745a821070000 c745ac00000000 8b55a8 8b75ac }
            // n = 7, score = 100
            //   33f1                 | xor                 esi, ecx
            //   8917                 | mov                 dword ptr [edi], edx
            //   897704               | mov                 dword ptr [edi + 4], esi
            //   c745a821070000       | mov                 dword ptr [ebp - 0x58], 0x721
            //   c745ac00000000       | mov                 dword ptr [ebp - 0x54], 0
            //   8b55a8               | mov                 edx, dword ptr [ebp - 0x58]
            //   8b75ac               | mov                 esi, dword ptr [ebp - 0x54]

        $sequence_2 = { 668955d7 8855d9 8955a4 8955c0 6847010000 56 8d9540ffffff }
            // n = 7, score = 100
            //   668955d7             | mov                 word ptr [ebp - 0x29], dx
            //   8855d9               | mov                 byte ptr [ebp - 0x27], dl
            //   8955a4               | mov                 dword ptr [ebp - 0x5c], edx
            //   8955c0               | mov                 dword ptr [ebp - 0x40], edx
            //   6847010000           | push                0x147
            //   56                   | push                esi
            //   8d9540ffffff         | lea                 edx, dword ptr [ebp - 0xc0]

        $sequence_3 = { 890a c744240c21070000 8b0a 334c240c 890a 8b4704 8930 }
            // n = 7, score = 100
            //   890a                 | mov                 dword ptr [edx], ecx
            //   c744240c21070000     | mov                 dword ptr [esp + 0xc], 0x721
            //   8b0a                 | mov                 ecx, dword ptr [edx]
            //   334c240c             | xor                 ecx, dword ptr [esp + 0xc]
            //   890a                 | mov                 dword ptr [edx], ecx
            //   8b4704               | mov                 eax, dword ptr [edi + 4]
            //   8930                 | mov                 dword ptr [eax], esi

        $sequence_4 = { 0420 83f058 88853cfdffff 8b8518fdffff 0421 83f056 }
            // n = 6, score = 100
            //   0420                 | add                 al, 0x20
            //   83f058               | xor                 eax, 0x58
            //   88853cfdffff         | mov                 byte ptr [ebp - 0x2c4], al
            //   8b8518fdffff         | mov                 eax, dword ptr [ebp - 0x2e8]
            //   0421                 | add                 al, 0x21
            //   83f056               | xor                 eax, 0x56

        $sequence_5 = { 8844242f 8b442424 0408 83f050 88442430 8b442424 0409 }
            // n = 7, score = 100
            //   8844242f             | mov                 byte ptr [esp + 0x2f], al
            //   8b442424             | mov                 eax, dword ptr [esp + 0x24]
            //   0408                 | add                 al, 8
            //   83f050               | xor                 eax, 0x50
            //   88442430             | mov                 byte ptr [esp + 0x30], al
            //   8b442424             | mov                 eax, dword ptr [esp + 0x24]
            //   0409                 | add                 al, 9

        $sequence_6 = { c78510ffffff4f040500 8b8d10ffffff c78510ffffff00000000 81f1490f0000 c78510ffffff0d060000 81f1060b0000 8b8510ffffff }
            // n = 7, score = 100
            //   c78510ffffff4f040500     | mov    dword ptr [ebp - 0xf0], 0x5044f
            //   8b8d10ffffff         | mov                 ecx, dword ptr [ebp - 0xf0]
            //   c78510ffffff00000000     | mov    dword ptr [ebp - 0xf0], 0
            //   81f1490f0000         | xor                 ecx, 0xf49
            //   c78510ffffff0d060000     | mov    dword ptr [ebp - 0xf0], 0x60d
            //   81f1060b0000         | xor                 ecx, 0xb06
            //   8b8510ffffff         | mov                 eax, dword ptr [ebp - 0xf0]

        $sequence_7 = { 8b85fcfdffff 042e 83f042 88852efeffff 8b85fcfdffff }
            // n = 5, score = 100
            //   8b85fcfdffff         | mov                 eax, dword ptr [ebp - 0x204]
            //   042e                 | add                 al, 0x2e
            //   83f042               | xor                 eax, 0x42
            //   88852efeffff         | mov                 byte ptr [ebp - 0x1d2], al
            //   8b85fcfdffff         | mov                 eax, dword ptr [ebp - 0x204]

        $sequence_8 = { e9???????? 8d8d5ce7ffff e9???????? 8d8d70e9ffff e9???????? 8d8d50e7ffff e9???????? }
            // n = 7, score = 100
            //   e9????????           |                     
            //   8d8d5ce7ffff         | lea                 ecx, dword ptr [ebp - 0x18a4]
            //   e9????????           |                     
            //   8d8d70e9ffff         | lea                 ecx, dword ptr [ebp - 0x1690]
            //   e9????????           |                     
            //   8d8d50e7ffff         | lea                 ecx, dword ptr [ebp - 0x18b0]
            //   e9????????           |                     

        $sequence_9 = { c78564feffffc10a0000 81f10e0b0000 8b8564feffff 35490f0000 51 3588050000 50 }
            // n = 7, score = 100
            //   c78564feffffc10a0000     | mov    dword ptr [ebp - 0x19c], 0xac1
            //   81f10e0b0000         | xor                 ecx, 0xb0e
            //   8b8564feffff         | mov                 eax, dword ptr [ebp - 0x19c]
            //   35490f0000           | xor                 eax, 0xf49
            //   51                   | push                ecx
            //   3588050000           | xor                 eax, 0x588
            //   50                   | push                eax

    condition:
        7 of them and filesize < 1245184
}