rule win_ddkong_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.ddkong."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.ddkong"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c68578ffffff43 c68579ffffff72 c6857affffff65 c6857bffffff61 c6857cffffff74 c6857dffffff65 c6857effffff54 }
            // n = 7, score = 100
            //   c68578ffffff43       | mov                 byte ptr [ebp - 0x88], 0x43
            //   c68579ffffff72       | mov                 byte ptr [ebp - 0x87], 0x72
            //   c6857affffff65       | mov                 byte ptr [ebp - 0x86], 0x65
            //   c6857bffffff61       | mov                 byte ptr [ebp - 0x85], 0x61
            //   c6857cffffff74       | mov                 byte ptr [ebp - 0x84], 0x74
            //   c6857dffffff65       | mov                 byte ptr [ebp - 0x83], 0x65
            //   c6857effffff54       | mov                 byte ptr [ebp - 0x82], 0x54

        $sequence_1 = { 3bc3 a3???????? 750d 6810270000 ff9504ffffff ebcd 53 }
            // n = 7, score = 100
            //   3bc3                 | cmp                 eax, ebx
            //   a3????????           |                     
            //   750d                 | jne                 0xf
            //   6810270000           | push                0x2710
            //   ff9504ffffff         | call                dword ptr [ebp - 0xfc]
            //   ebcd                 | jmp                 0xffffffcf
            //   53                   | push                ebx

        $sequence_2 = { 7504 33c0 eb1d 817e1c00000010 7411 33c0 }
            // n = 6, score = 100
            //   7504                 | jne                 6
            //   33c0                 | xor                 eax, eax
            //   eb1d                 | jmp                 0x1f
            //   817e1c00000010       | cmp                 dword ptr [esi + 0x1c], 0x10000000
            //   7411                 | je                  0x13
            //   33c0                 | xor                 eax, eax

        $sequence_3 = { ffd6 8bf8 a0???????? 3a05???????? 7411 33c0 }
            // n = 6, score = 100
            //   ffd6                 | call                esi
            //   8bf8                 | mov                 edi, eax
            //   a0????????           |                     
            //   3a05????????         |                     
            //   7411                 | je                  0x13
            //   33c0                 | xor                 eax, eax

        $sequence_4 = { 6a02 8bf8 ff55fc 8bf0 }
            // n = 4, score = 100
            //   6a02                 | push                2
            //   8bf8                 | mov                 edi, eax
            //   ff55fc               | call                dword ptr [ebp - 4]
            //   8bf0                 | mov                 esi, eax

        $sequence_5 = { 7447 56 50 e8???????? 59 }
            // n = 5, score = 100
            //   7447                 | je                  0x49
            //   56                   | push                esi
            //   50                   | push                eax
            //   e8????????           |                     
            //   59                   | pop                 ecx

        $sequence_6 = { 50 53 c645d447 c645d565 c645d674 c645d743 c645d875 }
            // n = 7, score = 100
            //   50                   | push                eax
            //   53                   | push                ebx
            //   c645d447             | mov                 byte ptr [ebp - 0x2c], 0x47
            //   c645d565             | mov                 byte ptr [ebp - 0x2b], 0x65
            //   c645d674             | mov                 byte ptr [ebp - 0x2a], 0x74
            //   c645d743             | mov                 byte ptr [ebp - 0x29], 0x43
            //   c645d875             | mov                 byte ptr [ebp - 0x28], 0x75

        $sequence_7 = { c645af62 c645b061 c645b16c c645b241 c645b36c }
            // n = 5, score = 100
            //   c645af62             | mov                 byte ptr [ebp - 0x51], 0x62
            //   c645b061             | mov                 byte ptr [ebp - 0x50], 0x61
            //   c645b16c             | mov                 byte ptr [ebp - 0x4f], 0x6c
            //   c645b241             | mov                 byte ptr [ebp - 0x4e], 0x41
            //   c645b36c             | mov                 byte ptr [ebp - 0x4d], 0x6c

        $sequence_8 = { c645b565 c645b674 c645b753 c645b865 c645b963 }
            // n = 5, score = 100
            //   c645b565             | mov                 byte ptr [ebp - 0x4b], 0x65
            //   c645b674             | mov                 byte ptr [ebp - 0x4a], 0x74
            //   c645b753             | mov                 byte ptr [ebp - 0x49], 0x53
            //   c645b865             | mov                 byte ptr [ebp - 0x48], 0x65
            //   c645b963             | mov                 byte ptr [ebp - 0x47], 0x63

        $sequence_9 = { 72f6 ff7604 57 ff742418 e8???????? 83c40c 395e1c }
            // n = 7, score = 100
            //   72f6                 | jb                  0xfffffff8
            //   ff7604               | push                dword ptr [esi + 4]
            //   57                   | push                edi
            //   ff742418             | push                dword ptr [esp + 0x18]
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   395e1c               | cmp                 dword ptr [esi + 0x1c], ebx

    condition:
        7 of them and filesize < 81920
}