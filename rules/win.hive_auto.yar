rule win_hive_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.hive."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.hive"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 31c0 31c9 31d2 bb06000000 }
            // n = 4, score = 300
            //   31c0                 | xor                 eax, eax
            //   31c9                 | xor                 ecx, ecx
            //   31d2                 | xor                 edx, edx
            //   bb06000000           | mov                 ebx, 6

        $sequence_1 = { 31c0 b9e4000000 31d2 31db }
            // n = 4, score = 300
            //   31c0                 | xor                 eax, eax
            //   b9e4000000           | mov                 ecx, 0xe4
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_2 = { b807000000 b9d4000000 31d2 31db }
            // n = 4, score = 300
            //   b807000000           | mov                 eax, 7
            //   b9d4000000           | mov                 ecx, 0xd4
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_3 = { b804000000 b9df000000 31d2 31db }
            // n = 4, score = 300
            //   b804000000           | mov                 eax, 4
            //   b9df000000           | mov                 ecx, 0xdf
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_4 = { 83c440 c3 e8???????? 90 }
            // n = 4, score = 200
            //   83c440               | add                 esp, 0x40
            //   c3                   | ret                 
            //   e8????????           |                     
            //   90                   | nop                 

        $sequence_5 = { b803000000 b9b6000000 31d2 31db }
            // n = 4, score = 200
            //   b803000000           | mov                 eax, 3
            //   b9b6000000           | mov                 ecx, 0xb6
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_6 = { 83c420 c3 b905000000 e8???????? }
            // n = 4, score = 200
            //   83c420               | add                 esp, 0x20
            //   c3                   | ret                 
            //   b905000000           | mov                 ecx, 5
            //   e8????????           |                     

        $sequence_7 = { b809000000 b90b000000 31d2 31db }
            // n = 4, score = 200
            //   b809000000           | mov                 eax, 9
            //   b90b000000           | mov                 ecx, 0xb
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_8 = { b805000000 b924000000 31d2 31db }
            // n = 4, score = 200
            //   b805000000           | mov                 eax, 5
            //   b924000000           | mov                 ecx, 0x24
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_9 = { 39b100000000 750a e8???????? e8???????? }
            // n = 4, score = 200
            //   39b100000000         | cmp                 dword ptr [ecx], esi
            //   750a                 | jne                 0xc
            //   e8????????           |                     
            //   e8????????           |                     

        $sequence_10 = { b801000000 b9ca000000 31d2 31db }
            // n = 4, score = 200
            //   b801000000           | mov                 eax, 1
            //   b9ca000000           | mov                 ecx, 0xca
            //   31d2                 | xor                 edx, edx
            //   31db                 | xor                 ebx, ebx

        $sequence_11 = { 89c2 e8???????? b801000000 e8???????? }
            // n = 4, score = 200
            //   89c2                 | mov                 edx, eax
            //   e8????????           |                     
            //   b801000000           | mov                 eax, 1
            //   e8????????           |                     

    condition:
        7 of them and filesize < 7946240
}