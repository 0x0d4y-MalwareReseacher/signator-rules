rule win_cinobi_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.cinobi."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cinobi"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c9 c3 55 8bec 51 e8???????? 58 }
            // n = 7, score = 200
            //   c9                   | leave               
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   51                   | push                ecx
            //   e8????????           |                     
            //   58                   | pop                 eax

        $sequence_1 = { 66898f981c0000 660fbe4e54 66898f9a1c0000 660fbe4e39 66898f9c1c0000 660fbe0e 66898f9e1c0000 }
            // n = 7, score = 100
            //   66898f981c0000       | mov                 word ptr [edi + 0x1c98], cx
            //   660fbe4e54           | movsx               cx, byte ptr [esi + 0x54]
            //   66898f9a1c0000       | mov                 word ptr [edi + 0x1c9a], cx
            //   660fbe4e39           | movsx               cx, byte ptr [esi + 0x39]
            //   66898f9c1c0000       | mov                 word ptr [edi + 0x1c9c], cx
            //   660fbe0e             | movsx               cx, byte ptr [esi]
            //   66898f9e1c0000       | mov                 word ptr [edi + 0x1c9e], cx

        $sequence_2 = { 8d93302a0000 e8???????? 03c0 52 e8???????? }
            // n = 5, score = 100
            //   8d93302a0000         | lea                 edx, dword ptr [ebx + 0x2a30]
            //   e8????????           |                     
            //   03c0                 | add                 eax, eax
            //   52                   | push                edx
            //   e8????????           |                     

        $sequence_3 = { 668987e8200000 660fbe4624 668987ea200000 660fbe4647 668987ec200000 660fbe4619 668987ee200000 }
            // n = 7, score = 100
            //   668987e8200000       | mov                 word ptr [edi + 0x20e8], ax
            //   660fbe4624           | movsx               ax, byte ptr [esi + 0x24]
            //   668987ea200000       | mov                 word ptr [edi + 0x20ea], ax
            //   660fbe4647           | movsx               ax, byte ptr [esi + 0x47]
            //   668987ec200000       | mov                 word ptr [edi + 0x20ec], ax
            //   660fbe4619           | movsx               ax, byte ptr [esi + 0x19]
            //   668987ee200000       | mov                 word ptr [edi + 0x20ee], ax

        $sequence_4 = { 660fbe462f 6689871a210000 660fbe460b 6689871c210000 660fbe4619 6689871e210000 660fbe4654 }
            // n = 7, score = 100
            //   660fbe462f           | movsx               ax, byte ptr [esi + 0x2f]
            //   6689871a210000       | mov                 word ptr [edi + 0x211a], ax
            //   660fbe460b           | movsx               ax, byte ptr [esi + 0xb]
            //   6689871c210000       | mov                 word ptr [edi + 0x211c], ax
            //   660fbe4619           | movsx               ax, byte ptr [esi + 0x19]
            //   6689871e210000       | mov                 word ptr [edi + 0x211e], ax
            //   660fbe4654           | movsx               ax, byte ptr [esi + 0x54]

        $sequence_5 = { 8b45f8 ff507f 85c0 7404 }
            // n = 4, score = 100
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   ff507f               | call                dword ptr [eax + 0x7f]
            //   85c0                 | test                eax, eax
            //   7404                 | je                  6

        $sequence_6 = { ffb09b000000 ff7598 e8???????? 83c40c 8b4dc0 89819b000000 }
            // n = 6, score = 100
            //   ffb09b000000         | push                dword ptr [eax + 0x9b]
            //   ff7598               | push                dword ptr [ebp - 0x68]
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   8b4dc0               | mov                 ecx, dword ptr [ebp - 0x40]
            //   89819b000000         | mov                 dword ptr [ecx + 0x9b], eax

        $sequence_7 = { 6a00 e8???????? 59 59 8b4dc8 8b4c8dd4 660fbe0401 }
            // n = 7, score = 100
            //   6a00                 | push                0
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   59                   | pop                 ecx
            //   8b4dc8               | mov                 ecx, dword ptr [ebp - 0x38]
            //   8b4c8dd4             | mov                 ecx, dword ptr [ebp + ecx*4 - 0x2c]
            //   660fbe0401           | movsx               ax, byte ptr [ecx + eax]

        $sequence_8 = { 8b45dc 0fb700 3d4d5a0000 7408 8b45f8 e9???????? }
            // n = 6, score = 100
            //   8b45dc               | mov                 eax, dword ptr [ebp - 0x24]
            //   0fb700               | movzx               eax, word ptr [eax]
            //   3d4d5a0000           | cmp                 eax, 0x5a4d
            //   7408                 | je                  0xa
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   e9????????           |                     

        $sequence_9 = { 668945f6 33c0 668945f8 660fbe432b 668945fc }
            // n = 5, score = 100
            //   668945f6             | mov                 word ptr [ebp - 0xa], ax
            //   33c0                 | xor                 eax, eax
            //   668945f8             | mov                 word ptr [ebp - 8], ax
            //   660fbe432b           | movsx               ax, byte ptr [ebx + 0x2b]
            //   668945fc             | mov                 word ptr [ebp - 4], ax

        $sequence_10 = { 8b45f4 ff507b 8945e8 837de8ff 7507 32c0 }
            // n = 6, score = 100
            //   8b45f4               | mov                 eax, dword ptr [ebp - 0xc]
            //   ff507b               | call                dword ptr [eax + 0x7b]
            //   8945e8               | mov                 dword ptr [ebp - 0x18], eax
            //   837de8ff             | cmp                 dword ptr [ebp - 0x18], -1
            //   7507                 | jne                 9
            //   32c0                 | xor                 al, al

        $sequence_11 = { e8???????? ff943817010000 b911040000 663bc1 }
            // n = 4, score = 100
            //   e8????????           |                     
            //   ff943817010000       | call                dword ptr [eax + edi + 0x117]
            //   b911040000           | mov                 ecx, 0x411
            //   663bc1               | cmp                 ax, cx

        $sequence_12 = { 8845b4 8b45c0 8a4013 8845b5 8b45c0 8a4005 }
            // n = 6, score = 100
            //   8845b4               | mov                 byte ptr [ebp - 0x4c], al
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]
            //   8a4013               | mov                 al, byte ptr [eax + 0x13]
            //   8845b5               | mov                 byte ptr [ebp - 0x4b], al
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]
            //   8a4005               | mov                 al, byte ptr [eax + 5]

        $sequence_13 = { 668945e8 660fbe4620 668945ea 660fbe464f 668945ec 33c0 }
            // n = 6, score = 100
            //   668945e8             | mov                 word ptr [ebp - 0x18], ax
            //   660fbe4620           | movsx               ax, byte ptr [esi + 0x20]
            //   668945ea             | mov                 word ptr [ebp - 0x16], ax
            //   660fbe464f           | movsx               ax, byte ptr [esi + 0x4f]
            //   668945ec             | mov                 word ptr [ebp - 0x14], ax
            //   33c0                 | xor                 eax, eax

        $sequence_14 = { 8bec 83ec18 e8???????? 8945fc b878440700 0345fc 8945f8 }
            // n = 7, score = 100
            //   8bec                 | mov                 ebp, esp
            //   83ec18               | sub                 esp, 0x18
            //   e8????????           |                     
            //   8945fc               | mov                 dword ptr [ebp - 4], eax
            //   b878440700           | mov                 eax, 0x74478
            //   0345fc               | add                 eax, dword ptr [ebp - 4]
            //   8945f8               | mov                 dword ptr [ebp - 8], eax

    condition:
        7 of them and filesize < 32768
}