rule win_cinobi_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-07-11"
        version = "1"
        description = "Detects win.cinobi."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.cinobi"
        malpedia_rule_date = "20230705"
        malpedia_hash = "42d0574f4405bd7d2b154d321d345acb18834a41"
        malpedia_version = "20230715"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c9 c3 55 8bec 51 e8???????? 58 }
            // n = 7, score = 200
            //   c9                   | leave               
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   51                   | push                ecx
            //   e8????????           |                     
            //   58                   | pop                 eax

        $sequence_1 = { 660fbe4e05 66898f401c0000 660fbe4e47 66898f421c0000 660fbe4e19 }
            // n = 5, score = 100
            //   660fbe4e05           | movsx               cx, byte ptr [esi + 5]
            //   66898f401c0000       | mov                 word ptr [edi + 0x1c40], cx
            //   660fbe4e47           | movsx               cx, byte ptr [esi + 0x47]
            //   66898f421c0000       | mov                 word ptr [edi + 0x1c42], cx
            //   660fbe4e19           | movsx               cx, byte ptr [esi + 0x19]

        $sequence_2 = { c3 55 8bec 83ec14 e8???????? 8945f8 b878440700 }
            // n = 7, score = 100
            //   c3                   | ret                 
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   83ec14               | sub                 esp, 0x14
            //   e8????????           |                     
            //   8945f8               | mov                 dword ptr [ebp - 8], eax
            //   b878440700           | mov                 eax, 0x74478

        $sequence_3 = { 66898fac1c0000 660fbe4e18 66898fae1c0000 660fbe4e24 }
            // n = 4, score = 100
            //   66898fac1c0000       | mov                 word ptr [edi + 0x1cac], cx
            //   660fbe4e18           | movsx               cx, byte ptr [esi + 0x18]
            //   66898fae1c0000       | mov                 word ptr [edi + 0x1cae], cx
            //   660fbe4e24           | movsx               cx, byte ptr [esi + 0x24]

        $sequence_4 = { 8845a2 8b45c0 8a4004 8845a3 8b45c0 8a00 8845a4 }
            // n = 7, score = 100
            //   8845a2               | mov                 byte ptr [ebp - 0x5e], al
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]
            //   8a4004               | mov                 al, byte ptr [eax + 4]
            //   8845a3               | mov                 byte ptr [ebp - 0x5d], al
            //   8b45c0               | mov                 eax, dword ptr [ebp - 0x40]
            //   8a00                 | mov                 al, byte ptr [eax]
            //   8845a4               | mov                 byte ptr [ebp - 0x5c], al

        $sequence_5 = { 660fbe4052 66898586faffff 33c0 66898588faffff }
            // n = 4, score = 100
            //   660fbe4052           | movsx               ax, byte ptr [eax + 0x52]
            //   66898586faffff       | mov                 word ptr [ebp - 0x57a], ax
            //   33c0                 | xor                 eax, eax
            //   66898588faffff       | mov                 word ptr [ebp - 0x578], ax

        $sequence_6 = { 8b85a8faffff 660fbe404f 66898594faffff 8b85a8faffff }
            // n = 4, score = 100
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]
            //   660fbe404f           | movsx               ax, byte ptr [eax + 0x4f]
            //   66898594faffff       | mov                 word ptr [ebp - 0x56c], ax
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]

        $sequence_7 = { 56 8d8574fdffff 50 ff939f000000 8d45cc }
            // n = 5, score = 100
            //   56                   | push                esi
            //   8d8574fdffff         | lea                 eax, [ebp - 0x28c]
            //   50                   | push                eax
            //   ff939f000000         | call                dword ptr [ebx + 0x9f]
            //   8d45cc               | lea                 eax, [ebp - 0x34]

        $sequence_8 = { ff90a7000000 8d8528f3ffff 50 e8???????? 59 d1e0 50 }
            // n = 7, score = 100
            //   ff90a7000000         | call                dword ptr [eax + 0xa7]
            //   8d8528f3ffff         | lea                 eax, [ebp - 0xcd8]
            //   50                   | push                eax
            //   e8????????           |                     
            //   59                   | pop                 ecx
            //   d1e0                 | shl                 eax, 1
            //   50                   | push                eax

        $sequence_9 = { 50 8d8540fdffff 50 8b85a8faffff ff909b000000 6aff 8d85a4f5ffff }
            // n = 7, score = 100
            //   50                   | push                eax
            //   8d8540fdffff         | lea                 eax, [ebp - 0x2c0]
            //   50                   | push                eax
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]
            //   ff909b000000         | call                dword ptr [eax + 0x9b]
            //   6aff                 | push                -1
            //   8d85a4f5ffff         | lea                 eax, [ebp - 0xa5c]

        $sequence_10 = { ff969b000000 8d862e020000 50 8d8318150000 50 }
            // n = 5, score = 100
            //   ff969b000000         | call                dword ptr [esi + 0x9b]
            //   8d862e020000         | lea                 eax, [esi + 0x22e]
            //   50                   | push                eax
            //   8d8318150000         | lea                 eax, [ebx + 0x1518]
            //   50                   | push                eax

        $sequence_11 = { 8b85a8faffff 660fbe4052 6689859efaffff 8b85a8faffff }
            // n = 4, score = 100
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]
            //   660fbe4052           | movsx               ax, byte ptr [eax + 0x52]
            //   6689859efaffff       | mov                 word ptr [ebp - 0x562], ax
            //   8b85a8faffff         | mov                 eax, dword ptr [ebp - 0x558]

        $sequence_12 = { 83ffff 7507 e8???????? 8bf8 8d4701 50 }
            // n = 6, score = 100
            //   83ffff               | cmp                 edi, -1
            //   7507                 | jne                 9
            //   e8????????           |                     
            //   8bf8                 | mov                 edi, eax
            //   8d4701               | lea                 eax, [edi + 1]
            //   50                   | push                eax

        $sequence_13 = { c6840fd020000000 75f5 48 c684072823000000 }
            // n = 4, score = 100
            //   c6840fd020000000     | mov                 byte ptr [edi + ecx + 0x20d0], 0
            //   75f5                 | jne                 0xfffffff7
            //   48                   | dec                 eax
            //   c684072823000000     | mov                 byte ptr [edi + eax + 0x2328], 0

        $sequence_14 = { 660fbe4612 668987fa200000 660fbe4601 668987fc200000 }
            // n = 4, score = 100
            //   660fbe4612           | movsx               ax, byte ptr [esi + 0x12]
            //   668987fa200000       | mov                 word ptr [edi + 0x20fa], ax
            //   660fbe4601           | movsx               ax, byte ptr [esi + 1]
            //   668987fc200000       | mov                 word ptr [edi + 0x20fc], ax

    condition:
        7 of them and filesize < 32768
}