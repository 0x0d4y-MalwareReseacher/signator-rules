rule win_oddjob_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-01-25"
        version = "1"
        description = "Detects win.oddjob."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.oddjob"
        malpedia_rule_date = "20230124"
        malpedia_hash = "2ee0eebba83dce3d019a90519f2f972c0fcf9686"
        malpedia_version = "20230125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { c685a6fafffffc c685a7faffff8b c685a8faffff53 c685a9fafffff8 c685aafaffff8b c685abfaffff03 }
            // n = 6, score = 100
            //   c685a6fafffffc       | mov                 byte ptr [ebp - 0x55a], 0xfc
            //   c685a7faffff8b       | mov                 byte ptr [ebp - 0x559], 0x8b
            //   c685a8faffff53       | mov                 byte ptr [ebp - 0x558], 0x53
            //   c685a9fafffff8       | mov                 byte ptr [ebp - 0x557], 0xf8
            //   c685aafaffff8b       | mov                 byte ptr [ebp - 0x556], 0x8b
            //   c685abfaffff03       | mov                 byte ptr [ebp - 0x555], 3

        $sequence_1 = { c68589fdffff5c c6858afdffff24 c6858bfdffff24 c6858cfdffff83 c6858dfdffffc3 c6858efdffff1a c6858ffdffff8b }
            // n = 7, score = 100
            //   c68589fdffff5c       | mov                 byte ptr [ebp - 0x277], 0x5c
            //   c6858afdffff24       | mov                 byte ptr [ebp - 0x276], 0x24
            //   c6858bfdffff24       | mov                 byte ptr [ebp - 0x275], 0x24
            //   c6858cfdffff83       | mov                 byte ptr [ebp - 0x274], 0x83
            //   c6858dfdffffc3       | mov                 byte ptr [ebp - 0x273], 0xc3
            //   c6858efdffff1a       | mov                 byte ptr [ebp - 0x272], 0x1a
            //   c6858ffdffff8b       | mov                 byte ptr [ebp - 0x271], 0x8b

        $sequence_2 = { 0f8521020000 83c004 83c104 663bd3 75d6 33c0 e9???????? }
            // n = 7, score = 100
            //   0f8521020000         | jne                 0x227
            //   83c004               | add                 eax, 4
            //   83c104               | add                 ecx, 4
            //   663bd3               | cmp                 dx, bx
            //   75d6                 | jne                 0xffffffd8
            //   33c0                 | xor                 eax, eax
            //   e9????????           |                     

        $sequence_3 = { eb1b 4b ff00 85ff 8b10 7412 3b55fc }
            // n = 7, score = 100
            //   eb1b                 | jmp                 0x1d
            //   4b                   | dec                 ebx
            //   ff00                 | inc                 dword ptr [eax]
            //   85ff                 | test                edi, edi
            //   8b10                 | mov                 edx, dword ptr [eax]
            //   7412                 | je                  0x14
            //   3b55fc               | cmp                 edx, dword ptr [ebp - 4]

        $sequence_4 = { 03c1 f7d0 5e c3 33c0 5e }
            // n = 6, score = 100
            //   03c1                 | add                 eax, ecx
            //   f7d0                 | not                 eax
            //   5e                   | pop                 esi
            //   c3                   | ret                 
            //   33c0                 | xor                 eax, eax
            //   5e                   | pop                 esi

        $sequence_5 = { 0fb75206 c0e002 8acb c0e904 80e103 0ac1 8806 }
            // n = 7, score = 100
            //   0fb75206             | movzx               edx, word ptr [edx + 6]
            //   c0e002               | shl                 al, 2
            //   8acb                 | mov                 cl, bl
            //   c0e904               | shr                 cl, 4
            //   80e103               | and                 cl, 3
            //   0ac1                 | or                  al, cl
            //   8806                 | mov                 byte ptr [esi], al

        $sequence_6 = { 8bd8 59 3bde 7508 8975fc e9???????? be04010000 }
            // n = 7, score = 100
            //   8bd8                 | mov                 ebx, eax
            //   59                   | pop                 ecx
            //   3bde                 | cmp                 ebx, esi
            //   7508                 | jne                 0xa
            //   8975fc               | mov                 dword ptr [ebp - 4], esi
            //   e9????????           |                     
            //   be04010000           | mov                 esi, 0x104

        $sequence_7 = { c68563fcffff73 c68564fcffff66 c68565fcffff5b c68566fcffffeb c68567fcffff07 c68568fcffff8b c68569fcffff56 }
            // n = 7, score = 100
            //   c68563fcffff73       | mov                 byte ptr [ebp - 0x39d], 0x73
            //   c68564fcffff66       | mov                 byte ptr [ebp - 0x39c], 0x66
            //   c68565fcffff5b       | mov                 byte ptr [ebp - 0x39b], 0x5b
            //   c68566fcffffeb       | mov                 byte ptr [ebp - 0x39a], 0xeb
            //   c68567fcffff07       | mov                 byte ptr [ebp - 0x399], 7
            //   c68568fcffff8b       | mov                 byte ptr [ebp - 0x398], 0x8b
            //   c68569fcffff56       | mov                 byte ptr [ebp - 0x397], 0x56

        $sequence_8 = { 75ea 33c9 394d0c 7624 03f7 69c06d4ec641 }
            // n = 6, score = 100
            //   75ea                 | jne                 0xffffffec
            //   33c9                 | xor                 ecx, ecx
            //   394d0c               | cmp                 dword ptr [ebp + 0xc], ecx
            //   7624                 | jbe                 0x26
            //   03f7                 | add                 esi, edi
            //   69c06d4ec641         | imul                eax, eax, 0x41c64e6d

        $sequence_9 = { c68561ffffff74 c68562ffffff18 c68563ffffff8b c68564ffffff56 c68565ffffff10 c68566ffffff29 c68567ffffffd1 }
            // n = 7, score = 100
            //   c68561ffffff74       | mov                 byte ptr [ebp - 0x9f], 0x74
            //   c68562ffffff18       | mov                 byte ptr [ebp - 0x9e], 0x18
            //   c68563ffffff8b       | mov                 byte ptr [ebp - 0x9d], 0x8b
            //   c68564ffffff56       | mov                 byte ptr [ebp - 0x9c], 0x56
            //   c68565ffffff10       | mov                 byte ptr [ebp - 0x9b], 0x10
            //   c68566ffffff29       | mov                 byte ptr [ebp - 0x9a], 0x29
            //   c68567ffffffd1       | mov                 byte ptr [ebp - 0x99], 0xd1

    condition:
        7 of them and filesize < 221184
}