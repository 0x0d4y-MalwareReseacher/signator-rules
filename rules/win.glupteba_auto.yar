rule win_glupteba_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-11-21"
        version = "1"
        description = "Detects win.glupteba."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.glupteba"
        malpedia_rule_date = "20221118"
        malpedia_hash = "e0702e2e6d1d00da65c8a29a4ebacd0a4c59e1af"
        malpedia_version = "20221125"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { eb04 8bc7 2bc6 5f 5e }
            // n = 5, score = 400
            //   eb04                 | jmp                 6
            //   8bc7                 | mov                 eax, edi
            //   2bc6                 | sub                 eax, esi
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi

        $sequence_1 = { c1e708 0b7dec 33df 8b7d10 }
            // n = 4, score = 400
            //   c1e708               | shl                 edi, 8
            //   0b7dec               | or                  edi, dword ptr [ebp - 0x14]
            //   33df                 | xor                 ebx, edi
            //   8b7d10               | mov                 edi, dword ptr [ebp + 0x10]

        $sequence_2 = { 0bca 8b55d0 c1e108 0bc8 8b4510 }
            // n = 5, score = 400
            //   0bca                 | or                  ecx, edx
            //   8b55d0               | mov                 edx, dword ptr [ebp - 0x30]
            //   c1e108               | shl                 ecx, 8
            //   0bc8                 | or                  ecx, eax
            //   8b4510               | mov                 eax, dword ptr [ebp + 0x10]

        $sequence_3 = { 53 ff15???????? e9???????? 56 57 6a06 5f }
            // n = 7, score = 400
            //   53                   | push                ebx
            //   ff15????????         |                     
            //   e9????????           |                     
            //   56                   | push                esi
            //   57                   | push                edi
            //   6a06                 | push                6
            //   5f                   | pop                 edi

        $sequence_4 = { 6a02 ff75ee ff15???????? ff75ee ff15???????? 830bff ff45fc }
            // n = 7, score = 400
            //   6a02                 | push                2
            //   ff75ee               | push                dword ptr [ebp - 0x12]
            //   ff15????????         |                     
            //   ff75ee               | push                dword ptr [ebp - 0x12]
            //   ff15????????         |                     
            //   830bff               | or                  dword ptr [ebx], 0xffffffff
            //   ff45fc               | inc                 dword ptr [ebp - 4]

        $sequence_5 = { e8???????? 83c40c 85c0 0f85b3feffff }
            // n = 4, score = 400
            //   e8????????           |                     
            //   83c40c               | add                 esp, 0xc
            //   85c0                 | test                eax, eax
            //   0f85b3feffff         | jne                 0xfffffeb9

        $sequence_6 = { c1eb08 33d3 8b5dfc 33d9 c1e708 }
            // n = 5, score = 400
            //   c1eb08               | shr                 ebx, 8
            //   33d3                 | xor                 edx, ebx
            //   8b5dfc               | mov                 ebx, dword ptr [ebp - 4]
            //   33d9                 | xor                 ebx, ecx
            //   c1e708               | shl                 edi, 8

        $sequence_7 = { 8bec b804380000 e8???????? 53 }
            // n = 4, score = 400
            //   8bec                 | mov                 ebp, esp
            //   b804380000           | mov                 eax, 0x3804
            //   e8????????           |                     
            //   53                   | push                ebx

        $sequence_8 = { 005e3e 46 00ff 3e46 }
            // n = 4, score = 100
            //   005e3e               | add                 byte ptr [esi + 0x3e], bl
            //   46                   | inc                 esi
            //   00ff                 | add                 bh, bh
            //   3e46                 | inc                 esi

        $sequence_9 = { 00cd 3e46 005e3e 46 }
            // n = 4, score = 100
            //   00cd                 | add                 ch, cl
            //   3e46                 | inc                 esi
            //   005e3e               | add                 byte ptr [esi + 0x3e], bl
            //   46                   | inc                 esi

        $sequence_10 = { 0107 eb4d 8b02 89442418 }
            // n = 4, score = 100
            //   0107                 | add                 dword ptr [edi], eax
            //   eb4d                 | jmp                 0x4f
            //   8b02                 | mov                 eax, dword ptr [edx]
            //   89442418             | mov                 dword ptr [esp + 0x18], eax

        $sequence_11 = { 0012 3f 46 008bff558bec }
            // n = 4, score = 100
            //   0012                 | add                 byte ptr [edx], dl
            //   3f                   | aas                 
            //   46                   | inc                 esi
            //   008bff558bec         | add                 byte ptr [ebx - 0x1374aa01], cl

        $sequence_12 = { 00ff 3e46 0012 3f }
            // n = 4, score = 100
            //   00ff                 | add                 bh, bh
            //   3e46                 | inc                 esi
            //   0012                 | add                 byte ptr [edx], dl
            //   3f                   | aas                 

        $sequence_13 = { 0101 03d3 8b4620 8bcb }
            // n = 4, score = 100
            //   0101                 | add                 dword ptr [ecx], eax
            //   03d3                 | add                 edx, ebx
            //   8b4620               | mov                 eax, dword ptr [esi + 0x20]
            //   8bcb                 | mov                 ecx, ebx

        $sequence_14 = { 0106 830702 392e 75a0 }
            // n = 4, score = 100
            //   0106                 | add                 dword ptr [esi], eax
            //   830702               | add                 dword ptr [edi], 2
            //   392e                 | cmp                 dword ptr [esi], ebp
            //   75a0                 | jne                 0xffffffa2

        $sequence_15 = { 00f1 3d46005e3e 46 00cd }
            // n = 4, score = 100
            //   00f1                 | add                 cl, dh
            //   3d46005e3e           | cmp                 eax, 0x3e5e0046
            //   46                   | inc                 esi
            //   00cd                 | add                 ch, cl

    condition:
        7 of them and filesize < 1417216
}