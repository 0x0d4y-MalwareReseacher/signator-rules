rule win_downdelph_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2022-04-08"
        version = "1"
        description = "Describes win.downdelph."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.downdelph"
        malpedia_rule_date = "20220405"
        malpedia_hash = "ecd38294bd47d5589be5cd5490dc8bb4804afc2a"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 84db 7505 8b5df0 eb47 bf01000000 }
            // n = 5, score = 100
            //   84db                 | test                bl, bl
            //   7505                 | jne                 7
            //   8b5df0               | mov                 ebx, dword ptr [ebp - 0x10]
            //   eb47                 | jmp                 0x49
            //   bf01000000           | mov                 edi, 1

        $sequence_1 = { c645f300 eb08 43 4f 0f851dffffff }
            // n = 5, score = 100
            //   c645f300             | mov                 byte ptr [ebp - 0xd], 0
            //   eb08                 | jmp                 0xa
            //   43                   | inc                 ebx
            //   4f                   | dec                 edi
            //   0f851dffffff         | jne                 0xffffff23

        $sequence_2 = { 8b15???????? e8???????? 83c404 8d55ec }
            // n = 4, score = 100
            //   8b15????????         |                     
            //   e8????????           |                     
            //   83c404               | add                 esp, 4
            //   8d55ec               | lea                 edx, dword ptr [ebp - 0x14]

        $sequence_3 = { 83c404 0fb60424 59 5a 5d 5f }
            // n = 6, score = 100
            //   83c404               | add                 esp, 4
            //   0fb60424             | movzx               eax, byte ptr [esp]
            //   59                   | pop                 ecx
            //   5a                   | pop                 edx
            //   5d                   | pop                 ebp
            //   5f                   | pop                 edi

        $sequence_4 = { b001 eb69 a810 7404 33c0 }
            // n = 5, score = 100
            //   b001                 | mov                 al, 1
            //   eb69                 | jmp                 0x6b
            //   a810                 | test                al, 0x10
            //   7404                 | je                  6
            //   33c0                 | xor                 eax, eax

        $sequence_5 = { 0fb64001 0145f8 8b45f8 8b5002 8955ec }
            // n = 5, score = 100
            //   0fb64001             | movzx               eax, byte ptr [eax + 1]
            //   0145f8               | add                 dword ptr [ebp - 8], eax
            //   8b45f8               | mov                 eax, dword ptr [ebp - 8]
            //   8b5002               | mov                 edx, dword ptr [eax + 2]
            //   8955ec               | mov                 dword ptr [ebp - 0x14], edx

        $sequence_6 = { 8d45cc 8b0d???????? 8b15???????? e8???????? }
            // n = 4, score = 100
            //   8d45cc               | lea                 eax, dword ptr [ebp - 0x34]
            //   8b0d????????         |                     
            //   8b15????????         |                     
            //   e8????????           |                     

        $sequence_7 = { b301 e9???????? 68???????? 8d45d4 8b0d???????? ba???????? e8???????? }
            // n = 7, score = 100
            //   b301                 | mov                 bl, 1
            //   e9????????           |                     
            //   68????????           |                     
            //   8d45d4               | lea                 eax, dword ptr [ebp - 0x2c]
            //   8b0d????????         |                     
            //   ba????????           |                     
            //   e8????????           |                     

        $sequence_8 = { d1e9 0f84e1fcffff 51 52 }
            // n = 4, score = 100
            //   d1e9                 | shr                 ecx, 1
            //   0f84e1fcffff         | je                  0xfffffce7
            //   51                   | push                ecx
            //   52                   | push                edx

        $sequence_9 = { e8???????? 8b45d4 8d4de0 8d55e4 e8???????? }
            // n = 5, score = 100
            //   e8????????           |                     
            //   8b45d4               | mov                 eax, dword ptr [ebp - 0x2c]
            //   8d4de0               | lea                 ecx, dword ptr [ebp - 0x20]
            //   8d55e4               | lea                 edx, dword ptr [ebp - 0x1c]
            //   e8????????           |                     

    condition:
        7 of them and filesize < 172032
}